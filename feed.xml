<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny&#39;s Blog</title>
  
  <subtitle>초보개발자의 배우는 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://SunnySunhwa.github.io/"/>
  <updated>2018-07-13T13:22:37.686Z</updated>
  <id>https://SunnySunhwa.github.io/</id>
  
  <author>
    <name>Sunny Sunhwa Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TIL_180713 Deploy on github page</title>
    <link href="https://SunnySunhwa.github.io/2018/07/14/TIL-180713/"/>
    <id>https://SunnySunhwa.github.io/2018/07/14/TIL-180713/</id>
    <published>2018-07-13T13:07:31.000Z</published>
    <updated>2018-07-13T13:22:37.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Deploy-on-github-page"><a href="#Deploy-on-github-page" class="headerlink" title="Deploy on github page"></a>Deploy on github page</h2><ul><li>github support service for static application to show it</li><li>It makes a ‘gh-pages’ branch to publish</li><li>If want to keep original source code (before optimizing), need to push to master branch </li></ul><hr><ol><li><p>Build to compress and optimize code for production</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn build</div></pre></td></tr></table></figure></li><li><p>Add ‘homepage’ field in package.json</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"homepage" : "http://myname.github.io/myapp",</div></pre></td></tr></table></figure></li><li><p>Build again</p></li><li><p>Add gh-pages</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add --dev gh-pages</div></pre></td></tr></table></figure></li><li><p>Add blow script in package.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// ...</div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  // ...</div><div class="line">  <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</div><div class="line">  <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Deploy it </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn run deploy</div></pre></td></tr></table></figure></li><li><p>App will be shown at <a href="http://myname.github.io/myapp" target="_blank" rel="external">http://myname.github.io/myapp</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Deploy-on-github-page&quot;&gt;&lt;a href=&quot;#Deploy-on-github-page&quot; class=&quot;headerlink&quot; title=&quot;Deploy on github page&quot;&gt;&lt;/a&gt;Deploy on github page&lt;/
      
    
    </summary>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/framework/"/>
    
      <category term="react" scheme="https://SunnySunhwa.github.io/categories/framework/react/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180712 ReactJS Component (cycle, smart/dumb)</title>
    <link href="https://SunnySunhwa.github.io/2018/07/12/TIL-180712/"/>
    <id>https://SunnySunhwa.github.io/2018/07/12/TIL-180712/</id>
    <published>2018-07-12T06:14:52.000Z</published>
    <updated>2018-07-13T06:34:11.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h1><h2 id="Order-in-component-cycle"><a href="#Order-in-component-cycle" class="headerlink" title="Order in component cycle"></a>Order in component cycle</h2><ol><li>componentWillMount(): request api</li><li>render()</li><li>componentDidMount()</li></ol><h2 id="Update-stage"><a href="#Update-stage" class="headerlink" title="Update stage"></a>Update stage</h2><ol><li>componentWillReceiveProps() -</li><li>shouldComponentUpdate(): comparison in new prop and old prop, if have changes, == true</li><li>componenetWillUpdate()</li><li>render()</li><li>componentDidUpdate()</li></ol><h2 id="Data-type-checking"><a href="#Data-type-checking" class="headerlink" title="Data type checking"></a>Data type checking</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">component</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="comment">//isRequired = 'Movie' has to have a title(string) as a prop </span></div><div class="line">    title: PropTypes.string.isRequired,</div><div class="line">    poster: PropTypes.string</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;MoviePoster poster=&#123;<span class="keyword">this</span>.props.poster&#125;/&gt;</div><div class="line">        &lt;h1&gt; &#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/h1&gt;</span></div><div class="line"><span class="regexp">      &lt;/</span>div&gt;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><ul><li>state = {}</li><li>if ‘state’ change, component do ‘render()’ again automatically</li><li>when want to change the state’s value, should use <strong>this.setState({content})</strong> </li><li>can’t over ride like ‘this.state.varName = ‘other value’ -&gt; automatic change ain’t be happend.</li><li>TIP for infinite scroll</li></ul><h2 id="Smart-Componenet-vs-Dumb-Componenet"><a href="#Smart-Componenet-vs-Dumb-Componenet" class="headerlink" title="Smart Componenet vs Dumb Componenet"></a>Smart Componenet vs Dumb Componenet</h2><ul><li>if component doesn’t need to have componenetWillMount, function, updateState, render but only do ‘return’, it can be stateless componenet (= Dumb Componenet).</li><li>use ‘functional component’ instead of ‘class componenet’</li><li>for checking prop type: use the name instead of ‘static’ keyworkd.</li><li>eg) MoviePoster.proptypes = { poster: PropTypes.string.isRequired}</li></ul><h4 id="How-to-change-smart-component-into-dumb"><a href="#How-to-change-smart-component-into-dumb" class="headerlink" title="How to change smart component into dumb."></a>How to change smart component into dumb.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// before</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoviePoster</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;img src=&#123;<span class="keyword">this</span>.props.poster&#125;/&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// after = dumb componenet</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoviePoster</span>(<span class="params">&#123;poster&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span>(</div><div class="line">    &lt;img src=&#123;poster&#125; /&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS&quot;&gt;&lt;a href=&quot;#ReactJS&quot; class=&quot;headerlink&quot; title=&quot;ReactJS&quot;&gt;&lt;/a&gt;ReactJS&lt;/h1&gt;&lt;h2 id=&quot;Order-in-component-cycle&quot;&gt;&lt;a href=&quot;#Order-in-
      
    
    </summary>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/framework/"/>
    
      <category term="react" scheme="https://SunnySunhwa.github.io/categories/framework/react/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180607 다양한 정렬검색을 통한 학생점수 관리 프로그램</title>
    <link href="https://SunnySunhwa.github.io/2018/06/07/TIL-180607/"/>
    <id>https://SunnySunhwa.github.io/2018/06/07/TIL-180607/</id>
    <published>2018-06-07T01:23:51.000Z</published>
    <updated>2018-07-10T11:11:19.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-programming-Assignment"><a href="#Java-programming-Assignment" class="headerlink" title="Java programming Assignment"></a>Java programming Assignment</h2><p>자바 프로그래밍 수업 어싸 과제제출로 나왔던 문제 중 하나.<br>sort()와 같은 api사용 없이 이진/삽입/순차 검색을 통한 정렬법을 사용하여<br>학생 점수를 관리하는 프로그램이다. 모든 것은 사용자의 입력값을 기반으로 움직임.<br>사실 실용성(?)보다는 다양한 검색법을 익히기 위한 프로그래밍이다.<br>저놈의 검색법때문에 헷갈리고 헷갈렸더랜다. </p><hr><p>Write a java program to read the name and mark of 3 courses for a number of students (not more than 20).<br>The program calculates the average of each student and show his/her grade:<br>The grade is calculated as follows:  </p><table><thead><tr><th style="text-align:center">Average</th><th style="text-align:center">Grade</th></tr></thead><tbody><tr><td style="text-align:center">90-100</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">80-89</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">70-79</td><td style="text-align:center">C</td></tr><tr><td style="text-align:center">60-69</td><td style="text-align:center">D</td></tr><tr><td style="text-align:center">0-59</td><td style="text-align:center">F</td></tr></tbody></table><p>The program then shows the following menu and asks the user for his choice:  </p><hr><p>1: Print the entire list<br>2: Sort and print the list alphabetically<br>3: Sort and print the list in descending order based on the average.<br>4: Ask the user to enter an average and search for the student who has that average<br>5: Find the student who has the minimum average<br>6: Print the grade distribution<br>0: Exit<br>Enter your choice?  </p><p>Each time the user chooses an option the program shows the required output and the redisplays the menu again until the user selects 0.  </p><hr><h4 id="The-following-has-to-be-used"><a href="#The-following-has-to-be-used" class="headerlink" title="The following has to be used:"></a>The following has to be used:</h4><ul><li>Selection sort for option 2.  </li><li>Insertion sort for option 3.  </li><li>Binary search for option 4.  </li><li>Sequential search for option 5.  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="comment">// Student class. Mark is different class type</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">  String name;</div><div class="line">  Mark mark;</div><div class="line">  </div><div class="line">  <span class="comment">// Student Constructor</span></div><div class="line">  Student(String name, <span class="keyword">int</span> mk1, <span class="keyword">int</span> mk2, <span class="keyword">int</span> mk3) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.mark = <span class="keyword">new</span> Mark(mk1, mk2, mk3);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Mark constructor</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mark</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> mk1;</div><div class="line">  <span class="keyword">int</span> mk2;</div><div class="line">  <span class="keyword">int</span> mk3;</div><div class="line">  <span class="keyword">int</span> tot;</div><div class="line">  <span class="keyword">int</span> avg;</div><div class="line">  <span class="comment">// Calculate grade</span></div><div class="line">  <span class="function">String <span class="title">grade</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (avg &gt;= <span class="number">90</span> &amp;&amp; avg &lt;= <span class="number">100</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"A"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (avg &gt;= <span class="number">80</span> &amp;&amp; avg &lt;= <span class="number">89</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"B"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (avg &gt;= <span class="number">70</span> &amp;&amp; avg &lt;= <span class="number">79</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"C"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (avg &gt;= <span class="number">60</span> &amp;&amp; avg &lt;= <span class="number">69</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"D"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"F"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  Mark(<span class="keyword">int</span> mk1, <span class="keyword">int</span> mk2, <span class="keyword">int</span> mk3)&#123;</div><div class="line">    <span class="keyword">this</span>.mk1 = mk1;</div><div class="line">    <span class="keyword">this</span>.mk2 = mk2;</div><div class="line">    <span class="keyword">this</span>.mk3 = mk3;</div><div class="line">    <span class="keyword">this</span>.tot = mk1 + mk2 + mk3;</div><div class="line">    <span class="keyword">this</span>.avg = tot /<span class="number">3</span>;</div><div class="line">    <span class="keyword">this</span>.grade();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">studentManage</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Print All student's informations.</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudentInfo</span><span class="params">(Student[] studentList)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Name\tMark1\tMark2\tMark3\tAvg\tGrade"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.length; i++) &#123;</div><div class="line">      System.out.print(studentList[i].name + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.mk1 + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.mk2 + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.mk3 + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.avg + <span class="string">"\t"</span>);</div><div class="line">      System.out.println(studentList[i].mark.grade() + <span class="string">"\t"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// Print All student's informations in descending order</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrintStudentInfo</span><span class="params">(Student[] studentList)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Name\tMark1\tMark2\tMark3\tAvg\tGrade"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = studentList.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">      System.out.print(studentList[i].name + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.mk1 + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.mk2 + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.mk3 + <span class="string">"\t"</span>);</div><div class="line">      System.out.print(studentList[i].mark.avg + <span class="string">"\t"</span>);</div><div class="line">      System.out.println(studentList[i].mark.grade() + <span class="string">"\t"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Print Menu</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"==========================================================="</span>);</div><div class="line">    System.out.println(<span class="string">"1: Print the entire list"</span>);</div><div class="line">    System.out.println(<span class="string">"2: Sort and print the list alphabetically"</span>);</div><div class="line">    System.out.println(<span class="string">"3: Sort and print the list in descending order based on the average"</span>);</div><div class="line">    System.out.println(<span class="string">"4: Search for the student who has that average"</span>);</div><div class="line">    System.out.println(<span class="string">"5: Find the student who has the minimum average"</span>);</div><div class="line">    System.out.println(<span class="string">"6: Print the grade distribution"</span>);</div><div class="line">    System.out.println(<span class="string">"0: Exit"</span>);</div><div class="line">    System.out.println(<span class="string">"=========================================================="</span>);</div><div class="line">    System.out.print(<span class="string">"Enter your choice? "</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="comment">// Make Scanner's instance to get the value from user</span></div><div class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">    System.out.print(<span class="string">"Enter the number of students ? "</span>);</div><div class="line">    <span class="keyword">int</span> numOfStudents = in.nextInt();</div><div class="line"></div><div class="line">      <span class="comment">// studentList(Array)'s size be decided by user's input</span></div><div class="line">      <span class="comment">// Make 'student' automatically</span></div><div class="line">      Student[] studentList = <span class="keyword">new</span> Student[numOfStudents];</div><div class="line">      String name;</div><div class="line">      <span class="keyword">int</span> mk1, mk2, mk3;</div><div class="line">      </div><div class="line">      <span class="comment">// To get student's information</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.length; i++)&#123;</div><div class="line">        System.out.print(<span class="string">"Enter name and 3 marks for student "</span> + (i+<span class="number">1</span>) +<span class="string">"? "</span>);</div><div class="line">        name = in.next();</div><div class="line">        mk1 = in.nextInt();</div><div class="line">        mk2 = in.nextInt();</div><div class="line">        mk3 = in.nextInt();</div><div class="line">        studentList[i] = <span class="keyword">new</span> Student(name, mk1, mk2, mk3);</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">      <span class="keyword">int</span> sel;</div><div class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">        showMenu();</div><div class="line">        sel = in.nextInt();</div><div class="line"></div><div class="line">        <span class="comment">// Func according to user's input</span></div><div class="line">        <span class="keyword">switch</span>(sel)&#123;</div><div class="line"></div><div class="line">          <span class="comment">// Print entire list</span></div><div class="line">          <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            printStudentInfo(studentList);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line"></div><div class="line">          <span class="comment">// *Selection Search*  Sort and print the list alphabetically</span></div><div class="line">          <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.length; i++) &#123;</div><div class="line">            <span class="comment">// Find the minimum in the student list</span></div><div class="line">            Student Min= studentList[i];</div><div class="line">            <span class="keyword">int</span> Index = i;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; studentList.length; j++) &#123;</div><div class="line">              <span class="keyword">if</span> (Min.name.compareTo(studentList[j].name) &gt; <span class="number">0</span>) &#123;</div><div class="line">                Min = studentList[j];</div><div class="line">                Index = j;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Swap studentList[i] with studentList[Index]. if necessary</span></div><div class="line">            <span class="keyword">if</span> (Index != i) &#123;</div><div class="line">              studentList[Index] = studentList[i];</div><div class="line">              studentList[i] = Min;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          printStudentInfo(studentList);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">          <span class="comment">// *Insertion Search* Sort &amp; print the list in descending order based on the average.</span></div><div class="line">          <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; studentList.length; i++) &#123;</div><div class="line">              Student currentElement = studentList[i];</div><div class="line">              <span class="keyword">int</span> k;</div><div class="line">              <span class="keyword">for</span> (k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span> &amp;&amp; studentList[k].mark.avg &gt; currentElement.mark.avg; k--) &#123;</div><div class="line">                studentList[k + <span class="number">1</span>] = studentList[k];</div><div class="line">              &#125;</div><div class="line">              <span class="comment">// Insert the current element into studentList[k + 1]</span></div><div class="line">              studentList[k + <span class="number">1</span>] = currentElement;</div><div class="line">            &#125;</div><div class="line">              reversePrintStudentInfo(studentList);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">          <span class="comment">// *Binary Search* Ask the user to enter an average and search for the student who has that average</span></div><div class="line">          <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">          System.out.print(<span class="string">"Enter the average to search:"</span>);</div><div class="line">          <span class="keyword">int</span> searchAvg = in.nextInt();</div><div class="line">          <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">          <span class="keyword">int</span> high = studentList.length - <span class="number">1</span>;</div><div class="line">          <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span> (studentList[high].mark.avg &gt;= studentList[low].mark.avg) &#123;</div><div class="line">              <span class="comment">// If input value exact saime with mid, Print the result, then Finish</span></div><div class="line">              <span class="keyword">if</span> (searchAvg == studentList[mid].mark.avg)&#123;</div><div class="line">                System.out.println(<span class="string">"The student who has that average: "</span>+ studentList[mid].name);</div><div class="line">                <span class="keyword">break</span>;&#125;</div><div class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (searchAvg &lt; studentList[mid].mark.avg)</div><div class="line">                studentList[high] = studentList[mid - <span class="number">1</span>];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                  studentList[low] = studentList[mid + <span class="number">1</span>];&#125;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"The student who has that average: "</span>+ studentList[mid].name);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line"></div><div class="line">          <span class="comment">// *Sequential Search* Find the student who has the minimum average</span></div><div class="line">          <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">          <span class="comment">// initialize min's value as 'student'</span></div><div class="line">          Student min = studentList[<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; studentList.length; j++) &#123;</div><div class="line">                  <span class="keyword">if</span> (studentList[j].mark.avg &lt; min.mark.avg) &#123;</div><div class="line">                    min = studentList[j];</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">            System.out.println(<span class="string">"Student with min average is: "</span> + min.name + <span class="string">"  Average= "</span> + min.mark.avg);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line"></div><div class="line">          <span class="comment">// Print Grade distribution</span></div><div class="line">          <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">          <span class="comment">// variables for counting each grade</span></div><div class="line">          <span class="keyword">int</span> cntA = <span class="number">0</span>;</div><div class="line">          <span class="keyword">int</span> cntB = <span class="number">0</span>;</div><div class="line">          <span class="keyword">int</span> cntC = <span class="number">0</span>;</div><div class="line">          <span class="keyword">int</span> cntD = <span class="number">0</span>;</div><div class="line">          <span class="keyword">int</span> cntF = <span class="number">0</span>;</div><div class="line">          </div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.length; i++)&#123;</div><div class="line">            String grade = (studentList[i].mark.grade());</div><div class="line">              <span class="keyword">if</span>(grade == <span class="string">"A"</span>) cntA += <span class="number">1</span>;</div><div class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(grade == <span class="string">"B"</span>) cntB += <span class="number">1</span>;</div><div class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(grade == <span class="string">"C"</span>) cntC += <span class="number">1</span>;</div><div class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(grade == <span class="string">"D"</span>) cntD += <span class="number">1</span>;</div><div class="line">              <span class="keyword">else</span> &#123; cntF += <span class="number">1</span>;&#125;</div><div class="line">            &#125;</div><div class="line">            System.out.print(<span class="string">"Grade distribution: "</span>);</div><div class="line">            System.out.print(<span class="string">" A="</span> + cntA);</div><div class="line">            System.out.print(<span class="string">" B="</span> + cntB);</div><div class="line">            System.out.print(<span class="string">" C="</span> + cntC);</div><div class="line">            System.out.print(<span class="string">" D="</span> + cntD);</div><div class="line">            System.out.println(<span class="string">" F="</span> + cntF);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">          <span class="comment">// Exit</span></div><div class="line">          <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            System.out.println(<span class="string">"This is the end of the program...Thank you"</span>);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="출력결과"><a href="#출력결과" class="headerlink" title="출력결과"></a>출력결과</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">Enter the number of students ? <span class="number">5</span>Enter name and <span class="number">3</span> marks <span class="keyword">for</span> student <span class="number">1</span>? xxx <span class="number">90</span> <span class="number">100</span> <span class="number">90</span>Enter name and <span class="number">3</span> marks <span class="keyword">for</span> student <span class="number">2</span>? fff <span class="number">10</span> <span class="number">20</span> <span class="number">10</span></div><div class="line">Enter name and <span class="number">3</span> marks <span class="keyword">for</span> student <span class="number">3</span>? aaa <span class="number">70</span> <span class="number">80</span> <span class="number">90</span></div><div class="line">Enter name and <span class="number">3</span> marks <span class="keyword">for</span> student <span class="number">4</span>? ccc <span class="number">30</span> <span class="number">50</span> <span class="number">90</span></div><div class="line">Enter name and <span class="number">3</span> marks <span class="keyword">for</span> student <span class="number">5</span>? eee <span class="number">70</span> <span class="number">70</span> <span class="number">50</span>===========================================================<span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average6: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span>==========================================================</div><div class="line">Enter your choice? <span class="number">1</span></div><div class="line">Name    Mark1   Mark2   Mark3   Avg     Grade</div><div class="line">xxx     <span class="number">90</span>      <span class="number">100</span>     <span class="number">90</span>      <span class="number">93</span>      A</div><div class="line">fff     <span class="number">10</span>      <span class="number">20</span>      <span class="number">10</span>      <span class="number">13</span>      F</div><div class="line">aaa     <span class="number">70</span>      <span class="number">80</span>      <span class="number">90</span>      <span class="number">80</span>      B</div><div class="line">ccc     <span class="number">30</span>      <span class="number">50</span>      <span class="number">90</span>      <span class="number">56</span>      F</div><div class="line">eee     <span class="number">70</span>      <span class="number">70</span>      <span class="number">50</span>      <span class="number">63</span>      D</div><div class="line">===========================================================</div><div class="line"><span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average</div><div class="line"><span class="number">6</span>: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span></div><div class="line">==========================================================</div><div class="line">Enter your choice? <span class="number">2</span></div><div class="line">Name    Mark1   Mark2   Mark3   Avg     Grade</div><div class="line">aaa     <span class="number">70</span>      <span class="number">80</span>      <span class="number">90</span>      <span class="number">80</span>      B</div><div class="line">ccc     <span class="number">30</span>      <span class="number">50</span>      <span class="number">90</span>      <span class="number">56</span>      F</div><div class="line">eee     <span class="number">70</span>      <span class="number">70</span>      <span class="number">50</span>      <span class="number">63</span>      D</div><div class="line">fff     <span class="number">10</span>      <span class="number">20</span>      <span class="number">10</span>      <span class="number">13</span>      F</div><div class="line">xxx     <span class="number">90</span>      <span class="number">100</span>     <span class="number">90</span>      <span class="number">93</span>      A</div><div class="line">===========================================================</div><div class="line"><span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average</div><div class="line"><span class="number">6</span>: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span></div><div class="line">==========================================================</div><div class="line">Enter your choice? <span class="number">3</span></div><div class="line">Name    Mark1   Mark2   Mark3   Avg     Grade</div><div class="line">xxx     <span class="number">90</span>      <span class="number">100</span>     <span class="number">90</span>      <span class="number">93</span>      A</div><div class="line">aaa     <span class="number">70</span>      <span class="number">80</span>      <span class="number">90</span>      <span class="number">80</span>      B</div><div class="line">eee     <span class="number">70</span>      <span class="number">70</span>      <span class="number">50</span>      <span class="number">63</span>      D</div><div class="line">ccc     <span class="number">30</span>      <span class="number">50</span>      <span class="number">90</span>      <span class="number">56</span>      F</div><div class="line">fff     <span class="number">10</span>      <span class="number">20</span>      <span class="number">10</span>      <span class="number">13</span>      F</div><div class="line">===========================================================</div><div class="line"><span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average</div><div class="line"><span class="number">6</span>: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span></div><div class="line">==========================================================</div><div class="line">Enter your choice? <span class="number">4</span></div><div class="line">Enter the average to search:<span class="number">63</span></div><div class="line">The student who has that average: eee</div><div class="line">===========================================================</div><div class="line"><span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average</div><div class="line"><span class="number">6</span>: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span></div><div class="line">==========================================================</div><div class="line">Enter your choice? <span class="number">5</span></div><div class="line">Student with min average is: fff  Average= <span class="number">13</span></div><div class="line">===========================================================</div><div class="line"><span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average</div><div class="line"><span class="number">6</span>: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span></div><div class="line">==========================================================</div><div class="line">Enter your choice? <span class="number">6</span></div><div class="line">Grade distribution:  A=<span class="number">1</span> B=<span class="number">1</span> C=<span class="number">0</span> D=<span class="number">1</span> F=<span class="number">2</span></div><div class="line">===========================================================</div><div class="line"><span class="number">1</span>: <span class="built_in">Print</span> the entire list</div><div class="line"><span class="number">2</span>: Sort and <span class="built_in">print</span> the list alphabetically</div><div class="line"><span class="number">3</span>: Sort and <span class="built_in">print</span> the list <span class="keyword">in</span> descending order based on the average</div><div class="line"><span class="number">4</span>: Search <span class="keyword">for</span> the student who has that average</div><div class="line"><span class="number">5</span>: <span class="built_in">Find</span> the student who has the minimum average</div><div class="line"><span class="number">6</span>: <span class="built_in">Print</span> the grade distribution</div><div class="line"><span class="number">0</span>: <span class="keyword">Exit</span></div><div class="line">==========================================================</div><div class="line">Enter your choice? <span class="number">0</span></div><div class="line">This is the end of the program...Thank you</div></pre></td></tr></table></figure><h3 id="getter-setter-or-Constructor"><a href="#getter-setter-or-Constructor" class="headerlink" title="getter setter? or Constructor?"></a>getter setter? or Constructor?</h3><p>처음에 짤때는 학생값을 세터를 통해 입력하고 게터를 통해 가져오는 방식을 사용했다.<br>그런데 평균 점수를 가지고 정렬하는게 대부분이었기에, 접근할때에 코드가 무지하게 더러웠다.<br>사실 어싸 마감기한떄문에 이렇게 마무리를 하긴 해는데. 분명 깔끔하게 만들고자 하면 훠어어얼씬<br>깔끔하게 만들 수 있는 여지가 엄청나게 많은 못난이 코드를 만듬. 아쉬운 부분이긴 한데,<br>다음 어싸가 계속 있기때문에 더 손댈 시간이 없다 ㅠㅠㅠ 이놈의 나라는 도대체<br>뭔 어싸가 했다하면 출력물이 15장이 훅훅 넘어가는지. 이외에도 다른 문제들도 있었는데<br>비교적 간단해서 적지 않음. 검색법은 어떤 언어에서든 기본소양(?)처럼 이야기 되는 부분이니<br>다시한번 집고 넘어가면 좋을듯하다. 그나저나 전화번호부도 업데이트해야하는데<br>학기 중간이 넘어가니 시간이 점차 빠듯하다. 마음같아선 TIL 매일하면 좋겠구만.<br>그날그날 과제를 쳐내기에 바빠 엄청나게 오랜만에 기록하는 듯 :(</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-programming-Assignment&quot;&gt;&lt;a href=&quot;#Java-programming-Assignment&quot; class=&quot;headerlink&quot; title=&quot;Java programming Assignment&quot;&gt;&lt;/a&gt;Java 
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
      <category term="prac" scheme="https://SunnySunhwa.github.io/categories/java/TIL/prac/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL-180511 자바 고객관리 프로그램.v3</title>
    <link href="https://SunnySunhwa.github.io/2018/05/11/TIL-180511/"/>
    <id>https://SunnySunhwa.github.io/2018/05/11/TIL-180511/</id>
    <published>2018-05-11T04:13:55.000Z</published>
    <updated>2018-07-10T11:09:17.154Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 java.util.Scanner를 이용해 새로운 고객정보를 사용자로부터 입력받는 기능을 만들었다. 사용자는 프로그램이 사전에 준비한 질문에 대답을 입력하고, 그 대답은 새로운 인스턴스의 값으로 들어와 인스턴스가 생성! 여기에 while문을 통해 한번 실행 후 꺼지지 않도록 한다.</p><h2 id="자바-고객관리-프로그램-v2-기능"><a href="#자바-고객관리-프로그램-v2-기능" class="headerlink" title="자바 고객관리 프로그램.v2 기능"></a>자바 고객관리 프로그램.v2 기능</h2><ol><li>계속해서 반복하기 위한 반복문 while</li><li>사용자에게 보여줄 메뉴 메소드 showMenu(), switch문 설정<br>-Add to Customer<br>-Exit Program </li><li>사용자에게 입력을 요구할 질문 출력</li><li>질문에 응답한 사용자의 입력값으로 customerInfo의 인스턴스 생성</li><li>생성된 인스턴스의 값을 출력 showCustomerInfo(), 확인</li></ol><h3 id="기능에-따른-구조설계"><a href="#기능에-따른-구조설계" class="headerlink" title="기능에 따른 구조설계"></a>기능에 따른 구조설계</h3><p><strong>1. class CustomerInfo { }</strong><br>-데이터타입 설정<br>-고객정보 출력 showCustomerInfo()</p><p><strong>2. class Manage { }</strong><br>-메뉴 작성 showMenu()<br>-사용자 입력값으로 인스턴스 생성/출력할 inputData()</p><p><strong>3. main Method { }</strong><br>-while문 반복<br>-showMenu()실행<br>-각 메뉴별 실행될 구문 작성 (switch문)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerInfo</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> no;</div><div class="line">  <span class="keyword">int</span> bal;</div><div class="line">  <span class="keyword">int</span> li;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomerInfo</span><span class="params">(<span class="keyword">int</span> no, <span class="keyword">int</span> bal, <span class="keyword">int</span> li)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.no = no;</div><div class="line">    <span class="keyword">this</span>.bal = bal;</div><div class="line">    <span class="keyword">this</span>.li = li;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCustomerInfo</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"No: "</span> + no + <span class="string">"\n"</span> + <span class="string">"bal:"</span> + bal + <span class="string">"\n"</span> + <span class="string">"li:"</span> + li);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerManage2</span> </span>&#123;</div><div class="line">  <span class="comment">// static을 붙이지 않으면 에러가 발생!!!</span></div><div class="line">  <span class="keyword">static</span> Scanner key = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"******************"</span>);</div><div class="line">    System.out.println(<span class="string">"Please Select Menu"</span>);</div><div class="line">    System.out.println(<span class="string">"1. Add to customer"</span>);</div><div class="line">    System.out.println(<span class="string">"2. Exit program"</span>);</div><div class="line">    System.out.println(<span class="string">"******************"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inputData</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.print(<span class="string">"Type New Customer NO: "</span>);</div><div class="line">    <span class="keyword">int</span> no = key.nextInt();</div><div class="line">    System.out.print(<span class="string">"Input new customer's Bal: "</span>);</div><div class="line">    <span class="keyword">int</span> bal = key.nextInt();</div><div class="line">    System.out.print(<span class="string">"Input new custoemr's Li:1 "</span>);</div><div class="line">    <span class="keyword">int</span> li = key.nextInt();</div><div class="line">    </div><div class="line">    CustomerInfo newInfo = <span class="keyword">new</span> CustomerInfo(no, bal, li);</div><div class="line">    System.out.println(<span class="string">"******************"</span>);</div><div class="line">    System.out.println(<span class="string">"Check and Make sure what you input"</span>);</div><div class="line">    newInfo.showCustomerInfo();</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="comment">// selection virable</span></div><div class="line">    <span class="keyword">int</span> sel;</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">      showMenu();</div><div class="line">      sel = key.nextInt();</div><div class="line">      <span class="keyword">switch</span>(sel)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">          inputData();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">          System.out.println(<span class="string">"----Exit----"</span>);</div><div class="line">          <span class="keyword">return</span>; </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="1-구조-설계의-어려움"><a href="#1-구조-설계의-어려움" class="headerlink" title="1. 구조 설계의 어려움"></a>1. 구조 설계의 어려움</h4><p>v2에서 구현할 기능을 작성하는 것은 순조로웠으나, 구조를 설계할때에 한참을 헤맸다. 자바스크립트를 할때에도 그랬는데, 컴퓨터사고(?)가 거의 불가능하다시피 안되는 나로써는 어디에 메소드를 선언하고, 그 메소드를 어디서 실행하며 그 함수는 어디에서 받아온 값을 매개변수로 삼아 실행되는 것인지와 같은 구조 설계가 참으로!!! 약하다. v1은 복잡한 내용이 하나도 없어서 이렇게 짜면 어느 부분에서 참으로 불편하겠구나 했는데, v2는 어떤 장,단점이 있을지 파악하기 어렵다 :( 짜는 것도 뭐 힘들게 짰는데 뭐..암튼, 다른 사람이 이런 내용의 코드를 짰다면 어떤 식으로 설계했는지 한번 보고 싶다! 참고좀 해보게</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘은 java.util.Scanner를 이용해 새로운 고객정보를 사용자로부터 입력받는 기능을 만들었다. 사용자는 프로그램이 사전에 준비한 질문에 대답을 입력하고, 그 대답은 새로운 인스턴스의 값으로 들어와 인스턴스가 생성! 여기에 while문을
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
      <category term="prac" scheme="https://SunnySunhwa.github.io/categories/java/TIL/prac/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode 자바 개발환경 설정</title>
    <link href="https://SunnySunhwa.github.io/2018/05/10/java-enviorment/"/>
    <id>https://SunnySunhwa.github.io/2018/05/10/java-enviorment/</id>
    <published>2018-05-10T04:51:31.000Z</published>
    <updated>2018-07-10T11:00:02.880Z</updated>
    
    <content type="html"><![CDATA[<p>학기가 시작하기 전 나름대로의 예습(?)으로 생코 튜토리얼을 보며 자바를 독학하고 있었는데 생코에서는 IDE를 이클립스를 사용하더랜다. 자바스크립트, blog등을 vscode로 사용하고 있던 나로서는, vscode의 단축키 기능을 사용하지 못하는 것 (엄격하게 말하자면, 새로운 단축키를 익혀야 한다는것)이 못내 번거로운 일이었는데, 심지어 학교에서도 그냥 너네가 쓰고 싶은 IDE 써 라는 수업스타일을 보여준 이후에는 더더욱 낯선 이클립스로 옮겨타고 싶지 않았다. 그렇게 검색 검색을 통해 적용한 vscode 개발환경 설정! 이클립스를 사용할떄처럼 bin/, src/ 디렉토리가 나눠져 보기좋게 정리된 것은 아니나 아직 프로젝트를 하지 않는 나로서는 익숙한 IDE를 사용하게 되어 더 없이 편리하다. 사실, 인터넷에서는 맥 자바 환경변수 설정과 같은 정보가 많이 있는데 대부분이 jdk버전을 확인한 후 &gt; Contents &gt; Home &gt; vi 입력모드에서 수정하는 방법이었다. 그런데 이상하게도 내 컴퓨터는 먹히질 않았단 말이지 (지금도 왜 그런것인지는 알수가 없다 궁금 궁금!) </p><p>결국 나는 다른 방법을 찾아 (심지어 매우 간단!) 적용했고, 나와 같이 생초짜인 누군가, 또는 뉴 컴퓨터에서 이러한 상황을 다시 마주칠 언젠가를 위해 기록해둠.</p><p>*ps. mac os 기준!</p><hr><h3 id="1-jdk-버전-확인하기"><a href="#1-jdk-버전-확인하기" class="headerlink" title="1. jdk 버전 확인하기"></a>1. jdk 버전 확인하기</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> $ <span class="built_in">cd</span> /Library/Java/JavaVirtualMachines/ </div><div class="line"> $ ls</div><div class="line"> // 자신의 jdk 버전을 확인하자</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// $ <span class="built_in">cd</span> ~ 명령어로 부터 시작한 Library가 아님을 알자</div><div class="line">sunny@Sunnys-MacBook-Pro:~$ <span class="built_in">cd</span> ..</div><div class="line">sunny@Sunnys-MacBook-Pro:/Users$ <span class="built_in">cd</span> ..</div><div class="line">sunny@Sunnys-MacBook-Pro:/$ </div><div class="line">sunny@Sunnys-MacBook-Pro:/$ ls</div><div class="line">// 이제 여기에서 나오는 리스트의 Library다</div></pre></td></tr></table></figure><h3 id="2-install-vscode-Extension"><a href="#2-install-vscode-Extension" class="headerlink" title="2. install vscode Extension"></a>2. install vscode Extension</h3><p>Language Support for Java(TM) by Red Hat</p><h3 id="3-vscode-User-settings"><a href="#3-vscode-User-settings" class="headerlink" title="3. vscode User settings"></a>3. vscode User settings</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 1번에서 확인한 jdk 버전</div><div class="line">"java.home" : "/Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents/Home",</div><div class="line">    "code-runner.runInTerminal": true,</div><div class="line">    "java.errors.incompleteClasspath.severity": "ignore"</div></pre></td></tr></table></figure><p>이렇게 하면 vscode안에서도 Scanner 콘솔에서 값 입력하기까지 확인해볼 수 있는 환경이 조성. 너무너무너무너무나 간단하고 기존에 vscode를 사용하던 사람이라면 다른 IDE로 옮겨탈 필요없이 사용 가능.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;학기가 시작하기 전 나름대로의 예습(?)으로 생코 튜토리얼을 보며 자바를 독학하고 있었는데 생코에서는 IDE를 이클립스를 사용하더랜다. 자바스크립트, blog등을 vscode로 사용하고 있던 나로서는, vscode의 단축키 기능을 사용하지 못하는
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/java/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180510 자바 고객관리 프로그램.v2</title>
    <link href="https://SunnySunhwa.github.io/2018/05/10/TIL-180510/"/>
    <id>https://SunnySunhwa.github.io/2018/05/10/TIL-180510/</id>
    <published>2018-05-10T03:14:10.000Z</published>
    <updated>2018-07-10T11:09:11.480Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 java.util.Scanner를 이용해 새로운 고객정보를 사용자로부터 입력받는 기능을 만들었다. 사용자는 프로그램이 사전에 준비한 질문에 대답을 입력하고, 그 대답은 새로운 인스턴스의 값으로 들어와 인스턴스가 생성! 여기에 while문을 통해 한번 실행 후 꺼지지 않도록 한다.</p><h2 id="자바-고객관리-프로그램-v2-기능"><a href="#자바-고객관리-프로그램-v2-기능" class="headerlink" title="자바 고객관리 프로그램.v2 기능"></a>자바 고객관리 프로그램.v2 기능</h2><ol><li>계속해서 반복하기 위한 반복문 while</li><li>사용자에게 보여줄 메뉴 메소드 showMenu(), switch문 설정<br>-Add to Customer<br>-Exit Program </li><li>사용자에게 입력을 요구할 질문 출력</li><li>질문에 응답한 사용자의 입력값으로 customerInfo의 인스턴스 생성</li><li>생성된 인스턴스의 값을 출력 showCustomerInfo(), 확인</li></ol><h3 id="기능에-따른-구조설계"><a href="#기능에-따른-구조설계" class="headerlink" title="기능에 따른 구조설계"></a>기능에 따른 구조설계</h3><p><strong>1. class CustomerInfo { }</strong><br>-데이터타입 설정<br>-고객정보 출력 showCustomerInfo()</p><p><strong>2. class Manage { }</strong><br>-메뉴 작성 showMenu()<br>-사용자 입력값으로 인스턴스 생성/출력할 inputData()</p><p><strong>3. main Method { }</strong><br>-while문 반복<br>-showMenu()실행<br>-각 메뉴별 실행될 구문 작성 (switch문)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerInfo</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> no;</div><div class="line">  <span class="keyword">int</span> bal;</div><div class="line">  <span class="keyword">int</span> li;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomerInfo</span><span class="params">(<span class="keyword">int</span> no, <span class="keyword">int</span> bal, <span class="keyword">int</span> li)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.no = no;</div><div class="line">    <span class="keyword">this</span>.bal = bal;</div><div class="line">    <span class="keyword">this</span>.li = li;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCustomerInfo</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"No: "</span> + no + <span class="string">"\n"</span> + <span class="string">"bal:"</span> + bal + <span class="string">"\n"</span> + <span class="string">"li:"</span> + li);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerManage2</span> </span>&#123;</div><div class="line">  <span class="comment">// static을 붙이지 않으면 에러가 발생!!!</span></div><div class="line">  <span class="keyword">static</span> Scanner key = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"******************"</span>);</div><div class="line">    System.out.println(<span class="string">"Please Select Menu"</span>);</div><div class="line">    System.out.println(<span class="string">"1. Add to customer"</span>);</div><div class="line">    System.out.println(<span class="string">"2. Exit program"</span>);</div><div class="line">    System.out.println(<span class="string">"******************"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inputData</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.print(<span class="string">"Type New Customer NO: "</span>);</div><div class="line">    <span class="keyword">int</span> no = key.nextInt();</div><div class="line">    System.out.print(<span class="string">"Input new customer's Bal: "</span>);</div><div class="line">    <span class="keyword">int</span> bal = key.nextInt();</div><div class="line">    System.out.print(<span class="string">"Input new custoemr's Li:1 "</span>);</div><div class="line">    <span class="keyword">int</span> li = key.nextInt();</div><div class="line">    </div><div class="line">    CustomerInfo newInfo = <span class="keyword">new</span> CustomerInfo(no, bal, li);</div><div class="line">    System.out.println(<span class="string">"******************"</span>);</div><div class="line">    System.out.println(<span class="string">"Check and Make sure what you input"</span>);</div><div class="line">    newInfo.showCustomerInfo();</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="comment">// selection virable</span></div><div class="line">    <span class="keyword">int</span> sel;</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">      showMenu();</div><div class="line">      sel = key.nextInt();</div><div class="line">      <span class="keyword">switch</span>(sel)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">          inputData();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">          System.out.println(<span class="string">"----Exit----"</span>);</div><div class="line">          <span class="keyword">return</span>; </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="1-구조-설계의-어려움"><a href="#1-구조-설계의-어려움" class="headerlink" title="1. 구조 설계의 어려움"></a>1. 구조 설계의 어려움</h4><p>v2에서 구현할 기능을 작성하는 것은 순조로웠으나, 구조를 설계할때에 한참을 헤맸다. 자바스크립트를 배우던 시절에도 그랬는데, 컴퓨터사고(?)가 아직 익숙하지 않은 나로써는 어디에 메소드를 선언하고, 그 메소드를 어디서 실행하며 그 함수는 어디에서 받아온 값을 매개변수로 삼아 실행되는 것인지와 같은 구조 설계가 참으로!!! 약하다. v1은 복잡한 내용이 하나도 없어서 이렇게 짜면 어느 부분에서 참으로 불편하겠구나 했는데, v2는 어떤 장,단점이 있을지 파악하기 어렵다 :( 짜는 것도 뭐 힘들게 짰는데 뭐..암튼, 다른 사람이 이런 내용의 코드를 짰다면 어떤 식으로 설계했는지 한번 보고 싶다! 참고좀 해보게</p><h4 id="2-Static-Issue"><a href="#2-Static-Issue" class="headerlink" title="2. Static Issue"></a>2. Static Issue</h4><p>Scanner 생성자를 메인 메소드가 아니라 클래스안에 포함한 것은 이번이 처음인데, 어쩐지 빨간줄이 직직- 가고 에러가 발생. “non-static variable key cannot be referenced from a static context” stack overflow를 참고해 scanner 앞에 static을 명시해주는 것으로 해결은 봤으나 이유는 모르겠는??? 아무래도 자바라는 언어 사용법을 안것이지, 이해가 있는것은 아닌터라 이런 부분이 나타나면 무엇때문인지 감이 전혀 없다..ㅜ 좀 찾아봐야할듯. 아무튼 static을 붙여주는것으로 해결은 봄.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘은 java.util.Scanner를 이용해 새로운 고객정보를 사용자로부터 입력받는 기능을 만들었다. 사용자는 프로그램이 사전에 준비한 질문에 대답을 입력하고, 그 대답은 새로운 인스턴스의 값으로 들어와 인스턴스가 생성! 여기에 while문을
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
      <category term="prac" scheme="https://SunnySunhwa.github.io/categories/java/TIL/prac/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180509 자바 고객관리 프로그램.v1</title>
    <link href="https://SunnySunhwa.github.io/2018/05/09/TIL-180509/"/>
    <id>https://SunnySunhwa.github.io/2018/05/09/TIL-180509/</id>
    <published>2018-05-09T02:28:15.000Z</published>
    <updated>2018-07-10T11:08:49.561Z</updated>
    
    <content type="html"><![CDATA[<p>자바 공부를 생코를 통해 혼자 예습삼아 진행하면서 뭔가 이론적인 것을 써먹을 방법을 강구(?)하다가 문득 자바스크립트 배울 때를 떠올렸다. 자바스크립트를 배울때 Todo앱을 단계별로 조금씩 기능을 덧붙혀가며 공부했던 기억이 매우 좋게 남아있는데 (다만, 그당시에는 한단계 한단계가 엄청 큰 변화처럼 느껴져서 매우 버거웠던 것은 안비밀) 그 기억을 되살려 간단한 자바 프로그램을 만들기로 결정! 다만, 온라인 튜토리얼과 너무 똑같은 구성으로하다가는 복붙만 하고 눈으로 읽는 정도에 머무를까 걱정되어 Assignment에서 요구한 질문을 적절히 버무려(?) 전화번호부 관리프로그램을 토대로 고객관리 프로그램을 만들어 보기로 했다.</p><h2 id="자바-고객관리-프로그램-v1-기능"><a href="#자바-고객관리-프로그램-v1-기능" class="headerlink" title="자바 고객관리 프로그램.v1 기능"></a>자바 고객관리 프로그램.v1 기능</h2><ol><li>고객의 정보들을 저장할 클래스 customerInfo 설계<br>-Account Number<br>-Balance<br>-Credit Limit</li><li>customerInfo를 출력할 메소드 showCustomerInfo</li><li>customerInfo 인스턴스를 생성하여 출력 확인</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerInfo</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> no;</div><div class="line">  <span class="keyword">int</span> bal;</div><div class="line">  <span class="keyword">int</span> li;</div><div class="line"></div><div class="line">  <span class="comment">// 생성자 함수 오버로딩</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomerInfo</span><span class="params">(<span class="keyword">int</span> no, <span class="keyword">int</span> bal, <span class="keyword">int</span> li)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.no = no;</div><div class="line">    <span class="keyword">this</span>.bal = bal;</div><div class="line">    <span class="keyword">this</span>.li = li;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 여타 다른 기능이 없는 v1이라, CustomerInfo의 멤버 메소드로 작성</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCustomerInfo</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"No: "</span> + no + <span class="string">"\n"</span> + <span class="string">"bal:"</span> + bal);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerManage1</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    CustomerInfo data1 = <span class="keyword">new</span> CustomerInfo(<span class="number">01</span>, <span class="number">30000</span>, <span class="number">10000</span>);</div><div class="line">    CustomerInfo data2 = <span class="keyword">new</span> CustomerInfo(<span class="number">02</span>, <span class="number">30000</span>, <span class="number">10000</span>);</div><div class="line">    data1.showCustomerInfo();</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="1-클래스의-멤버-메소드-ShowCustomer"><a href="#1-클래스의-멤버-메소드-ShowCustomer" class="headerlink" title="1. 클래스의 멤버 메소드 ShowCustomer()"></a>1. 클래스의 멤버 메소드 ShowCustomer()</h4><p>위 코드의 주석에서 보듯이 v1에는 다른 기능이 별도로 있는 것이 아니라 고객정보 생성과 출력밖에 없기에 ShowCustomer()를 CustomerInfo 클래스의 멤버 메소드로 설정했는데, 이게 참.. 여러명의 고객정보를 출력해야한다면 형편없는 코드이다. 접근 자체가 생성된 인스턴스를 통해야하기때문에 영 비효율적. v1에서는 고칠필요는 없으나, 추후 단계로 갈수록 고쳐야할 필요가 꼭 있음!</p><h4 id="2-CustomerInfo-생성자-오버로딩"><a href="#2-CustomerInfo-생성자-오버로딩" class="headerlink" title="2. CustomerInfo 생성자 오버로딩?"></a>2. CustomerInfo 생성자 오버로딩?</h4><p>사실 생성자함수를 별도로 작성하지 않아도, 자바는 해당 클래스명과 동일한 생성자함수를 암묵적으로 생성한다. 그러나 매개변수가 있는 생성자가 있을 때에는 오버로딩을 통해 인스턴스 생성 과정에서 매개변수를 사용해야만 하는 <strong>강제성</strong>을 줄 수 있기에 명시했다. 생코에서 생성자를 배울때 생성자의 특징 중 “값을 반환하지 않는다” 라는 말이 있었는데, 인스턴스를 생성하기 위한 메소드인데 반환값이 있다? 당연히 아웃풋으로 인스턴스가 나오는게 마땅한데, 어쩐지 저 글을 읽는 바람에 너무나 당연한(?) 사실에 잉? 이게 뭐지하고 혼란이 왔던 기억이 난다. </p><p>아무튼 v1은 아주 심플 그 자체로 순조롭게 완성</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바 공부를 생코를 통해 혼자 예습삼아 진행하면서 뭔가 이론적인 것을 써먹을 방법을 강구(?)하다가 문득 자바스크립트 배울 때를 떠올렸다. 자바스크립트를 배울때 Todo앱을 단계별로 조금씩 기능을 덧붙혀가며 공부했던 기억이 매우 좋게 남아있는데 
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
      <category term="prac" scheme="https://SunnySunhwa.github.io/categories/java/TIL/prac/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180430 상수, enum</title>
    <link href="https://SunnySunhwa.github.io/2018/04/30/TIL-180430/"/>
    <id>https://SunnySunhwa.github.io/2018/04/30/TIL-180430/</id>
    <published>2018-04-30T06:58:24.000Z</published>
    <updated>2018-07-10T11:08:25.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><ul><li>enumerated type (열거형)은 서로 연관된 상수들의 집합</li><li>상수 그룹별로 클래스를 만든것의 효과를 갖음</li><li>즉, 사실상 클래스임으로 생성자(같은 이름 메소드), 필드, 메소드를 가질수 있음</li><li>코드의 간결함과 동시에 구현의도가 열거임을 명확히 함</li><li>인스턴스 생성과 상속, 값의 변경을 방지함</li><li>또한 기본적인 클래스방법으로는 유사배열처럼 사용할 수 없는 단점이 있음 (사용자가 어떠한 데이터가 있는지 알아야만 사용 가능)</li><li>반면, enum은 어떤 데이터가 있는지 몰라도 마치 배열처럼 하나씩 꺼내서 사용 가능함 (메소드 values())</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.enum없이 클래스 정의 방법</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">fruit</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Fruit APPLE = <span class="keyword">new</span> Fruit();</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Fruit PEACH = <span class="keyword">new</span> Fruit();</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Fruit BANANA = <span class="keyword">new</span> Fruit();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 위의 코드를 enum을 활용하면 아래와 같이 간략하게 축약 가능 (동일한 내용 구현)</span></div><div class="line"><span class="keyword">enum</span> Fruit&#123;</div><div class="line">  APPLE, PEACH, BANANA</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  ** enumb생성자에 매개변수 전달하기</span></div><div class="line"><span class="keyword">enum</span> Fruit&#123;</div><div class="line">  APPLE(<span class="string">"red"</span>), PEACH(<span class="string">"pink"</span>), BANANA(<span class="string">"yellow"</span>);</div><div class="line">  <span class="comment">// private으로 사용자의 접근을 막음 </span></div><div class="line">  <span class="keyword">private</span> String color;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 같은 이름의 메소드 구문으로 생성자 만들기</span></div><div class="line">  Fruit(String color)&#123;</div><div class="line">    System.out.println(<span class="string">"Call constructor"</span> + <span class="keyword">this</span>);</div><div class="line">    <span class="comment">/* 생성자에서 this는 생성할 인스턴스</span></div><div class="line"><span class="comment">     this.color: 인스턴스의 color, 우항의 color는 매개변수로 들어온 color</span></div><div class="line"><span class="comment">     생성 후 Fruit.APPLE.getColor() 로 접근 가능함 */</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;enum&quot;&gt;&lt;a href=&quot;#enum&quot; class=&quot;headerlink&quot; title=&quot;enum&quot;&gt;&lt;/a&gt;enum&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;enumerated type (열거형)은 서로 연관된 상수들의 집합&lt;/li&gt;
&lt;li&gt;상수 그룹별로 클
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180429 Object class, API</title>
    <link href="https://SunnySunhwa.github.io/2018/04/29/TIL-180429/"/>
    <id>https://SunnySunhwa.github.io/2018/04/29/TIL-180429/</id>
    <published>2018-04-29T05:39:24.000Z</published>
    <updated>2018-07-10T11:08:20.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-class"><a href="#Object-class" class="headerlink" title="Object class"></a>Object class</h1><p>모든 클래스의 조상, 따로 지정하지 않아도 사용자가 지정한 클래스는 object 클래스를 기본적으로 상속 하게됨</p><h3 id="Object-method-1-toString"><a href="#Object-method-1-toString" class="headerlink" title="Object method - 1) toString"></a>Object method - 1) toString</h3><ul><li>부모클래스에서 상속되는 것이므로 오버라이딩 가능</li><li>super.toString() / instance.toString() 다른결과 나오게 가능</li><li>System.out.println()을 하면, 자바는 암시적으로 .toString()메소드로 호출됨</li></ul><h3 id="Object-method-2-equals"><a href="#Object-method-2-equals" class="headerlink" title="Object method - 2) equals"></a>Object method - 2) equals</h3><ul><li>객체와 객체가 같은 것인지를 비교하는 API (오버라이딩 이용)</li><li>boolean타입의 리턴값을 갖음</li><li>hashcode()도 함께 알고있어야 제대로 된 API구현이 가능</li><li>primitive 데이터 형에는 비교연산자를 통해 비교연산이 가능 (equals 필요X)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">    String name;</div><div class="line">    Student(String name)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">       <span class="comment">/* 다형성 형변환 부모-&gt; 자식행세를 위한 강제 명시 (Student)*/</span></div><div class="line">        Student _obj = (Student)obj;</div><div class="line">        <span class="keyword">return</span> name == _obj.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"egoing"</span>);</div><div class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"egoing"</span>);</div><div class="line">        System.out.println(s1 == s2);</div><div class="line">        System.out.println(s1.equals(s2));</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>[다형성 형변환]</strong><br>자식 데이터타입은 부모 데이터타입에 할당될 수 있음 (매개변수 obj) - 다형성<br>Object 데이터타입에는 name이라는 멤버가 없기에 부모데이터타입으로 변환된(s2-&gt;obj) 변수를 다시 Student 데이터타입으로 전환해야함<br>그러나, 자식이 부모행세를 하는것은 가능하나, 부모가 자식행세를 하는 것은 불가능하기 때문에 앞에 강제로 (형번환데이터타입)을 명시해주어야함</p><h3 id="Object-method-3-clone"><a href="#Object-method-3-clone" class="headerlink" title="Object method - 3) clone"></a>Object method - 3) clone</h3><ul><li>객체를 똑같이 복사해주는 메소드</li><li>단, 복제가능한 객체라는 사실을 자바 vm에게 알려주어야함</li><li>이를 위해 Cloneable 인터페이스를 구현 (implements Clonable)</li><li>접근제어자 protected(같은 패키지안에서만 접근 가능) -&gt; 즉, object에 내장되어있는 API로 자동접근은 불가 -&gt; protected는 상속은 가능하기에, 상속을 통한 접근으로 클론해야함 (이때 접근제어자를 public으로)</li><li>clone은 예외가 강제되어 있기 때문에 throws 해주어야함</li><li>따라서, 메인 메소드에서 사용자가 그 예외를 어떻게 처리할 것인지 적어주어야함</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line">    String name;</div><div class="line">    Student(String name)&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 클론의 접근제어자는 protected</span></div><div class="line"><span class="comment">       API 사용방법에 예외가 강제되어있기에 throws 해주어야함 */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</div><div class="line">      <span class="comment">// super(object) 상속을 통한 접근으로 클론해야함</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"egoing"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">// s1은 object데이터타입으로 리턴되고 있기 때문에 명시적 형변환 (Student) 필요</span></div><div class="line">            Student s2 = (Student)s1.clone();</div><div class="line">            System.out.println(s1.name);</div><div class="line">            System.out.println(s2.name);</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object-class&quot;&gt;&lt;a href=&quot;#Object-class&quot; class=&quot;headerlink&quot; title=&quot;Object class&quot;&gt;&lt;/a&gt;Object class&lt;/h1&gt;&lt;p&gt;모든 클래스의 조상, 따로 지정하지 않아도 사용자가 지
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180424 Exception (try/catch)</title>
    <link href="https://SunnySunhwa.github.io/2018/04/24/TIL-180424/"/>
    <id>https://SunnySunhwa.github.io/2018/04/24/TIL-180424/</id>
    <published>2018-04-24T04:59:37.000Z</published>
    <updated>2018-07-10T11:08:12.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>프로그램을 만든 프로그래머가 상정한 정상적인 처리에서 벗어나는 경우에 이를 처리하기 위한 방법</p><h3 id="try-amp-catch"><a href="#try-amp-catch" class="headerlink" title="try &amp; catch"></a>try &amp; catch</h3><p>예외가 발생하면 자바는 마치 메소드를 호출하듯이 catch를 호출하면서 그 인자로 Exception 클래스의 인스턴스를 전달</p><ul><li>catch문은 여러개 설정이 가능하여 경우에 따라 다른 로직설정이 가능</li><li>eg. catch(ArithmeticException e){}, (ArrayIndexOfBoundsException e){} </li><li>즉, else if와 같이 사용이 가능함<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">//예외가 예상되는 로직</span></div><div class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">  <span class="comment">//예외가 발생했을때 실행될 로직</span></div><div class="line">  System.out.println(<span class="string">"오류가 발생했습니다 : "</span>+e.getMessage());</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  System.out.println(<span class="string">"언제나 실행되는 로직"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>1) e.getMessage: 간략한 메세지만 출력<br>2) e.toString(): +예외를 일으킨 이유<br>3) e.printStackTrace(): +에외의 위치까지</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>try/catch믄 다음에 나오는 문법으로 예외여부와 관계없이 실행되는 로직</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Exception&quot;&gt;&lt;a href=&quot;#Exception&quot; class=&quot;headerlink&quot; title=&quot;Exception&quot;&gt;&lt;/a&gt;Exception&lt;/h2&gt;&lt;p&gt;프로그램을 만든 프로그래머가 상정한 정상적인 처리에서 벗어나는 경우에 이를 
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180422 Interface, Polymorphism</title>
    <link href="https://SunnySunhwa.github.io/2018/04/22/TIL-180422/"/>
    <id>https://SunnySunhwa.github.io/2018/04/22/TIL-180422/</id>
    <published>2018-04-22T06:35:03.000Z</published>
    <updated>2018-07-10T11:08:07.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><ul><li>‘implements’를 사용한 하위 클래스에 특정한 메소드가 반드시 존재하도록 강제하는 규제</li><li>규제를 지키지 않을 시 아예 컴파일조차 되지 않음</li><li>협업을 위한 클래스의 명세서처럼 사용됨 (어떠한 멤버(변수, 메소드)들을 사용하는가)</li><li>따라서, 인터페이스 내의 메소드들은 public 접근제어자를 사용</li><li>상속은 하나의 클래스만 가능한 반면, 인터페이스는 하위클래스가 여러개의 인터페이스를 구현할 수 있음</li><li>인터페이스도 상속 가능</li></ul><p><strong>[Interface VS Abstract]</strong>  </p><ul><li>인스턴스는 클래스가 아닌 인스턴스라는 고유한 형태를 가지고 있으나, 추상클래스는 일반 클래스임 </li><li>인스턴스는 구체적 로직을 가지고 있을수 없으나, 추상클래스는 가지고 있을 수 있음</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span></span>&#123;</div><div class="line">  <span class="comment">// z메소드의 구체적 로직은 서술x</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">I</span></span>&#123;</div><div class="line">  <span class="comment">// 하위 클래스는, 인터페이스에 있는 메소드를 반드시 구현해야함</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">// 구체적 로직 서술</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Polymorphism-다형성"><a href="#Polymorphism-다형성" class="headerlink" title="Polymorphism (다형성)"></a>Polymorphism (다형성)</h2><p>하나의 메소드나 클래스가 있을 때 이것들이 다양한 방법으로 동작하는 것을 의미 (eg.오버로딩)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">x</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">"x"</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">y</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">"y"</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolymorphismDemo1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="comment">/* B를 인스턴스화한 인스턴스를 변수 obj에 넣음</span></div><div class="line"><span class="comment">         obj는 A클래스 데이터타입</span></div><div class="line"><span class="comment">         즉,  obj라는 변수에 클래스 B를 담았지만,</span></div><div class="line"><span class="comment">         obj 변수는 클래스 A의 행세를 하고 있음 */</span></div><div class="line">        A obj = <span class="keyword">new</span> B();</div><div class="line">        obj.x();</div><div class="line">        <span class="comment">// obj.y(); 오류 발생</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>공통의 부모를 갖는 하위클래스끼리 같은 메소드를 갖는다면, 부모클래스의 데이터타입으로 지정하여 중복없이 코드구현 가능<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorDemo</span> </span>&#123;</div><div class="line">  <span class="comment">/* excute 메소드는 두 하위클래스의 공통 부모클래스를 </span></div><div class="line"><span class="comment">    가진 데이터타입의 매개변수를 설정함으로써</span></div><div class="line"><span class="comment">    CalculatorDecoPlus, CalculatorDecoMinus </span></div><div class="line"><span class="comment">    두가지로 써야하는 중복을 피할 수 있었음 */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Calculator cal)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"실행결과"</span>);</div><div class="line">        cal.run();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        Calculator c1 = <span class="keyword">new</span> CalculatorDecoPlus();</div><div class="line">        c1.setOprands(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">         </div><div class="line">        Calculator c2 = <span class="keyword">new</span> CalculatorDecoMinus();</div><div class="line">        c2.setOprands(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">         </div><div class="line">        execute(c1);</div><div class="line">        execute(c2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Interface&quot;&gt;&lt;a href=&quot;#Interface&quot; class=&quot;headerlink&quot; title=&quot;Interface&quot;&gt;&lt;/a&gt;Interface&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‘implements’를 사용한 하위 클래스에 특정한 메소드가 반
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180420 Abstract, Final</title>
    <link href="https://SunnySunhwa.github.io/2018/04/20/TIL-180420/"/>
    <id>https://SunnySunhwa.github.io/2018/04/20/TIL-180420/</id>
    <published>2018-04-20T07:13:21.000Z</published>
    <updated>2018-07-10T11:07:58.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>상속해서 사용하도록 강제하는 것. 즉, 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 이 메소드를 상속 받은 하위 클래스의 책임으로 위임</p><ul><li>abstract 클래스일 경우 반드시 상속하여(extends) 사용해야함</li><li>abstract 클래스가 abstract메소드를 포함할 경우, 상속하는 클래스(사용하는쪽)에서 해당 메소드의 구체적 로직을 오버라이딩하여 사용해야함</li><li>따라서 abstract클래스 속 abstract 메소드는 로직을 작성하는 {} 문구가 없음 </li><li>멤버들(변수, 메소드) 중 하나라도 abstract가 있다면 그 클래스는 abstract 클래스임</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="comment">//abstract메소드는 로직을 작성하는 &#123;&#125;가 없음</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">b</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"world"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* abstract class A를 사용하기 위해서는 상속받는 클래스B를 생성하되,</span></div><div class="line"><span class="comment">A.b()역시 abstract이기 때문에, b메소드를 포함해야함.</span></div><div class="line"><span class="comment">b메소드는 반드시 사용하는 쪽에서 구체적인 로직을 오버라이딩 해야함 */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">b</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        B obj = <span class="keyword">new</span> B();</div><div class="line">        System.out.println(obj.b());</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>추상이 상속을 강제하는 것이라면 final은 <strong>상속/변경을 금지</strong>하는 규제. </p><ul><li>변수: 바뀌지 않는 상수 지정과 같은 경우에 쓰임</li><li>메소드: 오버라이딩 금지를 위해 사용</li><li>클래스: 상속 금지</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h3&gt;&lt;p&gt;상속해서 사용하도록 강제하는 것. 즉, 부모 클래스에는 메소드의 시그니처만 정의해놓
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180418 자바실행과 접근제어자</title>
    <link href="https://SunnySunhwa.github.io/2018/04/18/TIL-180418/"/>
    <id>https://SunnySunhwa.github.io/2018/04/18/TIL-180418/</id>
    <published>2018-04-18T05:24:42.000Z</published>
    <updated>2018-07-10T11:07:54.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bash-자바실행"><a href="#Bash-자바실행" class="headerlink" title="Bash 자바실행"></a>Bash 자바실행</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 자바 컴파일링</div><div class="line">$ javac 메인실행클래스명.java</div><div class="line"></div><div class="line">// 컴파일링된 파일 실행</div><div class="line">$ java 메인실행클래스명</div><div class="line"></div><div class="line"></div><div class="line">// 메인실행클래스명에 필요한 클래스 패스 옵션이용하기</div><div class="line">// [.]현재디렉토리 + [;]경로구분자 + 디렉토리명 으로 구성</div><div class="line">// 즉, 현재위치 또는 해당디렉토리에서 필요한 클래스를 찾아라</div><div class="line">// 클래스패스를 지정하지 않으면 자바는 기본적으로 현재위치에서 찾음</div><div class="line"></div><div class="line">$ java -classpath <span class="string">".;디렉토리명"</span> 메인실행클래스명</div></pre></td></tr></table></figure><h3 id="환경변수"><a href="#환경변수" class="headerlink" title="환경변수"></a>환경변수</h3><p>클래스패스를 매번 실행할때마다 지정하는것은 불편 &gt; 환경변수를 사용하여 클래스패스 옵션을 입력하지 않아도 입력된것처럼 사용이 가능<br>단, 이직성에 대한 (다른컴퓨터) 문제는 발생가능</p><h3 id="멤버-접근제어자"><a href="#멤버-접근제어자" class="headerlink" title="멤버 접근제어자"></a>멤버 접근제어자</h3><table><thead><tr><th style="text-align:center">제어자</th><th style="text-align:center">같은 클래스</th><th style="text-align:center">같은 패키지</th><th style="text-align:center">다른 패키지 /상속</th><th style="text-align:center">관계없음</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">O</td><td style="text-align:center">X</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr></tbody></table><h3 id="클래스-접근제어자"><a href="#클래스-접근제어자" class="headerlink" title="클래스 접근제어자"></a>클래스 접근제어자</h3><ol><li>public:다른 패키지의 클래스에서 사용가능</li><li>default: 같은 패키지에서만 사용가능</li></ol><p><strong>[public 참고]</strong><br>public 클래스가 포함된 소소코드는 public 클래스의 클래스 명과 소스코드의 파일명이 같아야 함</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Bash-자바실행&quot;&gt;&lt;a href=&quot;#Bash-자바실행&quot; class=&quot;headerlink&quot; title=&quot;Bash 자바실행&quot;&gt;&lt;/a&gt;Bash 자바실행&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_180417 Java 상속과 생성자, overriding/loading</title>
    <link href="https://SunnySunhwa.github.io/2018/04/17/TIL-180417/"/>
    <id>https://SunnySunhwa.github.io/2018/04/17/TIL-180417/</id>
    <published>2018-04-17T08:44:16.000Z</published>
    <updated>2018-07-10T11:07:41.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="상속과-생성자"><a href="#상속과-생성자" class="headerlink" title="상속과 생성자"></a>상속과 생성자</h2><ul><li>Class 자식클래스명 extends 부모클래스명 {}을 통해 상속 가능</li><li>자바는 객체 속에 기본적으로 자신의 이름(객체명)과 동일한 생성자를 만듬</li><li>직접적인 생성자를 만들 경우 암시적 생성자는 만들어 지지 않음</li><li>부모클래스와 자식클래스가 모두 매개변수를 언급하고 있을 시, 에러 발생</li><li>-&gt; 하위객체는 extends함으로써 자바가 만든 부모객체의 암시적 생성자를 따르게 되는데, 프로그래머가 직접 지정해줌으로써 따를 수가 없기에 에러 발생</li></ul><hr><h3 id="상속과-생성자-에러-해결방안-2가지"><a href="#상속과-생성자-에러-해결방안-2가지" class="headerlink" title="상속과 생성자 에러 해결방안 2가지"></a>상속과 생성자 에러 해결방안 2가지</h3><h4 id="1-부모클래스에-암시적-기본-생성자를-직접-삽입하기"><a href="#1-부모클래스에-암시적-기본-생성자를-직접-삽입하기" class="headerlink" title="1. 부모클래스에 암시적(기본) 생성자를 직접 삽입하기"></a>1. 부모클래스에 암시적(기본) 생성자를 직접 삽입하기</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left, right;</div><div class="line">     </div><div class="line">     <span class="comment">//기본생성자 직접 삽입하기</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span></span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOprands</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h4 id="2-자식객체에-super-키워드-사용하기"><a href="#2-자식객체에-super-키워드-사용하기" class="headerlink" title="2. 자식객체에 super 키워드 사용하기"></a>2. 자식객체에 super 키워드 사용하기</h4><hr><p><strong>super키워드란?</strong></p><ul><li>super 키워드는 부모 클래스를 의미</li><li>여기에 ()붙이면 부모 클래스의 생성자를 의미하게 됨</li><li>이렇게 하면 부모 클래스의 기본 생성자가 없어져도 오류발생 X</li></ul><p><strong>자식 클래스의 생성자에서 super를 사용할 때 주의할 점</strong></p><ul><li>자식 클래스의 초기화문보다 super 키워드가 가장 먼저 사용되어야 함<br>-자식클래스는 부모클래스의 상속으로 인스턴스를 생성하기 때문에, 부모클래스의 초기화가 끝난 상태에서만 자식클래스의 초기화 진행이 가능<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOprands</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.left + <span class="keyword">this</span>.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubstractionableCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubstractionableCalculator</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">      <span class="comment">// 자식객체에 super키워드 사용</span></div><div class="line">        <span class="keyword">super</span>(left, right);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">substract</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.left - <span class="keyword">this</span>.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorConstructorDemo5</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="comment">//setOperands 함수 호출 없이 객체 생성시 left 와 right 값을 설정하기 위해서</span></div><div class="line">        SubstractionableCalculator c1 = <span class="keyword">new</span> SubstractionableCalculator(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">        c1.sum();</div><div class="line">        c1.avg();</div><div class="line">        c1.substract();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><h2 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a>Overriding</h2><p>부모클래스의 메소드를 하위클래스에서 재정의하기 위해서는 몇가지 조건이 동일하여야 함</p><ul><li>메소드 이름</li><li>리턴 타입</li><li>매개변수의 수, 타입, 순서</li></ul><p>-&gt; 이럴경우, 부모클래스와 하위클래스의 코딩이 중복됨<br>-&gt; 중복을 피하기 위해서는 super 키워드 사용<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 부모 클래스</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">avg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((<span class="keyword">this</span>.left + <span class="keyword">this</span>.right) / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 자식 클래스에는 부모클래스를 의미하는 super 키워드 사용</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">avg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.avg();</div><div class="line">    &#125;</div><div class="line">``` </div><div class="line">---</div><div class="line"></div><div class="line">## Overloading</div><div class="line">- 같은 이름이지만 서로다른 매개변수의 형식을 가지고 있는 메소드</div><div class="line">- 즉, 자바입장에서는 같은 이름의 메소드일지라도 매개변수의 이름이나, 타입이 다를경우 다른 메소드로 인식하게 됨.</div><div class="line">- 단, 매개변수의 이름, 형식이 같으나 리턴값이 (<span class="keyword">int</span>, <span class="keyword">void</span>등) 다를 경우 에러발생</div><div class="line">- 위의 경우에는 메소드를 호출하는 방식이 같기에, 자바 입장에서는 어떤 리턴값의 메소드를 실행해야하는지 알수 없음</div><div class="line">- 즉, 오버로딩은 **<span class="number">1</span>. 리턴값이 같아야하며 <span class="number">2</span>. 메소드를 호출하는 방식이 달라야 함**</div><div class="line">```java</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> left, right;</div><div class="line">    <span class="keyword">int</span> third = <span class="number">0</span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOprands</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOprands</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> third)</span></span>&#123;</div><div class="line">        <span class="comment">// this.left = left;</span></div><div class="line">        <span class="comment">// this.right = right; 중복을 막도록 아래코드로 대체</span></div><div class="line">        <span class="comment">// 중복 부분을 먼저 호출</span></div><div class="line">        <span class="keyword">this</span>.setOprands(left, right);</div><div class="line">        <span class="keyword">this</span>.third = third;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h4 id="오버라이딩-vs-오버로딩"><a href="#오버라이딩-vs-오버로딩" class="headerlink" title="오버라이딩 vs 오버로딩"></a>오버라이딩 vs 오버로딩</h4><p><strong>오버라이딩</strong>은 하위클래스가 상속받은 부모클래스의 메소드를 새롭게 변경, 정의하여 사용하고자 할때 사용.<br><strong>오버로딩</strong>은 같은 이름, 다른 매개변수의 메소드를 여러개 만들 수 있음 (eg. 같은 기능을 하는 하나의 메소드이나, 매개변수의 갯수에 따른 경우의 수와 같은 때에 적용)  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;상속과-생성자&quot;&gt;&lt;a href=&quot;#상속과-생성자&quot; class=&quot;headerlink&quot; title=&quot;상속과 생성자&quot;&gt;&lt;/a&gt;상속과 생성자&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Class 자식클래스명 extends 부모클래스명 {}을 통해 상속 가능&lt;/li
      
    
    </summary>
    
      <category term="java" scheme="https://SunnySunhwa.github.io/categories/java/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/java/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171129 Team project, 현업개발자 테크멘토링</title>
    <link href="https://SunnySunhwa.github.io/2017/11/29/TIL-171129/"/>
    <id>https://SunnySunhwa.github.io/2017/11/29/TIL-171129/</id>
    <published>2017-11-29T02:08:06.000Z</published>
    <updated>2018-07-10T11:07:30.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-I-did"><a href="#What-I-did" class="headerlink" title="What I did"></a>What I did</h1><ul><li>펫프로젝트 와이어프레임 v3 완료</li><li>팀프로젝트 컴포넌트 분리기획, 업무 분담</li><li>sprint 1 업무: Pet register / edit</li><li>현업개발자 이웅재님 테크멘토링</li><li>블로그용 에디터 ‘아톰’ extension까지 완료~</li></ul><h1 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h1><p><strong>Task를 쪼갤때</strong><br>최대한 작게 쪼개고, Given/when/then으로 그 테스크를 설명<br>놓치지 않을 수 있도록 도와주는 좋은 방법일듯.</p><ul><li>jira: 트렐로와 비슷한 협업task관리, 개발자에 더욱 친숙한.</li><li>upsorce: 코드 리뷰, 브랜치 확인</li></ul><h3 id="server와의-연결"><a href="#server와의-연결" class="headerlink" title="server와의 연결"></a>server와의 연결</h3><p>json, jwt</p><p><strong>Server-side-Rendering</strong><br>고려해봐야할 사항</p><p><strong>Lodash</strong><br>함수형 스크립트 Rxjs<br>백엔드에서 데이터를 가져왔을때 데이터 필터링!<br>우리는 데이터 가공에 필터함수를 쓰는 방법에 한해있었는데,<br>lodash 참고하여 활용하는 방법을 추후에는 고민해보기  </p><p><strong>Realistic data generator</strong><br><a href="http://mockaroo.com/" target="_blank" rel="external">http://mockaroo.com/</a></p><p>취업은 react라는데 우짜노..?<br>GraphQL vs Restful?<br>페이스북의 graphQL, React.. 트렌드화</p><h1 id="What-I-will-do"><a href="#What-I-will-do" class="headerlink" title="What I will do"></a>What I will do</h1><ul><li>Pet register 마크업부터 시작 바인딩 고민</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-I-did&quot;&gt;&lt;a href=&quot;#What-I-did&quot; class=&quot;headerlink&quot; title=&quot;What I did&quot;&gt;&lt;/a&gt;What I did&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;펫프로젝트 와이어프레임 v3 완료&lt;/li&gt;
&lt;li&gt;팀프로젝
      
    
    </summary>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171127 Team project, 현업개발자 특강</title>
    <link href="https://SunnySunhwa.github.io/2017/11/27/TIL-171127/"/>
    <id>https://SunnySunhwa.github.io/2017/11/27/TIL-171127/</id>
    <published>2017-11-26T22:14:05.000Z</published>
    <updated>2018-07-10T11:07:10.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-I-did"><a href="#What-I-did" class="headerlink" title="What I did"></a>What I did</h1><ul><li>현업개발자 진유림님 특강</li><li>어떻게 개발공부를 했는지? 습관만들기의 중요성</li><li>팀프로젝트 기획 수정, 와이어프레임 수정</li></ul><hr><p>개인 공부, 프로젝트를 할 때에, commit을 할 기회는 사실 부족한게 당연.<br>그날 배운 것. 무엇을 했는지. 내일 할일은 무엇인지라도 간단하게 적어나간다면, 습관 만들기에 매우 도움이 된다! 오늘부터 적을 예정. 특히 코딩과 TIL의 에디터를 하나로 쓰면 불편한 감이 있는데 진유림님의 팁처럼 블로깅용 에디터를 별도로 두는것은 확실히 도움이 될듯! </p><h1 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h1><p><strong>Django</strong><br>Djangogirls tutorial 추천</p><h1 id="What-I-will-do"><a href="#What-I-will-do" class="headerlink" title="What I will do"></a>What I will do</h1><ul><li>블로그용 에디터 다운, 설정 (아톰?)</li><li>와이어프레임 완성</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-I-did&quot;&gt;&lt;a href=&quot;#What-I-did&quot; class=&quot;headerlink&quot; title=&quot;What I did&quot;&gt;&lt;/a&gt;What I did&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;현업개발자 진유림님 특강&lt;/li&gt;
&lt;li&gt;어떻게 개발공부를
      
    
    </summary>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171123 Angular Module, Routing</title>
    <link href="https://SunnySunhwa.github.io/2017/11/23/TIL-171123/"/>
    <id>https://SunnySunhwa.github.io/2017/11/23/TIL-171123/</id>
    <published>2017-11-22T22:06:09.000Z</published>
    <updated>2018-07-10T11:07:04.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="루트-모듈-컴포넌트-모듈-프로바이더-위치-차이는"><a href="#루트-모듈-컴포넌트-모듈-프로바이더-위치-차이는" class="headerlink" title="루트 모듈, 컴포넌트 모듈. 프로바이더 위치 차이는?"></a>루트 모듈, 컴포넌트 모듈. 프로바이더 위치 차이는?</h2><ol><li><p>루트 모듈에 프로바이더를 입력하면, 애플리케이션 전역<br>(인스턴스를 하나만 만들어서 모든 컴포넌트가 공유함)</p></li><li><p>컴포넌트에 프로바이더를 입력하면, 그 컴포넌트에서만 사용 가능</p></li></ol><ul><li>스마트 컴포넌트 &amp; 더미 컴포넌트</li><li>트리구조가 복잡해질때에, 데이터를 공유하는데에 번거로운 과정이 생김</li><li>이런 때에 서비스 프로바이더로 변경 추천 (반드시 싱글턴)</li><li>이 경우, 컴포넌트 들은 <em>viewing</em> 만 하는 역할</li></ul><p>싱글턴. 서비스의 인스턴스를 단 하나만 만든다는 것. 그래야만 같은 데이터를 공유할 수 있음 </p><ol><li>서비스의 프로바이더</li><li>컴포넌트의 프로바이더</li><li>둘다 쓰는것 (최악)</li></ol><hr><h2 id="모듈의-분리"><a href="#모듈의-분리" class="headerlink" title="모듈의 분리"></a>모듈의 분리</h2><p>모듈분리 명칭(공유, 핵심 등)에 현혹되지 말고, 기능에 따라 폴더구조를 만든다고 생각하고 이를 모듈화 시킨다고 생각하라  </p><h3 id="1-기능-모듈"><a href="#1-기능-모듈" class="headerlink" title="1. 기능 모듈"></a>1. 기능 모듈</h3><ul><li>관심사가 유사한 구성요소로 구성한 모듈</li><li>특정 화면을 구성하는 구성 요소</li></ul><h3 id="2-공유-모듈"><a href="#2-공유-모듈" class="headerlink" title="2. 공유 모듈"></a>2. 공유 모듈</h3><ul><li>애플리케이션 전역에서 사용될 구성 요소들로 구성한 모듈</li><li><strong>기능모듈에 의해 임포트 됨</strong></li><li>애플리케이션 전역에서 사용할 컴포넌트, 디렉티브, 파이프</li></ul><h3 id="3-핵심-모듈"><a href="#3-핵심-모듈" class="headerlink" title="3. 핵심 모듈"></a>3. 핵심 모듈</h3><ul><li>애플리케이션 전역에서 사용될 구성요소들로 구성한 모듈</li><li><strong>루트 모듈에 등록</strong> 하여 <strong>싱글턴</strong>으로 사용</li><li>애플리케이션 전역에서 사용하는 데이터 서비스, 인증서비스, 인증 가드 등</li></ul><hr><h3 id="루트-모듈과-기능모듈의-내용-차이"><a href="#루트-모듈과-기능모듈의-내용-차이" class="headerlink" title="루트 모듈과 기능모듈의 내용 차이"></a>루트 모듈과 기능모듈의 내용 차이</h3><p>####[루트 모듈]</p><ol><li>bootstrap으로 어떤 컴포넌트로 기동시킬 것인가</li><li>import BrowserModule 필수</li></ol><h4 id="기능-모듈"><a href="#기능-모듈" class="headerlink" title="[기능 모듈]"></a>[기능 모듈]</h4><ol><li>export로 어떤 컴포넌트를 먼저 표현할 것인가</li><li>import CommonModule 필수</li></ol><hr><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><ul><li>출발지에서 목적지까지의 경로를 결정하는 것. - 사용자가 어떤 화면에서 다른 화면으로 전환하는 내비게이션을 관리하기 위한 기능</li><li>A태그, 주소창, 히스토리</li></ul><h3 id="Ajax-단점"><a href="#Ajax-단점" class="headerlink" title="Ajax 단점"></a>Ajax 단점</h3><ol><li>화면마다 독립적인 URL을 갖고 있지 않음</li><li>히스토리 관리 안됨</li><li>SEO 이슈 발생</li></ol><h3 id="1-앵귤러-라우터"><a href="#1-앵귤러-라우터" class="headerlink" title="1. 앵귤러 라우터"></a>1. 앵귤러 라우터</h3><ul><li>사용자의 요청 URL패스와 컴포넌트를 쌍으로 구성하여 라우트를 설정</li><li>앵귤러는 이를 참조하여 뷰를 출력</li><li>‘**’ 는 else의 의미<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> routes: Routes = [</div><div class="line">  &#123; path: <span class="string">''</span>, component: HomeComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'service'</span>, component: ServiceComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'about'</span>, component: AboutComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'**'</span>, component: NotFoundComponent &#125;</div><div class="line">];</div></pre></td></tr></table></figure></li></ul><h3 id="2-해쉬-기반-내비게이션-정책"><a href="#2-해쉬-기반-내비게이션-정책" class="headerlink" title="2. 해쉬 기반 내비게이션 정책"></a>2. 해쉬 기반 내비게이션 정책</h3><p>url이 동일한 상태에서 해시뱅을 기반으로 서버에 새로운 요청없이, 즉 페이지 갱신 없이 anchor 기능을 사용하는 정책 (import 프로퍼티 수정 필요)<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// app.module.ts</span></div><div class="line">...</div><div class="line"><span class="keyword">const</span> routes: Routes = [</div><div class="line">  &#123; path: <span class="string">''</span>, component: HomeComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'service'</span>, component: ServiceComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'about'</span>, component: AboutComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'**'</span>, component: NotFoundComponent &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  imports: [</div><div class="line">    BrowserModule,</div><div class="line">    <span class="comment">// RouterModule.forRoot(routes)</span></div><div class="line">    RouterModule.forRoot(routes, &#123; useHash: <span class="literal">true</span> &#125;)</div><div class="line">...</div></pre></td></tr></table></figure></p><hr><h3 id="라우터-구성요소"><a href="#라우터-구성요소" class="headerlink" title="라우터 구성요소"></a>라우터 구성요소</h3><h4 id="1-라우트-구성"><a href="#1-라우트-구성" class="headerlink" title="1. 라우트 구성"></a>1. 라우트 구성</h4><ul><li>앱 모듈에 라우트 인터페이스를 사용하여 배열로 구성한 라우트 타입의 쌍을 선언</li><li>해당 데코레이터 위에 선언해야함</li></ul><h4 id="2-라우트-등록"><a href="#2-라우트-등록" class="headerlink" title="2. 라우트 등록"></a>2. 라우트 등록</h4><ul><li>루트모듈에 import { Routes, RouterModule } from ‘@angular/router’;</li><li>@NgModule데코레이터의 imports에 RouterModule.forRoot(선언한값을 인자로)</li><li>forRoot 메소드는 루트 모듈에 라우트 구성을 등록할 때 사용</li></ul><h4 id="3-뷰의-렌더링-위치-지정"><a href="#3-뷰의-렌더링-위치-지정" class="headerlink" title="3. 뷰의 렌더링 위치 지정"></a>3. 뷰의 렌더링 위치 지정</h4><ul><li>RouterOutlet</li><li>뷰를 표시할 영역인 <router-oulet>을 구현한 디렉티브로 컴포넌트의 뷰를 렌더링할 위치를 설정</router-oulet></li></ul><h4 id="4-내비게이션-작성"><a href="#4-내비게이션-작성" class="headerlink" title="4. 내비게이션 작성"></a>4. 내비게이션 작성</h4><ul><li>컴포넌트의 템플릿에 <a href="">대신 RouterLink 디렉티브 사용 (URL 패스 지정 가능)</a></li><li><p>RouterLinkeActive 디렉티브는 지정된 URL패스 트리에 포함되는 경우 지정된 클래스명을 DOM에 자동 추가</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;nav&gt;</div><div class="line">  &lt;a routerLink=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/a&gt;</span></div><div class="line"><span class="regexp">  &lt;a routerLink="/</span>service<span class="string">"&gt;Service&lt;/a&gt;</span></div><div class="line"><span class="string">  &lt;a routerLink="</span>/about<span class="string">"&gt;About&lt;/a&gt;</span></div><div class="line"><span class="string">&lt;/nav&gt;</span></div><div class="line"><span class="string">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span></div></pre></td></tr></table></figure></li><li><p>옵션을 지정해줘야 루트가 항상 활성화된것으로 인지하는 것을 막을 수 있음</p></li><li>즉, 자신이 원하는 해당 사항만 클래스를 갖게 됨<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/service"</span></span></div><div class="line"><span class="tag">  [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">"&#123; exact: true &#125;"</span></span></div><div class="line"><span class="tag">  <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>Service<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h4 id="5-navigate-메소드"><a href="#5-navigate-메소드" class="headerlink" title="5. navigate 메소드"></a>5. navigate 메소드</h4><ul><li>a태그 대신 프로그래밍 적으로 라우터를 일으킬때 사용</li><li>이벤트바인딩으로 함수를 묶어놓고 해당 함수에서 navigate  메소드를 사용하여 패스를 지정<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-root'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line"><span class="string">    &lt;button (click)="gotoTodos()"&gt;goto todos&lt;/button&gt;</span></div><div class="line"><span class="string">    &lt;router-outlet&gt;&lt;/router-outlet&gt;</span></div><div class="line"><span class="string">  `</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router</span>) &#123;&#125;</div><div class="line"></div><div class="line">  gotoTodos() &#123;</div><div class="line">    <span class="comment">// /todos로 이동</span></div><div class="line">    <span class="keyword">this</span>.router.navigate([<span class="string">'/todos'</span>]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="6-자식-라우트"><a href="#6-자식-라우트" class="headerlink" title="6. 자식 라우트"></a>6. 자식 라우트</h4><ul><li>라우트의 router-outlet은 기본적으로 루트 컴포넌트에 표시됨</li><li>자식이 또 자식(손자)을 갖고 있는 경우에, children이라는 키워드를 활용하여 루트 컴포넌트가 아닌 자식 컴포넌트에 표시 가능</li><li>childeren 설정이 키포인트!</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> routes: Routes = [</div><div class="line">  <span class="comment">/* ① */</span></div><div class="line">  &#123; path: <span class="string">''</span>, redirectTo: <span class="string">'/user'</span>,  pathMatch: <span class="string">'full'</span> &#125;,</div><div class="line">  <span class="comment">/* ② */</span></div><div class="line">  &#123;</div><div class="line">    path: <span class="string">'user'</span>,</div><div class="line">    component: UserComponent,</div><div class="line">    children: [</div><div class="line">      <span class="comment">/* UserComponent의 &lt;router-oultet&gt;에 표시 */</span></div><div class="line">      &#123; path: <span class="string">':id'</span>, component: UserDetailComponent &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h3 id="7-라우트-가드"><a href="#7-라우트-가드" class="headerlink" title="7. 라우트 가드"></a>7. 라우트 가드</h3><ul><li>라우터를 통하여 사용자의 접근을 제어하는 방법</li><li>CanActivate 인터페이스를 구현하여 가드 클래스를 정의</li><li>해당 인터페이스 클래스에 선언한 메소드는 접근 권한 체크 로직을 수행 -&gt; true/false 반환</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;루트-모듈-컴포넌트-모듈-프로바이더-위치-차이는&quot;&gt;&lt;a href=&quot;#루트-모듈-컴포넌트-모듈-프로바이더-위치-차이는&quot; class=&quot;headerlink&quot; title=&quot;루트 모듈, 컴포넌트 모듈. 프로바이더 위치 차이는?&quot;&gt;&lt;/a&gt;루트 모듈
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171121 Angular Form</title>
    <link href="https://SunnySunhwa.github.io/2017/11/21/TIL-171121/"/>
    <id>https://SunnySunhwa.github.io/2017/11/21/TIL-171121/</id>
    <published>2017-11-21T08:14:54.000Z</published>
    <updated>2018-07-10T11:06:47.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="폼이란"><a href="#폼이란" class="headerlink" title="폼이란?"></a>폼이란?</h2><p>유효성 검사<br>간단한 템플릿 기반 폼과 더 복잡한 유효성 검사를 위한 리액티브(모델 기반) 폼<br>입력받아야 할 폼이 많고 복잡해지면 도입을 검토하자.</p><h2 id="HTML-표준-폼"><a href="#HTML-표준-폼" class="headerlink" title="HTML 표준 폼"></a>HTML 표준 폼</h2><p>formvalidation과 정규표현식<br>쓸데없는 서버 요청을 막아 클라이언트로부터 서버를 보호해야 하는 프론트엔드 개발자.</p><h3 id="HTML-표준-form-submit"><a href="#HTML-표준-form-submit" class="headerlink" title="HTML 표준 form - submit"></a>HTML 표준 form - submit</h3><ul><li>서버에 전송. </li><li>페이지 전환(깜박거림).</li><li>form안의 요소들(그룹)이 하나라도 유효하지 않으면 전송할 수 없음</li></ul><h4 id="참고-태그-원리"><a href="#참고-태그-원리" class="headerlink" title="[참고] 태그 원리"></a>[참고] <form>태그 원리</form></h4><ul><li>form 요소(form 시작부터 끝까지)와 form 컨트롤요소(form 요소 안에 들어온 input과 같은 것들)</li><li>form 컨트롤이 form 요소 안에 들어와야 하는 이유는 자식요소로 담고 있어야 action과 method를 통해 </li><li>HTML form의 (action(명사Noun)) method(동사verb)로 GET과 POST 밖에 쓸 수 없는데, 요청 파라미터를 붙여 쓸 것인지 아니면 request body에 payload를 담아 쓸 것인지만을 구분해서 쓰라고 정해놨기 때문이다.</li><li><input type="“submit”">을 누르는 순간 따로 프로그래밍할 필요없이 알아서 서버로 데이터를 전송해준다. 그러나 이것은 화면전환을 필수적으로 요구한다.</li></ul><h3 id="앵귤러-form-control"><a href="#앵귤러-form-control" class="headerlink" title="앵귤러 -  form control"></a>앵귤러 -  form control</h3><ul><li>name 어트리뷰트가 데이터의 이름이 됨</li><li>ngModel을 써줘야 control이 만들어짐</li><li>각각의 input에 접근하기 위해서는 form 참조 변수를 사용</li><li>eg) userForm.value (참조변수:#userForm)</li><li>#name=”ngModel”: 유효성 검증 상태 추적이 가능</li></ul><h2 id="템플릿-기반-폼"><a href="#템플릿-기반-폼" class="headerlink" title="템플릿 기반 폼"></a>템플릿 기반 폼</h2><ul><li>컴포넌트 템플릿에서 디렉티브를 사용하여 폼을 구성하는 방식</li><li>필드의 형식, 유효성 검증 규칙을 모두 템플릿에서 정의</li><li>비교적 간단한 폼에 사용</li></ul><h3 id="템플릿-기반-폼의-중심-디렉티브"><a href="#템플릿-기반-폼의-중심-디렉티브" class="headerlink" title="템플릿 기반 폼의 중심 디렉티브"></a>템플릿 기반 폼의 중심 디렉티브</h3><p>####1. NgForm 디렉티브</p><ul><li>FormsModule을 적용하는 순간, 모든 폼 요소는 Ngform디렉티브가 자동 적용 -&gt; 템플릿 기반 폼이 됨</li><li>그 기반을 쓰지 않으려면 <form ngnoform=""></form> 이라고 써줘야 함</li><li>submit이벤트를 인터셉트하여 폼데이터를 서버 전송 (즉, ‘페이지전환’기본동작 막음)</li><li>이벤트 인터셉트하기위해 (ngSubmit) 이벤트 바인딩 사용 </li><li>템플릿 참조 변수에도 사용 가능, 참조변수에는 ngForm을 할당</li><li>해당 참조 변수는 폼요소 자신을 가리킴</li><li>유효성 검증을 하기 위해서 각각의 폼 컨트롤 요소에 ngModel 디렉티브를 선언해주어야 함.</li><li>NgForm을 통해 받는 프로퍼티 controls에는 각 폼 요소의 name 어트리뷰트에 기반한 자료를 받음</li><li>따라서 <strong>name 어트리뷰트를 빼먹으면 안됨</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--이벤트 인터셉트하기 위해 ngSubmit 이벤트 바인딩 사용 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">"onNgSubmit()"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 템플릿 참조변수에는 ngForm을 할당 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">f</span>=<span class="string">"ngForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"onNgSubmit(f)"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h4 id="2-NgModel-디렉티브"><a href="#2-NgModel-디렉티브" class="headerlink" title="2. NgModel 디렉티브"></a>2. NgModel 디렉티브</h4><ul><li>폼 컨트롤 요소를 위해 사용</li><li>자신이 적용된 폼 컨트롤 요소에 FormControl 인스턴스 생성</li><li>양방향 데이터 바인딩과 달리, 괄호와 할당문 없이 선언<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">userForm</span>=<span class="string">"ngForm"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userid"</span> <span class="attr">ngModel</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><strong>FormControl 인스턴스란?</strong></p><ul><li>폼을 구성하는 기본 단위</li><li>폼 컨트롤 요소의 값이나 유효성 검증 상태를 추적</li><li>뷰와 폼 모델을 동기화된 상태로 유지</li></ul><h3 id="템플릿-기반-폼-유효성-검증-AbstractControl클래스"><a href="#템플릿-기반-폼-유효성-검증-AbstractControl클래스" class="headerlink" title="템플릿 기반 폼 유효성 검증 - AbstractControl클래스"></a>템플릿 기반 폼 유효성 검증 - AbstractControl클래스</h3><ul><li>유효성 검증의 상태를 나타내는 프로퍼티를 가지고 있음</li><li>errors, invalid, valid, pristine, undouched, dirty 등</li><li>untouched: fousin -&gt; focusout되면 false</li><li>pristine: 값이 한번이라도 입력된 상태 false</li><li>*ngIf를 사용해서 에러메시지를 출력하는게 좋음 -&gt; 조건에 부합하면 DOM에서 사라지기 때문</li><li>에러메시지는 값을 입력하고 focusout됐을 때 출력되야 함.</li><li>errors =&gt; invalid: true, untouched: false</li></ul><h2 id="리액티브-폼"><a href="#리액티브-폼" class="headerlink" title="리액티브 폼"></a>리액티브 폼</h2><ul><li>컴포넌트 기반으로 폼모델을 구성</li><li>템플릿 기반에 비해, 폼모델이 복잡할 경우 사용 (form이 15개 이상이거나 많은 검증이 필요할때)</li><li>formControlName이 템플릿기반 폼에서의 ‘name’역할을 함</li><li>입력받으면서 이전 데이터들을 포함해서 계속해서 기다리며 관리</li><li>form* 접두사가 붙은 디렉티브(formGroup, formGroupName, formControlName, formArrayName)이 핵심</li></ul><p><strong><div formgroupname="passwordGroup">에서 프로퍼티 바인딩이 쓰이지 않은 이유?</div></strong><br>순수한 문자열을 프로퍼티 바인딩할 때에는 프로퍼티 바인딩을 하지 않고 바로 어트리뷰트=“문자열”로 표현할 수 있다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;폼이란&quot;&gt;&lt;a href=&quot;#폼이란&quot; class=&quot;headerlink&quot; title=&quot;폼이란?&quot;&gt;&lt;/a&gt;폼이란?&lt;/h2&gt;&lt;p&gt;유효성 검사&lt;br&gt;간단한 템플릿 기반 폼과 더 복잡한 유효성 검사를 위한 리액티브(모델 기반) 폼&lt;br&gt;입력받아야 
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171120 Angular Service</title>
    <link href="https://SunnySunhwa.github.io/2017/11/20/TIL-171120/"/>
    <id>https://SunnySunhwa.github.io/2017/11/20/TIL-171120/</id>
    <published>2017-11-19T21:47:29.000Z</published>
    <updated>2018-07-10T11:06:32.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><ul><li>Service는 Component와 Service를 사용할 수 있음</li><li>서비스는 의존성 주입이 가능한 클래스로 작성함</li><li>서비스를 사용한다는 이야기는 서비스 클래스가 생성한 인스턴스를 사용한다는 것 </li></ul><h1 id="의존성-주입"><a href="#의존성-주입" class="headerlink" title="의존성 주입"></a>의존성 주입</h1><ul><li>구성 요소 간의 의존관계가 코드 내부가 아닌 외부의 설정파일 등을 통해 정의하는 패턴</li><li>구성 요소 간 결합도를 낮추고 재사용성을 높임</li></ul><h2 id="Injectable-데코레이터"><a href="#Injectable-데코레이터" class="headerlink" title="@Injectable 데코레이터"></a>@Injectable 데코레이터</h2><ul><li>자신의 아래에 정의된 클래스가 주입가능한 클래스임을 나타냄</li><li>순수한 자바스크립트 클래스가 다른 자바스크립트 클래스 내에 주입 가능한 상태가 되었음을 의미</li></ul><h3 id="왜-new를-사용한-의존성-주입은-비추천-되는가"><a href="#왜-new를-사용한-의존성-주입은-비추천-되는가" class="headerlink" title="왜 new를 사용한 의존성 주입은 비추천 되는가?"></a>왜 new를 사용한 의존성 주입은 비추천 되는가?</h3><p>컴포넌트 내에서 constructor내부에 new를 사용하여 의존성을 주입한다면, 컴포넌트가 사용하는 서비스(의존성)가 구현하는 내용의 변경이 요구됐을때에</p><ul><li>긴밀한 결합관계로 인한 손수 코드 수정이 불가피</li><li>즉, 컴포넌트 내 변경해줘야 할 사항이 많음을 의미</li><li>new를 사용한 주입방법은 해당 서비스의 인스턴스 생성방법을 알고 있어야만 사용 가능</li></ul><h3 id="해결방안"><a href="#해결방안" class="headerlink" title="해결방안"></a>해결방안</h3><p><strong>의존성 주입</strong>  </p><ul><li>컴포넌트가 사용하는 서비스(의존성)의 인스턴스를 컴포넌트에서 new로 생성하는 것이 아니라,<br>서비스에서 생성하여 그것을 컴포넌트에 주입하여 사용</li><li>제어권의 역전</li><li><p>다만, 필요한 의존성의 인스턴스를 어떻게 생성하는지 앵귤러에게 알려주기 위해 providers 프로퍼티 작성</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">providers: [&#123;</div><div class="line">  <span class="comment">// 의존성으로 주입될 객체의 타입(토큰, Token)</span></div><div class="line">  provide: GreetingService,</div><div class="line">  <span class="comment">// 의존성으로 주입될 객체의 인스턴스를 생성할 클래스</span></div><div class="line">  useClass: GreetingService</div><div class="line">&#125;]</div></pre></td></tr></table></figure></li><li><p>providers에는 constructor 에 매개변수로 선언한 서비스의 인스턴스가, 사용한 클래스 명을 적어줌.</p></li><li>즉, 해당 컴포넌트의 constructor 매개변수(생성될 인스턴스)의 타입은, providers에 적어준 클래스를 사용해서 만드는 것이라 <strong>알려주는 것</strong></li><li>constructor 내에 private을 써주지 않으면, 멤버변수화가 되지 않아 컨스트럭터 내부에서만 사용할 수 있으므로 써주어야함 (타입스크립트)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 의존성 주입</span></div><div class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> greetingService: GreetingService</span>) &#123;&#125;</div></pre></td></tr></table></figure><h4 id="Injector"><a href="#Injector" class="headerlink" title="Injector"></a>Injector</h4><ul><li>컴포넌트가 생성될때 앵귤러가 컴포넌트에 필요한 인스턴스를 인젝터에 요청</li><li>이미 생성한 인스턴스를 담고 있는 컨테이너 관리자</li><li>요청된 인스턴스가 존재하지 않으면 새로 생성하고 컨테이너에 추가</li><li>요청된 인스턴스를 컴포넌트 생성자의 인자로 주입</li><li>인젝터는 컴포넌트별로 하나씩 가지고 있음</li></ul><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><ul><li>모듈에 프로바이더를 설정한 경우, 컴포넌트에 프로바이더를 또 설정하면 X  </li><li>-&gt; 싱글턴이 유지되지 않음 (서비스가 두개 생성됨)</li><li>모듈레벨 등록한 프로바이더: 하나의 인스턴스 공유</li><li>컴포넌트레벨 등록한 프로바이더: 컴포넌트가 생성될때마다 새로운 인스턴스 취득</li></ul><hr><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><ul><li>module에 import해주어야함</li><li>첫번째 콜백에는 성공했을때,</li><li>두번째 콜백에는 실패했을때 로직을 써준다<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; HttpClientModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</div><div class="line">@NgModule(&#123;</div><div class="line">  declarations: [AppComponent],</div><div class="line">  imports: [</div><div class="line">    BrowserModule,</div><div class="line">    <span class="comment">// HttpClientModule을 임포트한다.</span></div><div class="line">    HttpClientModule</div><div class="line">  ],</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Service&quot;&gt;&lt;a href=&quot;#Service&quot; class=&quot;headerlink&quot; title=&quot;Service&quot;&gt;&lt;/a&gt;Service&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Service는 Component와 Service를 사용할 수 있음&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/TIL/"/>
    
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>TIL_171114 Angular Directive, Pipe, Lifecycle Hook</title>
    <link href="https://SunnySunhwa.github.io/2017/11/14/TIL-171114/"/>
    <id>https://SunnySunhwa.github.io/2017/11/14/TIL-171114/</id>
    <published>2017-11-13T21:31:23.000Z</published>
    <updated>2018-07-10T11:06:18.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Directive"><a href="#Directive" class="headerlink" title="Directive"></a>Directive</h1><ul><li>애플리케이션 전역에서 사용할 수 있는 공통관심사를 컴포넌트에서 분리하여 구현한 것  </li><li>DOM의 모든 것(모양, 동작, 스타일)을 관리하기 위한 지시(명령)  </li><li>컴포넌트도 큰 관점에서 바라보면 디렉티브</li></ul><p><strong>그렇다면 컴포넌트와 디렉티브의 차이점은?</strong><br>컴포넌트는 디렉티브와 달리, 반드시 뷰를 가져야함 -&gt; 뷰를 생성하는데에 목적을 둠</p><h4 id="1-컴포넌트-디렉티브-Component-Directives"><a href="#1-컴포넌트-디렉티브-Component-Directives" class="headerlink" title="1. 컴포넌트 디렉티브 (Component Directives)"></a>1. 컴포넌트 디렉티브 (Component Directives)</h4><ul><li>컴포넌트의 템플릿을 표시하기 위한 디렉티브</li><li>@component 데코레이터의 메타데이터 객체의 seletor 프로퍼티에서 임의의 디렉티브의 이름을 정의</li></ul><h4 id="2-어트리뷰트-디렉티브-Attribute-Directives"><a href="#2-어트리뷰트-디렉티브-Attribute-Directives" class="headerlink" title="2. 어트리뷰트 디렉티브 (Attribute Directives)"></a>2. 어트리뷰트 디렉티브 (Attribute Directives)</h4><ul><li>어트리뷰트 디렉티브는 HTML 요소의 어트리뷰트로 사용하여 해당 요소의 모양이나 동작을 제어</li><li>ngClass, ngStyle</li></ul><h4 id="3-구조-디렉티브-Structural-Directives"><a href="#3-구조-디렉티브-Structural-Directives" class="headerlink" title="3. 구조 디렉티브 (Structural Directives)"></a>3. 구조 디렉티브 (Structural Directives)</h4><ul><li>구조 디렉티브는 DOM 요소를 반복 생성(ngFor)</li><li>조건에 의한 추가 또는 제거(ngIf, ngSwitch)</li><li>DOM 레이아웃(layout)을 변경하는 디렉티브</li></ul><h4 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h4><ol><li>네이티브 돔에 접근하는 방법은 해킹의 위험이 있기 때문에 부적절<br>-&gt; Renderer2객체를 활용</li><li>앵귤러 구조디렉티브는 하나의 요소에 하나의 구조디렉티브만 가질수 있음<br>-&gt; 두개를 쓰고 싶다면 ng-container를 활용</li></ol><hr><h2 id="파이프"><a href="#파이프" class="headerlink" title="파이프"></a>파이프</h2><ul><li>템플릿 내에서 원하는 형식으로 값을 변환하여 표시</li><li>파이프를 통한 형식변경은 원본은 변경X</li><li>커스텀 파이프의 활용<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reverse.pipe.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line">@Pipe(&#123;</div><div class="line">  name: <span class="string">'reverse'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ReversePipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</div><div class="line">  transform(value = <span class="string">''</span>): string &#123;</div><div class="line">    <span class="keyword">return</span> value.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// app.component.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  selector: <span class="string">'app-root'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line"><span class="string">    &lt;input type="text" [(ngModel)]="value"&gt;</span></div><div class="line"><span class="string">    &lt;p&gt;&#123;&#123; value | reverse &#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="string">  `</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">  value: string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><h3 id="앵귤러의-변화감지"><a href="#앵귤러의-변화감지" class="headerlink" title="앵귤러의 변화감지"></a>앵귤러의 변화감지</h3><p><strong>변화감지의 대상: 바인딩 되어있는 데이터</strong><br>앵귤러는 필터가 걸려있는 변화감지 대상은 주소값이 변해야 변화감지를 한다!</p><p><strong>데이터 변화감지를 못할 경우 해결방안</strong></p><ol><li><p>주소값이 변하지 않는 push의 사용보다 주소값을 변하게 하는 concat을 활용</p></li><li><p>순수파이프를 활용하여 pipe데코레이터에 pure: false를 지정</p></li></ol><ul><li>감시하는 정도를 세밀하게 하여 변화감지 -&gt; 성능 저하 우려</li></ul><p>즉, 객체를 변경할때 주소값을 변경하도록 코딩한다! (push, forEach 금지)</p><hr><h1 id="Lifecycle-Hook"><a href="#Lifecycle-Hook" class="headerlink" title="Lifecycle Hook"></a>Lifecycle Hook</h1><h3 id="1-Constructor"><a href="#1-Constructor" class="headerlink" title="1. Constructor"></a>1. Constructor</h3><ul><li>객체를 생성하는 기능을 담당</li><li>따라서 의존성 주입 외에는 사용 X</li></ul><h3 id="2-ngOnChanges"><a href="#2-ngOnChanges" class="headerlink" title="2. ngOnChanges"></a>2. ngOnChanges</h3><ul><li>입력프로퍼티(@Input)가 들어왔을때</li><li>입력프로퍼티에 변화감지가 됐을때 (주소가 변경됐을때만)</li><li>드문 사용</li></ul><h3 id="3-ngOnInit"><a href="#3-ngOnInit" class="headerlink" title="3. ngOnInit*"></a>3. ngOnInit*</h3><ul><li>모든 프로퍼티, 입력프로퍼티의 초기화가 완료된 시점에 한번만 호출</li><li>대부분의할당을 시작하는 지점</li><li>즉, <strong>프로퍼티의 할당 또는 참조를 해야한다면 ngOnInit에</strong></li></ul><h3 id="4-ngDoCheck"><a href="#4-ngDoCheck" class="headerlink" title="4. ngDoCheck"></a>4. ngDoCheck</h3><ul><li>변화감지에 의해 감지되지 않거나 감지할 수 없는 사항을 더티체크하기 위해 사용 -&gt; 시스템 과부하 우려</li><li>즉, 의도적으로 데이터의 변경은 주소값이 변경되도록 코딩하는 것!!</li><li>ngDoCheck는 사용을 피하라</li></ul><h3 id="5-ngOnDestroy"><a href="#5-ngOnDestroy" class="headerlink" title="5. ngOnDestroy*"></a>5. ngOnDestroy*</h3><ul><li>Rxjs의 연결을 끊어줄때 (컴포넌트의 사망 시기)</li></ul><hr><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><p>이론으로는 아는것같은데 막상 코딩이 헷갈린다 특히나 앵귤러 부분에 넘어와서<br>어느부분에 어떻게 분리하고 하는게 더욱 헷갈리는듯. 목요일 실습전까지 코딩연습을<br>주로 하면서 복습해야겠다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Directive&quot;&gt;&lt;a href=&quot;#Directive&quot; class=&quot;headerlink&quot; title=&quot;Directive&quot;&gt;&lt;/a&gt;Directive&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;애플리케이션 전역에서 사용할 수 있는 공통관심사를 컴포넌트에서 분
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/TIL/"/>
    
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>TIL_171113 Angular interaction</title>
    <link href="https://SunnySunhwa.github.io/2017/11/13/TIL-171113/"/>
    <id>https://SunnySunhwa.github.io/2017/11/13/TIL-171113/</id>
    <published>2017-11-12T21:44:06.000Z</published>
    <updated>2018-07-10T11:05:59.346Z</updated>
    
    <content type="html"><![CDATA[<p><strong>컴포넌트 대상화</strong><br>재사용의 가능성이 있는 부분이라면(기능) 컴포넌트화해서 분리</p><h2 id="컴포넌트간-상태공유"><a href="#컴포넌트간-상태공유" class="headerlink" title="컴포넌트간 상태공유"></a>컴포넌트간 상태공유</h2><h3 id="1-부모-gt-자식-프로퍼티-바인딩-Input"><a href="#1-부모-gt-자식-프로퍼티-바인딩-Input" class="headerlink" title="1. 부모 -&gt; 자식: 프로퍼티 바인딩, @Input"></a>1. 부모 -&gt; 자식: 프로퍼티 바인딩, @Input</h3><h4 id="1-1-부모-–-gt-보낼때"><a href="#1-1-부모-–-gt-보낼때" class="headerlink" title="1-1) 부모 –&gt; 보낼때"></a>1-1) 부모 –&gt; 보낼때</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;child [state]=<span class="string">"myState"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div></pre></td></tr></table></figure><h4 id="1-2-–-gt-자식-받을때"><a href="#1-2-–-gt-자식-받을때" class="headerlink" title="1-2) –&gt; 자식 받을때"></a>1-2) –&gt; 자식 받을때</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@Input() state: string</div></pre></td></tr></table></figure><ul><li>즉, [property-binding] state | myState<br>-&gt; ‘state’라는 하나의 매개체만을 가지고 느슨한 결합상태를 유지</li></ul><h4 id="Setter"><a href="#Setter" class="headerlink" title="Setter"></a>Setter</h4><p>users에 값을 할당하는 순간 (부모-&gt; 자식에게 데이터전송하는 순간), users 내부에 설정한 함수(로직)이 실행<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 자식 컴포넌트</span></div><div class="line">@Input()</div><div class="line">  set users(users: User[]) &#123;</div><div class="line">    <span class="keyword">if</span> (!users) &#123; <span class="keyword">return</span>; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.cntAdmin</div><div class="line">      = users.filter(<span class="function">(<span class="params">&#123;role&#125;</span>) =&gt;</span> role === <span class="string">'Administrator'</span>).length;</div><div class="line">    <span class="keyword">this</span>.cntDeveloper</div><div class="line">      = users.filter(<span class="function">(<span class="params">&#123;role&#125;</span>) =&gt;</span> role === <span class="string">'Developer'</span>).length;</div><div class="line">    <span class="keyword">this</span>.cntDesigner</div><div class="line">      = users.filter(<span class="function">(<span class="params">&#123;role&#125;</span>) =&gt;</span> role === <span class="string">'Designer'</span>).length;</div><div class="line">    <span class="keyword">this</span>._users = users;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get users(): User[] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._users;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><hr><h3 id="2-자식-gt-부모-이벤트-바인딩-Output"><a href="#2-자식-gt-부모-이벤트-바인딩-Output" class="headerlink" title="2. 자식 -&gt; 부모: 이벤트 바인딩, @Output"></a>2. 자식 -&gt; 부모: 이벤트 바인딩, @Output</h3><h4 id="2-1-자식-–-gt-보낼때"><a href="#2-1-자식-–-gt-보낼때" class="headerlink" title="2-1) 자식 –&gt; 보낼때"></a>2-1) 자식 –&gt; 보낼때</h4><ul><li>앵귤러가 지원하는 EventEmitter을 통해 커스텀한 이벤트를 생성</li><li>-&gt; 부모에게 데이터를 전달하는 역할</li><li>event명.emit을 통해 해당 이벤트 호출</li><li>-&gt; 전달할 데이터를 인자에 담아 보냄</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onClick(state)"</span>&gt;</span> X <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EventEmitter를 통해 커스텀 이벤트 생성: 데이터를 전달하는 역할</span></div><div class="line"></div><div class="line">@Output() myEvent = <span class="keyword">new</span> EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 생성한 커스텀 이벤트 호출: 전달할 데이터를 인자에 담아 보냄--&gt;</span></div><div class="line">onClick(state)&#123; ##do something## this.myEvent.emit(state);&#125;</div></pre></td></tr></table></figure><h4 id="2-2-–-gt-부모-받을때"><a href="#2-2-–-gt-부모-받을때" class="headerlink" title="2-2) –&gt; 부모 받을때"></a>2-2) –&gt; 부모 받을때</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;child (myEvent)=<span class="string">"myEventHandler($event)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 부모는 커스텀 이벤트 (state) 바인딩을 받음</span></div><div class="line">myEventHandler(state)&#123; ##do something## &#125;</div></pre></td></tr></table></figure><p><strong>자식 컴포넌트가 자신이 삭제하지 않고, 삭제하라고 부모에게 알리는 이유?</strong><br>같은 참조값(주소)을 바라보고 있기 떄문에, 그 값을 변경하는 비순수함수의 역할을 부모, 자식 둘다 하게 할 경우 데이터의 변경이 어디서 이루어졌는지 알수가 없음  </p><ul><li>-&gt; 부모자식관계의 깊이가 깊을 경우 데이터변경을 추적할 수 없어 코드의 예측성과 협업능력 저하</li><li>즉, 컴포넌트를 Stateful / Stateless 로 역할분리하여 관리</li><li>Stateful: 상태 정보를 저장, 변경가능 (비순수, Smart)</li><li>Stateless: 정보를 표현만 (순수, Dumb)</li></ul><p>특히, 데이터변경은 앵귤러의 변화감지가 일어나도록 해야 뷰에 표현되기 때문에 참조값(주소)을 변경하도록 하는것이 예측하기 좋음<br>(push와 같은 경우는 주소가 변경되지 않아 비추)</p><hr><p><strong>constructor 내부에 public 을 해준 이유는?</strong><br>내부의 id, name, role은 public없이는 파라미터여서 생명주기가 constructor내부로 한정. 따라서 이 앞에 public을 붙여줌으로써 위에 멤버변수 선언을 한것과 동일한 효과를 줌</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(public id: number, public name: string, public role: string) &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="쉐도우-DOM-스타일-셀렉터"><a href="#쉐도우-DOM-스타일-셀렉터" class="headerlink" title="쉐도우 DOM 스타일 셀렉터"></a>쉐도우 DOM 스타일 셀렉터</h2><h3 id="1-host"><a href="#1-host" class="headerlink" title="1. :host"></a>1. :host</h3><ul><li>호스트 요소(컴포넌트 자신)을 선택</li><li>커스텀 생성한 태그(<app-list>)는 기본 html과 같이 inline, block과 같은 브라우저 기본 특징이 없음 -&gt; height, width 초기값이 auto </app-list></li><li>이럴 때에  :host를 통해 css { display: block } 설정 가능</li><li>상태들에 대한 가상클래스 선언 가능 :host(:hover), :host(.active) <h3 id="2-host-context"><a href="#2-host-context" class="headerlink" title="2. :host-context"></a>2. :host-context</h3><ul><li>호스트 요소의 외부(예를 들어 body)의 조건에 의해 컴포넌트의 요소를 선택<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/* 컴포넌트의 조상 요소에 theme-red 클래스가 선언되어 있을 때 적용된다. */</span></div><div class="line"><span class="selector-pseudo">:host-context(.theme-red)</span> <span class="selector-class">.btn-primary</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">background-color</span>: crimson;</div><div class="line">  <span class="attribute">border-color</span>: crimson;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;컴포넌트 대상화&lt;/strong&gt;&lt;br&gt;재사용의 가능성이 있는 부분이라면(기능) 컴포넌트화해서 분리&lt;/p&gt;
&lt;h2 id=&quot;컴포넌트간-상태공유&quot;&gt;&lt;a href=&quot;#컴포넌트간-상태공유&quot; class=&quot;headerlink&quot; title=&quot;컴포
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/TIL/"/>
    
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>TIL_171112 Todos practice</title>
    <link href="https://SunnySunhwa.github.io/2017/11/12/TIL-171112/"/>
    <id>https://SunnySunhwa.github.io/2017/11/12/TIL-171112/</id>
    <published>2017-11-12T10:09:15.000Z</published>
    <updated>2018-07-10T11:05:38.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Todos-Practice"><a href="#Todos-Practice" class="headerlink" title="Todos Practice"></a>Todos Practice</h1><h2 id="v2-without-server"><a href="#v2-without-server" class="headerlink" title="v2 - without server"></a>v2 - without server</h2><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todos V2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-offset-2"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>Todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input-todo"</span> <span class="attr">class</span>=<span class="string">"form-control input-lg"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">autofocus</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-xs nav-pills"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"all"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"active"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"completed"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"todo-list"</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!-- &lt;li class="list-group-item"&gt;</span></div><div class="line"><span class="comment">            &lt;div class="hover-anchor"&gt;</span></div><div class="line"><span class="comment">              &lt;a class="hover-action text-muted"&gt;</span></div><div class="line"><span class="comment">                &lt;span class="glyphicon glyphicon-remove-circle pull-right" data-id="1"&gt;&lt;/span&gt;</span></div><div class="line"><span class="comment">              &lt;/a&gt;</span></div><div class="line"><span class="comment">              &lt;label class="i-checks" for="1"&gt;</span></div><div class="line"><span class="comment">                &lt;input type="checkbox" id="1" checked&gt;&lt;i&gt;&lt;/i&gt;</span></div><div class="line"><span class="comment">                &lt;span&gt;Angular&lt;/span&gt;</span></div><div class="line"><span class="comment">              &lt;/label&gt;</span></div><div class="line"><span class="comment">            &lt;/div&gt;</span></div><div class="line"><span class="comment">          &lt;/li&gt; --&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"i-checks"</span> <span class="attr">style</span>=<span class="string">"padding-left: 20px"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"chk-allComplete"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 text-right"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-removeCompletedTodos"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-xs"</span>&gt;</span>Clear completed (</div><div class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"completedTodos"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">"leftTodos"</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span> items left</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> todos;</div><div class="line">    <span class="keyword">let</span> status = <span class="string">'all'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> inputTodo = <span class="built_in">document</span>.getElementById(<span class="string">'input-todo'</span>);</div><div class="line">    <span class="keyword">const</span> todoList = <span class="built_in">document</span>.getElementById(<span class="string">'todo-list'</span>);</div><div class="line">  <span class="keyword">const</span> completedTodos = <span class="built_in">document</span>.getElementById(<span class="string">'completedTodos'</span>);</div><div class="line">  <span class="keyword">const</span> leftTodos = <span class="built_in">document</span>.getElementById(<span class="string">'leftTodos'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> filterByStatus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//사용하는 값은 todo의 completed밖에 없기 때문에 distructuring</span></div><div class="line"> <span class="keyword">return</span> todos.filter(<span class="function">(<span class="params"> &#123; completed &#125; </span>) =&gt;</span> &#123;</div><div class="line"> <span class="keyword">switch</span> (status)&#123;</div><div class="line"> <span class="keyword">case</span> <span class="string">'active'</span> : <span class="keyword">return</span> !completed</div><div class="line"> <span class="keyword">case</span> <span class="string">'completed'</span> : <span class="keyword">return</span> completed;</div><div class="line"> <span class="comment">//all일 경우 모든 todos를 그대로 반환해야함-&gt; filter를 거치기 위해 true로</span></div><div class="line"> <span class="keyword">default</span> : <span class="keyword">return</span> <span class="literal">true</span>; </div><div class="line"> &#125;</div><div class="line"> &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> countCompletedTodos = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function">(<span class="params">todos.filter(( &#123;completed&#125; </span>) =&gt;</span> completed)).length;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> countLeftTodos = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function">(<span class="params">todos.filter(( &#123;completed&#125; </span>) =&gt;</span> !completed)).length;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> html = <span class="string">''</span>;</div><div class="line"><span class="keyword">const</span> _todos = filterByStatus();</div><div class="line">        _todos.forEach((&#123;id, content, completed</div><div class="line">        &#125;) =&gt; &#123;</div><div class="line">            <span class="keyword">const</span> checked = completed ? <span class="string">' checked'</span> : <span class="string">''</span>;</div><div class="line"></div><div class="line">            html += <span class="string">`&lt;li class="list-group-item"&gt; </span></div><div class="line"><span class="string">        &lt;div class="hover-anchor"&gt;</span></div><div class="line"><span class="string">          &lt;a class="hover-action text-muted"&gt;</span></div><div class="line"><span class="string">            &lt;span class="glyphicon glyphicon-remove-circle pull-right" data-id="<span class="subst">$&#123;id&#125;</span>"&gt;&lt;/span&gt;</span></div><div class="line"><span class="string">          &lt;/a&gt;</span></div><div class="line"><span class="string">          &lt;label class="i-checks" for="<span class="subst">$&#123;id&#125;</span>"&gt;</span></div><div class="line"><span class="string">            &lt;input type="checkbox" id="<span class="subst">$&#123;id&#125;</span>"<span class="subst">$&#123;checked&#125;</span>&gt;&lt;i&gt;&lt;/i&gt;</span></div><div class="line"><span class="string">            &lt;span&gt;<span class="subst">$&#123;content&#125;</span>&lt;/span&gt;</span></div><div class="line"><span class="string">          &lt;/label&gt;</span></div><div class="line"><span class="string">        &lt;/div&gt;</span></div><div class="line"><span class="string">      &lt;/li &gt;`</span>;</div><div class="line">        &#125;);</div><div class="line">completedTodos.innerHTML = countCompletedTodos();</div><div class="line">leftTodos.innerHTML = countLeftTodos();</div><div class="line">    todoList.innerHTML = html;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> getTodos = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">todos = [</div><div class="line">&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">'HTML'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;, </div><div class="line">&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">'CSS'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</div><div class="line">&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">'JavaScript'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;];</div><div class="line"></div><div class="line">        render();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'[GET]\n'</span>, todos);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">const</span> lastTodoId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> todos ? <span class="built_in">Math</span>.max(...todos.map(<span class="function">(<span class="params">&#123;id &#125;</span>) =&gt;</span> id)) + <span class="number">1</span> : <span class="number">1</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> addTodo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> content = inputTodo.value;</div><div class="line">        inputTodo.value = <span class="string">''</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!todos || todos.length === <span class="number">0</span>) &#123;</div><div class="line">            todos = [&#123; <span class="attr">id</span>: <span class="number">1</span>, content, <span class="attr">completed</span>: <span class="literal">false</span> &#125;];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            todos = [&#123;<span class="attr">id</span>: lastTodoId(), content, <span class="attr">completed</span>: <span class="literal">false</span>&#125;].concat(todos);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        render();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'[ADD]\n'</span>, todos);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> toggleTodoComplete = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">        todos = todos.map(<span class="function"><span class="params">todo</span> =&gt;</span> (</div><div class="line">            todo.id === (+id) ? <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</div><div class="line">                completed: !todo.completed</div><div class="line">            &#125;) : todo</div><div class="line">        ));</div><div class="line">        render();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'[TOGGLE-COMP]\n'</span>, todos);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> toggleTodoAllComplete = <span class="function"><span class="keyword">function</span> (<span class="params">checked</span>) </span>&#123;</div><div class="line">todos = todos.map(<span class="function">(<span class="params">&#123; id, content &#125;</span>) =&gt;</span> (&#123; id, content, <span class="attr">completed</span>: checked &#125;));</div><div class="line">render();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'[TOGGLE-A-COMP]\n'</span>, todos);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">const</span> removeTodo = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">        todos = todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id !== (+id));</div><div class="line">        render();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'[REMOVE]\n'</span>, todos);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">const</span> removeCompletedTodo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// filter의 리턴값을 true로 해주기위해 !completed</span></div><div class="line">      <span class="comment">// completed만 쓸것이고, completed를 덮어쓰지 않을 것이기 때문에 distructuring 가능</span></div><div class="line">      todos = todos.filter(<span class="function">(<span class="params"> &#123; completed &#125; </span>) =&gt;</span> !completed );</div><div class="line">      render();</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'[RM-COMP]\n'</span>, todos);</div><div class="line">      &#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    inputTodo.addEventListener(<span class="string">'keyup'</span>, (e) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (e.keyCode !== <span class="number">13</span> || inputTodo.value.trim() === <span class="string">''</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        addTodo();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</div><div class="line">        getTodos();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    todoList.addEventListener(<span class="string">'change'</span>, (e) =&gt; &#123;</div><div class="line">        toggleTodoComplete(e.target.id);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    todoList.addEventListener(<span class="string">'click'</span>, (&#123; target &#125;) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (!target || target.nodeName !== <span class="string">'SPAN'</span> || target.parentNode.nodeName === <span class="string">'LABEL'</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        removeTodo(target.dataset.id);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//childNode는 엔터까지 노드로 치는 반면에, children은 element요소만</span></div><div class="line">    <span class="comment">// 탭 전체에서 active클래스 빼기</span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.nav'</span>).addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span>(!e.target || e.target.nodeName  !== <span class="string">'A'</span>) <span class="keyword">return</span>; <span class="comment">//방어코드</span></div><div class="line">        <span class="keyword">const</span> lis = e.currentTarget.children;</div><div class="line">        [...lis].forEach(<span class="function">(<span class="params">el</span>)=&gt;</span>&#123;el.classList.remove(<span class="string">'active'</span>)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 선택한 탭에만 active클래스 추가</span></div><div class="line">    <span class="keyword">const</span> targetLi = e.target.parentNode;</div><div class="line">    targetLi.classList.add(<span class="string">'active'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 선택한 탭의 id값 가져오기</span></div><div class="line">    status = targetLi.id;</div><div class="line"><span class="comment">//console.log(status);</span></div><div class="line"></div><div class="line">render();</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'chk-allComplete'</span>).addEventListener(<span class="string">'change'</span>, (e) =&gt; &#123;</div><div class="line">toggleTodoAllComplete(e.target.checked);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn-removeCompletedTodos'</span>).addEventListener(<span class="string">'click'</span>, removeCompletedTodo);</div><div class="line">&#125;());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Todos-Practice&quot;&gt;&lt;a href=&quot;#Todos-Practice&quot; class=&quot;headerlink&quot; title=&quot;Todos Practice&quot;&gt;&lt;/a&gt;Todos Practice&lt;/h1&gt;&lt;h2 id=&quot;v2-without-server
      
    
    </summary>
    
      <category term="prac" scheme="https://SunnySunhwa.github.io/categories/prac/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/prac/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/prac/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>Development-enviorment setting</title>
    <link href="https://SunnySunhwa.github.io/2017/11/09/development-enviorment/"/>
    <id>https://SunnySunhwa.github.io/2017/11/09/development-enviorment/</id>
    <published>2017-11-09T01:53:33.000Z</published>
    <updated>2018-07-10T10:58:07.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ npm init --y</div><div class="line">$ npm install -save-dev eslint</div><div class="line">$ ./node_modules/.bin/eslint --init</div><div class="line"></div><div class="line"></div><div class="line">? How would you like to configure ESLint?</div><div class="line">Use a popular style guide</div><div class="line">? Which style guide do you want to follow?</div><div class="line">Airbnb</div><div class="line">? Do you use React?</div><div class="line">No</div><div class="line">? What format do you want your config file to be in?</div><div class="line">JavaScript</div></pre></td></tr></table></figure><hr><h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// Angular CLI 설치하기</div><div class="line">$ npm install -g @angular/cli</div><div class="line"></div><div class="line">// 프로젝트 폴더 생성 (스캐폴딩됨)</div><div class="line">$ ng new &lt;name&gt;</div><div class="line"></div><div class="line">// 컴포넌트 생성시 폴더 구성 조정하며 한번에 만들기 (.ts / .html / .css / .spec.ts)</div><div class="line">$ ng new my-app -it -is -spec false -flat</div><div class="line">$ ng new my-app -it -is -skip-tests</div><div class="line">$ ng new my-app -it -is -st</div><div class="line"></div><div class="line"></div><div class="line">1. [-it] .html 템플릿 안생기게</div><div class="line">2. [-is] .css 스타일 안생기게</div><div class="line">3. [-spec false] spec.ts  안생기게</div><div class="line">4. [-flat] 폴더 구성X -&gt; 파일로</div><div class="line"></div><div class="line">// 구동시키기 &amp; 오픈</div><div class="line">$ ng serve -o</div><div class="line"></div><div class="line">// 포트 겹칠 시, 포트 바꾸기</div><div class="line">$ ng serve --port 4201</div><div class="line"></div><div class="line">// 배포</div><div class="line">$ ng build</div><div class="line"></div><div class="line">// 기본 style, scss로 적용</div><div class="line">$ ng new sass-project --style=scss</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Eslint&quot;&gt;&lt;a href=&quot;#Eslint&quot; class=&quot;headerlink&quot; title=&quot;Eslint&quot;&gt;&lt;/a&gt;Eslint&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/TIL/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/TIL/dev-others/"/>
    
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/tags/angular/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>TIL_171109 Angular Component - Template, Date Binding, Built-in directive</title>
    <link href="https://SunnySunhwa.github.io/2017/11/09/TIL-171109/"/>
    <id>https://SunnySunhwa.github.io/2017/11/09/TIL-171109/</id>
    <published>2017-11-08T22:02:48.000Z</published>
    <updated>2018-07-10T11:05:29.246Z</updated>
    
    <content type="html"><![CDATA[<p>앵귤러안에서는 DOM을 써도 되지만, 쓰는 순간 앵귤러의 의미를 잃어버린다.<br>되도록 쓰지 않도록 하나, Pure Javascript를 잊어버리지 않도록 유의*</p><h3 id="용어정리"><a href="#용어정리" class="headerlink" title="용어정리"></a>용어정리</h3><ol><li>Model : 애플리케이션에서 사용되는 <strong>데이터 형식</strong> 과 이를 <strong>컨트롤하는 로직</strong> (비즈니스/유효성 검사)</li><li>View :  사용자에게 model을 표시하는 것 </li></ol><ul><li>구문 vs 표현식<ul><li>구문: 시스템을 변경할 수 있고 ;으로 끝남</li><li>표현식: 값, 변수, 연산자의 조합으로 연산을 통해 하나의 값을 만듬</li></ul></li></ul><h3 id="변화-감지"><a href="#변화-감지" class="headerlink" title="변화 감지"></a>변화 감지</h3><p>앵귤러는 Zone.js 라이브러리를 통해 아래의 변화를 감지</p><ol><li>DOM 이벤트 </li><li>Timer의 tick 이벤트</li><li>Ajax / Promise</li></ol><p><em>연결된 바인딩이 어떠한 상황에 변화하는가? (Zone.js가 체크하는 지점)</em>  </p><blockquote><ul><li>기본자료형은 pass by value기 때문에 메모리주소가 바뀌는 순간 변경을 감지  </li><li>객체는 pass by reference기 때문에 메모리주소가 재할당되어야 변경을 감지<br>즉, 값이 바뀌지 않았다 하더라도 메모리주소가 변경되면 변화감지가 일어남<br>*filter와 같이 원본 배열은 그대로 두는 것은 변화감지가 일어나지 않음</li></ul></blockquote><hr><h3 id="Template-Syntax"><a href="#Template-Syntax" class="headerlink" title="Template Syntax"></a>Template Syntax</h3><p>템플릿과 컴포넌트 클래스간의 데이터 공유를 위한 문법 (데이터 바인딩)  </p><h1 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h1><h3 id="1-인터폴레이션"><a href="#1-인터폴레이션" class="headerlink" title="1. 인터폴레이션"></a>1. 인터폴레이션</h3><ul><li>표현식을 사용 (연산자 제외)</li><li>템플릿에는 하나의 값이 들어가고, 컴포넌트 클래스의 프로퍼티를 변경할 수 있는 연산자는 사용 금지</li><li>당연히 재할당을 지정하는 행위 역시 금지 </li><li>프로퍼티 바인딩의 syntax sugar</li></ul><h3 id="2-프로퍼티-바인딩"><a href="#2-프로퍼티-바인딩" class="headerlink" title="2. 프로퍼티 바인딩*"></a>2. 프로퍼티 바인딩*</h3><ul><li>[property]=”expression”</li><li>표현식 평가 결과가 DOM 프로퍼티에 바인딩됨</li><li>즉, 컴파일 됐을때 html 마크업상으론 표현이 X, 오롯이 DOM에만 </li><li>따라서 해당하는 태그의 DOM 프로퍼티가 있는지를 확인하고 바인딩을 사용해야 함</li></ul><h3 id="3-어트리뷰트-바인딩"><a href="#3-어트리뷰트-바인딩" class="headerlink" title="3. 어트리뷰트 바인딩"></a>3. 어트리뷰트 바인딩</h3><ul><li>[attr.attribute-name]=”expression”</li><li>보통 프로퍼티 바인딩으로 해결하지 못할때 사용 (td colspan 등)</li></ul><h4 id="참고-DOM-프로퍼티-vs-HTML-어트리뷰트"><a href="#참고-DOM-프로퍼티-vs-HTML-어트리뷰트" class="headerlink" title="[참고] DOM 프로퍼티 vs HTML 어트리뷰트*"></a>[참고] DOM 프로퍼티 vs HTML 어트리뷰트*</h4><p>HTML의 어트리뷰트는 DOM구조에서<br>(1) 대응하는 DOM의 프로퍼티와<br>(2) DOM의 ‘attribute’ 프로퍼티에 유사배열 형태로 저장    </p><p>예를 들어 HTML input태그에 선언된 어트리뷰트는 DOM의 input element의 attribute 프로퍼티 에 유사배열형태로 저장 [id, type, value]</p><ul><li>이 유사배열에 있는 value값은 초기값(선언한 값)을 가지고 있음</li><li>유저가 입력값을 바꾸면 바뀐 value값은 DOM property리스트의 value(대응하는 프로퍼티)가 저장</li></ul><p>즉, DOM의 프로퍼티와 HTML의 어트리뷰트가 언제나 1:1로 매핑되는 것은 아님</p><ul><li>서로에게 대응하는 어트리뷰트와 프로퍼티가 없을 수 있음 (class / classList)</li><li>같은 이름, 서로에게 대응하는 것이 있어도 다르게 동작할 수 있음 (value 예)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 프로퍼티 바인딩의 변환 결과 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 어트리뷰트 바인딩의 변환 결과 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"name"</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="4-클래스-바인딩"><a href="#4-클래스-바인딩" class="headerlink" title="4. 클래스 바인딩"></a>4. 클래스 바인딩</h3><ul><li>[class.class-name]=”expression”</li><li>중복되는 경우 true면 병합되고 false면 원래 있던 것도 지움</li><li>클래스 바인딩은 클래스 어트리뷰트 보다 우선함  </li><li>즉, 기존에 마크업된 클래스 어트리뷰트를 리셋, 클래스 바인딩의 내용을 적용</li></ul><h3 id="5-스타일-바인딩"><a href="#5-스타일-바인딩" class="headerlink" title="5. 스타일 바인딩"></a>5. 스타일 바인딩</h3><ul><li>[style.css프로퍼티명]=”expression”</li><li>인라인 스타일을 만들어줌</li><li>font-size의 경우 단위까지 기술</li><li>[style.font-size.em]=”isActive ? 1.2 : 1”</li></ul><h3 id="6-이벤트-바인딩"><a href="#6-이벤트-바인딩" class="headerlink" title="6. 이벤트 바인딩*"></a>6. 이벤트 바인딩*</h3><ul><li>(event)=”statement”</li><li>표현식이 아닌, <strong>구문</strong>이 옴<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 구문에 할당문이 옴</span></div><div class="line">(click)=<span class="string">"isActive=!isActive"</span></div><div class="line"><span class="comment">// $event는 addEventListener의 e객체</span></div><div class="line">(input)=<span class="string">"onInput($event)"</span></div></pre></td></tr></table></figure></li></ul><h3 id="7-양방향-데이터-바인딩"><a href="#7-양방향-데이터-바인딩" class="headerlink" title="7. 양방향 데이터 바인딩"></a>7. 양방향 데이터 바인딩</h3><ul><li>[(ngModel)]=”variable”</li><li>사용하기 위해서는 root module에 FormsModule을 추가해야함</li><li>양쪽의 단방향을 사용함으로써(프로퍼티, 이벤트바인딩) 양방향인 것처럼 사용 (syntax sugar)</li><li>양방향 데이터바인딩은 꼭 필요할 시만 사용 (성능이슈)</li><li>사용자 입력과 관련돤 DOM요소에 사용됨 (input, textarea, select.. 폼 컨트롤 요소)</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import문에 추가he</span></div><div class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 데코레이터의 import문에 추가</span></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  declarations: [AppComponent],</div><div class="line">  imports: [BrowserModule, FormsModule],</div><div class="line">  providers: [],</div></pre></td></tr></table></figure><hr><h1 id="Built-in-directive"><a href="#Built-in-directive" class="headerlink" title="Built-in directive"></a>Built-in directive</h1><ul><li>애플리케이션 전역에서 사용할 수 있는 공통 관심사를 분리하여 구현</li><li>공통된 관심사를 묶어 HTML 태그의 <strong>커스텀 어트리뷰트</strong>를 만든다는 개념<ul><li>컴포넌트는 <strong>커스텀 태그</strong>를 만든다는 개념</li></ul></li></ul><h2 id="디렉티브-3가지-유형"><a href="#디렉티브-3가지-유형" class="headerlink" title="디렉티브 3가지 유형"></a>디렉티브 3가지 유형</h2><p><strong>1. 컴포넌트 디렉티브(Component Directives)</strong></p><ul><li>컴포넌트의 템플릿을 표시하기 위한 디렉티브</li><li>@Component내 seletor 프로퍼티에 임의의 디렉티브의 이름을 정의</li></ul><p><strong>2. 어트리뷰트 디렉티브(Attribute Directives)</strong></p><ul><li>HTML 요소의 어트리뷰트와 같이 사용 (해당 요소의 모양, 동작을 제어)</li><li>ngClass, ngStyle</li></ul><p><strong>3. 구조 디렉티브(Structural Directives)</strong></p><ul><li>DOM 레이아웃을 변경</li><li>구조 디렉티브는 DOM 요소를 반복 생성(ngFor)</li><li>조건에 의한 추가 또는 제거(ngIf, ngSwitch)</li></ul><hr><h3 id="어트리뷰트-디렉티브"><a href="#어트리뷰트-디렉티브" class="headerlink" title="어트리뷰트 디렉티브"></a>어트리뷰트 디렉티브</h3><h4 id="1-ngClass"><a href="#1-ngClass" class="headerlink" title="1. ngClass"></a>1. ngClass</h4><ul><li>ngClass는 문자열, 배열, 객체, 컴포넌트 메소드에 의한 클래스까지 지원  </li><li>클래스 바인딩은 문자열에 의한 클래스만을 지원하지만,  </li><li>즉, css세트를 쓰거나 조건에 의한 클래스 적용시 사용.  </li><li>복수의 클래스 리스트를 조건(true/false or 함수사용)으로 컨트롤할때 사용</li></ul><h3 id="2-ngStyle"><a href="#2-ngStyle" class="headerlink" title="2. ngStyle"></a>2. ngStyle</h3><ul><li>인라인 스타일을 만듬  </li></ul><hr><h2 id="구조-디렉티브"><a href="#구조-디렉티브" class="headerlink" title="구조 디렉티브"></a>구조 디렉티브</h2><h3 id="1-ngIf"><a href="#1-ngIf" class="headerlink" title="1. ngIf"></a>1. ngIf</h3><ul><li><element *ngif="expression">…</element></li><li>조건에 따라 요소를 표시할지 말지 (true/false) 결정할때 사용</li><li>스타일 바인딩(display:none)으로 하는것은 DOM요소가 남지만, ngIf는 아예 DOM까지 제거</li><li>false일때의 구문 추가 가능 (else문)<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"mySkill==='HTML'; else elseBlock"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--else일때 실행할 elseBlock구문--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="2-ngFor"><a href="#2-ngFor" class="headerlink" title="2. ngFor"></a>2. ngFor</h3><ul><li>컴포넌트 클래스의 컬렉션을 반복(for문처럼) </li><li>-&gt; 호스트 요소 및 하위 요소를 DOM에 추가</li><li>컬렉션은 일반적으로 배열을 사용<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--기본 문법--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">element</span> *<span class="attr">ngFor</span>=<span class="string">"let item of items"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">element</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--옵션 사항--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">element</span> *<span class="attr">ngFor</span>=<span class="string">"let item of items; let i=index; let odd=odd; trackBy: trackById"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">element</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id="3-ngSwitch"><a href="#3-ngSwitch" class="headerlink" title="3. ngSwitch"></a>3. ngSwitch</h3><ul><li>js의 switch문과 같은 기능</li><li>이전과는 달리 *를 case문에 사용</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;앵귤러안에서는 DOM을 써도 되지만, 쓰는 순간 앵귤러의 의미를 잃어버린다.&lt;br&gt;되도록 쓰지 않도록 하나, Pure Javascript를 잊어버리지 않도록 유의*&lt;/p&gt;
&lt;h3 id=&quot;용어정리&quot;&gt;&lt;a href=&quot;#용어정리&quot; class=&quot;head
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/framework/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171107 Angular의 구조와 원리</title>
    <link href="https://SunnySunhwa.github.io/2017/11/07/TIL-171107/"/>
    <id>https://SunnySunhwa.github.io/2017/11/07/TIL-171107/</id>
    <published>2017-11-06T22:35:46.000Z</published>
    <updated>2018-07-10T11:05:16.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><blockquote><ul><li>앵귤러는 컴포넌트, 파이프, 서비스등으로 구성된 모듈의 집합으로, 하나의 어플리케이션을 만들 수 있는 프레임워크</li><li>뷰와 자바스크립트가 상태 공유 (서로의 변화를 자동으로 감지)할 수 있어야 자바스크립트가 뷰를 컨트롤 할 수 있음 </li><li>이러한 역할, <strong>변화감지를 자동화</strong>해주는 것이 <strong>앵귤러</strong>  <ul><li>방향1: 뷰에서 입력되는 상태 -&gt; 자바스크립트가 알고 동작하게  </li><li>방향2: 자바스크립트에서 변경된 상태 -&gt; 뷰에서 표현되게  </li></ul></li></ul></blockquote><ol><li>컴포넌트 기반 개발<ul><li>로직뿐만 아니라 뷰의 부품화까지 가능</li></ul></li><li>TypeScript<ul><li>다양한 도구 지원의 가능</li><li>컴파일 단계에서 에러 검출 가능</li></ul></li><li>Angular CLI<ul><li>개발환경 구축 자동화 (서버까지)<br>```shell<br>// Angular CLI 설치하기<br>$ npm install -g @angular/cli</li></ul></li></ol><p>// 프로젝트 폴더 생성 (스캐폴딩됨)<br>$ ng new <name></name></p><p>// 컴포넌트 생성시 폴더 구성 조정하며 한번에 만들기 (.ts / .html / .css / .spec.ts)<br>$ ng new my-app -it -is -spec false -flat<br>$ ng new my-app -it -is -skip-tests</p><ol><li>[-it] .html 템플릿 안생기게</li><li>[-is] .css 스타일 안생기게</li><li>[-spec false] spec.ts  안생기게</li><li>[-flat] 폴더 구성X -&gt; 파일로</li></ol><p>// 구동시키기 &amp; 오픈<br>$ ng serve -o</p><p>// 포트 겹칠 시, 포트 바꾸기<br>$ ng serve –port 4201</p><p>// 배포<br>$ ng build<br>c</p><hr><h4 id="참고-앵귤러-명칭"><a href="#참고-앵귤러-명칭" class="headerlink" title="[참고] 앵귤러 명칭"></a>[참고] 앵귤러 명칭</h4><ul><li>파일명은 케밥케이스로</li><li>클래스명은 카멜케이스로</li></ul><hr><h3 id="Angular-동작-흐름"><a href="#Angular-동작-흐름" class="headerlink" title="Angular 동작 흐름"></a>Angular 동작 흐름</h3><ol><li><p>index.html에 5개의 리소스만이 포함<br> 1) inline.bundle.js<br> Webpack 유틸리티가 포함된 Webpack loader<br> 2) polifills.bundle.js<br> polyfill 의존성 모듈(core-js, zone.js)을 번들링한 파일<br> 3) styles.bundle.js<br> 스타일 정의를 번들링한 파일<br> 4) vendor.bundle.js<br> Angular 의존성 모듈(@angular/*, RxJS)을 번들링한 파일<br> 5) main.bundle.js<br> 개발자가 작성한 컴포넌트, 디렉티브, 서비스 등 소스코드를 번들링한 파일</p></li><li><p>이 5개 자바스크립트 리소스가 모든 페이지에 관련한  html, css, javascript 정보를 내포</p></li><li><p>로딩 시, 서버로 부터 모든 정보를 받아오기 때문에 첫 로딩 시 상대적으로 소요</p></li><li><p>로딩 시, (5)main.bundle.js가 angular-cli 설정파일을 봄</p></li><li>angular-cli.json에 메인에 쓰여있는 설정인 main.ts를 가동</li><li>main.ts를 구동시켜야 루트모듈이 기동됨</li><li>루트모듈은 루트 컴포넌트를 기동시킴 (부트스트랩)</li><li>index.html에 심어놓은 커스텀 코드가 html로 대체된다</li></ol><hr><h2 id="Angular의-핵심요소"><a href="#Angular의-핵심요소" class="headerlink" title="Angular의 핵심요소"></a>Angular의 핵심요소</h2><h3 id="핵심요소-1-컴포넌트-Component"><a href="#핵심요소-1-컴포넌트-Component" class="headerlink" title="핵심요소-1. 컴포넌트 (Component)"></a>핵심요소-1. 컴포넌트 (Component)</h3><ul><li>화면을 구성하는 뷰(view)를 생성하고 관리하는 역할</li><li>1개의 화면은 1개 이사의 컴포넌트를 조립하여 구성</li><li>3가지 요소로 구성 (템플릿, 메타데이터, 컴포넌트 클래스)</li></ul><h4 id="1-import"><a href="#1-import" class="headerlink" title="1.  import"></a>1.  import</h4><h4 id="2-Component-데코레이터"><a href="#2-Component-데코레이터" class="headerlink" title="2.  @Component (데코레이터)"></a>2.  @Component (데코레이터)</h4><ul><li>새로운 커스텀 태그를 만듬</li><li>장식하고자 하는 클래스 바로 위에 위치</li><li>export의 클래스를 컴포넌트화 하는데에 필요한 설정정보를 기록</li><li>이러한 설정정보를 <strong>메타데이터</strong> 라 함<br>  1) selector : ‘접두사-명칭’<ul><li>기본적으로 접두사를 붙여, 중복을 회피<br>2) templateUrl : ‘html파일 경로’<br>3) styleUrls : [‘css경로’]</li><li>css파일은 여러개 올수있기 때문에 배열형태</li><li>template에 적은 html파일에만 적용됨 (전역x, 스코프 분리)<h4 id="3-export-class"><a href="#3-export-class" class="headerlink" title="3. export class"></a>3. export class</h4></li></ul></li><li>html과 연동하여 DOM에 조작할 부분을 변수로</li><li>컴포넌트화 될 클래스</li></ul><h3 id="핵심요소-2-디렉티브-Directive"><a href="#핵심요소-2-디렉티브-Directive" class="headerlink" title="핵심요소-2. 디렉티브 (Directive)"></a>핵심요소-2. 디렉티브 (Directive)</h3><ul><li>각각의 컴포넌트에서 사용되는 공통된 템플릿을 별도로 분리해 놓은것 -&gt; 전역관심사 분리</li><li>DOM의 표현이나 구조 변경 가능</li><li>구조 디렉티브(Structural directive)</li><li>어트리뷰트 디렉티브(Attribute directive)</li><li>커스텀 디렉티브(Cunstom directive)</li></ul><h3 id="핵심요소-3-서비스-Service"><a href="#핵심요소-3-서비스-Service" class="headerlink" title="핵심요소-3. 서비스 (Service)"></a>핵심요소-3. 서비스 (Service)</h3><ul><li>각각의 컴포넌트에서 사용되는 공통된 컴포넌트 클래스(컴포넌트 구성요소 중 하나)를 별도로 분리해 놓은 것 -&gt; 전역관심사 분리</li><li>즉, 다양한 목적의 애플리케이션 공통 로직을 담당</li><li>서버와의 연동</li></ul><h3 id="핵심요소-4-라우터-Router"><a href="#핵심요소-4-라우터-Router" class="headerlink" title="핵심요소-4. 라우터(Router)"></a>핵심요소-4. 라우터(Router)</h3><ul><li>컴포넌트를 교체하는 방법</li><li>뷰를 전환하여 화면간 이동을 구현</li></ul><h3 id="핵심요소-5-모듈-NgModule"><a href="#핵심요소-5-모듈-NgModule" class="headerlink" title="핵심요소-5. 모듈 (NgModule)"></a>핵심요소-5. 모듈 (NgModule)</h3><ul><li>기능적으로 관련된 구성요소(컴포넌트, 디렉티브, 파이프, 서비스)를 하나의 단위로 묶는 메커니즘</li><li>모듈은 관련이 있는 기능을 응집 -&gt; 블록으로 애플리케이션을 구성하는 하나의 단위를 만듬</li><li>Angular는 여러 모듈들을 조합하여 애플리케이션을 구성</li><li>모듈에 등록되어야만 컴포넌트, 디렉티브, 파이프, 서비스 등의 Angular 구성요소 이용이 가능</li></ul><p><strong>파이프란 ?</strong><br>원본을 건들지 않고 그것을 필터링 해주는 역할</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular&quot;&gt;&lt;a href=&quot;#Angular&quot; class=&quot;headerlink&quot; title=&quot;Angular&quot;&gt;&lt;/a&gt;Angular&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;앵귤러는 컴포넌트, 파이프, 서비스등으로 구성된 모듈의 
      
    
    </summary>
    
      <category term="angular" scheme="https://SunnySunhwa.github.io/categories/angular/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/"/>
    
      <category term="framework" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/angular/dev-others/framework/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171106 TypeScript</title>
    <link href="https://SunnySunhwa.github.io/2017/11/06/TIL-171106/"/>
    <id>https://SunnySunhwa.github.io/2017/11/06/TIL-171106/</id>
    <published>2017-11-05T21:54:41.000Z</published>
    <updated>2018-07-10T11:04:56.999Z</updated>
    
    <content type="html"><![CDATA[<p><strong>자바스크립트는 왜?</strong><br>자바스크립트는 변수타입이 없는데도 값의 타입은 있다.<br>-&gt; 메모리를 할당할 때에, 어느정도의 메모리를 할당할지(크기) 정해야하기 때문에</p><p>자바스크립트는 변수타입이 없기 때문에, 런타입에러에 대비해야함 (항상 형체크)<br>-&gt; 타입스크립트를 쓰면서 문제 해결</p><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><ul><li>AltJS(JavaScript의 대체언어)의 하나로써 JavaScript(ES5)의 Superset(상위확장)</li><li>기존의 JavaScript(ES5) 문법을 그대로 사용가능</li><li>ES6의 새로운 기능들을 사용하기 위해 Babel과 같은 별도 Transpiler를 사용 불필요</li><li>ECMAScript의 업그레이드에 따른 새로운 기능이 지속적으로 포함</li><li>js로 기본 트랜스파일링은 ES3를 기준으로 함</li><li>선언문과 할당문을 한번에 줄 경우 자동으로 타입 선언</li><li>할당해주던지, 선언해주던지를 하지 않으면 any 타입으로 설정되어 타입스크립트의 의미를 상실</li><li>정적 타이핑 지원 (변수의 타입을 선언할 수 있어, 잘못된 타입이 할당되면 컴파일러는 에러 발생)</li></ul><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><ul><li>상수들의 집합. 변하지 않을 값들의 모임</li><li>열거형은 숫자값 집합에 이름을 지정한 것<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color1 &#123;Red, Green, Blue&#125;;</div><div class="line"><span class="keyword">let</span> c1: Color1 = Color1.Green;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(c1); <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> Color2 &#123;Red = <span class="number">1</span>, Green, Blue&#125;;</div><div class="line"><span class="keyword">let</span> c2: Color2 = Color2.Green;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(c2); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> Color3 &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;;</div><div class="line"><span class="keyword">let</span> c3: Color3 = Color3.Blue;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(c3); <span class="comment">// 4</span></div></pre></td></tr></table></figure></li></ul><hr><h1 id="TypeScript-Class"><a href="#TypeScript-Class" class="headerlink" title="TypeScript Class"></a>TypeScript Class</h1><ul><li>Typescript 클래스는 클래스 바디에 멤버 변수를 <strong>사전 정의</strong> 해야함. (기본은 public)</li><li>ES6는 바디에 메소드만 선언할수 있었다. (멤버변수 선언 안됨)</li></ul><h2 id="접근-제한자-Access-modifier"><a href="#접근-제한자-Access-modifier" class="headerlink" title="접근 제한자 (Access modifier)"></a>접근 제한자 (Access modifier)</h2><ul><li>Typescript는 public, private, protected 접근 제한자를 지원</li><li>접근제한자가 사용된 생성자의 파라미터는 암묵적으로 멤버 변수로 정의</li><li>-&gt; 생성자 내부에서 별도의 초기화없이도 암묵적으로 초기화가 수행</li></ul><table><thead><tr><th style="text-align:left">접근가능성</th><th style="text-align:left">public</th><th style="text-align:left">protected</th><th style="text-align:left">private</th></tr></thead><tbody><tr><td style="text-align:left">클래스 내부</td><td style="text-align:left">◯</td><td style="text-align:left">◯</td><td style="text-align:left">◯</td></tr><tr><td style="text-align:left">자식 클래스</td><td style="text-align:left">◯</td><td style="text-align:left">◯</td><td style="text-align:left">✕</td></tr><tr><td style="text-align:left">클래스 인스턴스</td><td style="text-align:left">◯</td><td style="text-align:left">✕</td><td style="text-align:left">✕</td></tr></tbody></table><h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><ul><li>추상클래스는 추상 메소드와 일반 메소드를 가질 수 있음<ul><li>추상 메소드 : 선언만 있음</li><li>일반 메소드 : 함수바디가 있음</li></ul></li><li>직접 인스턴스를 생성할 수 없음(함수바디 없음) only 상속만을 위해 사용</li><li>추상 클래스를 상속받는 클래스는 추상 클래스의 추상 메소드를 반드시 구현하여야 함</li><li>상속받는 클래스마다 실제 구현이 각각 다르다는 가정하에, 협업 시 규칙을 정해서 빠뜨리지 않도록할 때에 사용</li></ul><hr><h1 id="TypeScript-interface"><a href="#TypeScript-interface" class="headerlink" title="TypeScript - interface"></a>TypeScript - interface</h1><ul><li>협업 시, 타입 체크 및 의사소통을 위해 많이 사용</li><li>관습적으로 이름앞에 ‘I’를 붙임</li><li>클래스가 아니기때문에 상속 ‘extends’의 개념이 없고, 구현 ‘implements’의 개념이 있음</li><li>-&gt; 즉, 인터페이스로 설정해놓은 것을 <strong>‘준수해서 만들라’</strong> 는 의미</li><li>-&gt; 인터페이스의 프로퍼티 부분은 인스턴스 생성시 선언해 주고, 메소드 부분은 함수바디를 작성해야 함</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//요소의 타입을 규칙으로 정해놓음</span></div><div class="line"><span class="keyword">interface</span> Todo &#123;</div><div class="line">  id: <span class="built_in">number</span>;</div><div class="line">  content: <span class="built_in">string</span>;</div><div class="line">  completed: <span class="built_in">boolean</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">todo: Todo</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(todo.content);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> newTodo: Todo = &#123; id: <span class="number">1</span>, content: <span class="string">'typescript'</span>, completed: <span class="literal">false</span> &#125;;</div><div class="line">addTodo(newTodo);</div></pre></td></tr></table></figure><h2 id="duck-typing"><a href="#duck-typing" class="headerlink" title="duck typing"></a>duck typing</h2><ul><li>해당 인터페이스에서 정의한 값(멤버변수나 메소드)을 가지고 있다면 -&gt; 해당 인터페이스를 구현한 것으로 인정</li><li>덕 타이핑(duck typing) 또는 구조적 타이핑(structural typing)이라 칭함</li><li>인터페이스를 일반 변수에 사용할 경우에도 덕 타이핑은 적용됨</li><li>주안점: 인터페이스의 프로퍼티가 <em>있는지</em> (이것 외에 없어야한다는 것은 아님)</li></ul><h2 id="Optional-property"><a href="#Optional-property" class="headerlink" title="Optional property"></a>Optional property</h2><ul><li>인터페이스의 프로퍼티는 반드시 구현되어야 하지만 인터페이스의 프로퍼티가 선택적으로 필요한 경우에 사용</li><li>프로퍼티명 뒤에 ?를 붙임</li><li>생략하여도 에러가 발생하지 X</li></ul><hr><h1 id="TypeScript-Generic"><a href="#TypeScript-Generic" class="headerlink" title="TypeScript - Generic"></a>TypeScript - Generic</h1><ul><li>타입별로 클래스를 추가해야하는 문제를 해결하기 위한 방안</li><li>인스턴스 생성 시에, 타입을 넘겨서 생성함 <code>&lt;T&gt;</code>(함수에 인자를 넘기듯)</li><li>함수에도 제네릭 사용 가능 -&gt; 다양한 타입의 매개변수와 리턴 사용 가능</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//T라는 별칭 (개발자가 정의)</span></div><div class="line"><span class="keyword">class</span> Queue&lt;T&gt; &#123;</div><div class="line">  <span class="keyword">protected</span> data = [];</div><div class="line">  push(item: T) &#123;</div><div class="line">    <span class="keyword">this</span>.data.push(item);</div><div class="line">  &#125;</div><div class="line">  pop(): T &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// number 전용 Queue</span></div><div class="line"><span class="keyword">const</span> numberQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;();</div><div class="line">numberQueue.push(<span class="number">0</span>);</div><div class="line"><span class="comment">// numberQueue.push('1'); // 의도하지 않은 실수를 사전 검출 가능</span></div><div class="line">numberQueue.push(+<span class="string">'1'</span>);   <span class="comment">// 실수를 사전 인지하고 수정할 수 있다</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(numberQueue.pop().toFixed()); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(numberQueue.pop().toFixed()); <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="comment">//인스턴스 생성시 String전용 Queue생성도 가능함</span></div></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>&lt;<span class="title">T</span>&gt;(<span class="params">items: T[]</span>): <span class="title">T</span>[] </span>&#123;</div><div class="line">  <span class="keyword">return</span> items.reverse();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> arg = [&#123;name: <span class="string">'Lee'</span>&#125;, &#123;name: <span class="string">'Kim'</span>&#125;, &#123;name: <span class="string">'Park'</span>&#125;];</div><div class="line"></div><div class="line"><span class="comment">// 인수에 의해 타입매개변수가 결정된다</span></div><div class="line"><span class="keyword">const</span> reversed = reverse(arg);</div><div class="line"> <span class="comment">// reversed: &#123;name: string&#125;[] 을 타입으로 갖는다!!</span></div><div class="line"><span class="built_in">console</span>.log(reversed);</div><div class="line"></div><div class="line">reversed.push(&#123;name: <span class="number">100</span>&#125;); <span class="comment">// Error</span></div><div class="line"><span class="built_in">console</span>.log(reversed);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;자바스크립트는 왜?&lt;/strong&gt;&lt;br&gt;자바스크립트는 변수타입이 없는데도 값의 타입은 있다.&lt;br&gt;-&amp;gt; 메모리를 할당할 때에, 어느정도의 메모리를 할당할지(크기) 정해야하기 때문에&lt;/p&gt;
&lt;p&gt;자바스크립트는 변수타입이 없기 
      
    
    </summary>
    
      <category term="typescript" scheme="https://SunnySunhwa.github.io/categories/typescript/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/typescript/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/typescript/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171101 Sass 변환 적용</title>
    <link href="https://SunnySunhwa.github.io/2017/11/01/TIL-171101/"/>
    <id>https://SunnySunhwa.github.io/2017/11/01/TIL-171101/</id>
    <published>2017-10-31T22:35:46.000Z</published>
    <updated>2018-07-10T11:04:22.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-sass"><a href="#npm-sass" class="headerlink" title="npm sass"></a>npm sass</h1><h4 id="폴더구조"><a href="#폴더구조" class="headerlink" title="폴더구조"></a>폴더구조</h4><ul><li>grid (root)<ul><li>css/</li><li>sass/<ul><li>partials/<ul><li>grid.scss</li></ul></li><li>stylesheet.scss</li></ul></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> npm install node-sass</div></pre></td></tr></table></figure><p>파일 하나만 css 변환 시 ‘&gt;’사용<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node-sass ./sass/stylesheet.scss &gt; ./css/stylesheet.css</div></pre></td></tr></table></figure></p><p>폴더 전체를 변환시 -o (output)사용<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node-sass ./sass -o ./css</div><div class="line">$ node-sass --watch ./sass -o ./css</div></pre></td></tr></table></figure></p><p>만약 stylesheet.scss파일에 @import “./partials/grid”;로 호출한 것을 변환 시에는 import가 아닌 들어와있는 상태로 변환하고 싶을 때는, 파일명에 <em>(underscore)를 붙여줌.<br>단, 쉘 명령어에는 </em>빼고 파일명을 기입한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;npm-sass&quot;&gt;&lt;a href=&quot;#npm-sass&quot; class=&quot;headerlink&quot; title=&quot;npm sass&quot;&gt;&lt;/a&gt;npm sass&lt;/h1&gt;&lt;h4 id=&quot;폴더구조&quot;&gt;&lt;a href=&quot;#폴더구조&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/dev-others/TIL/"/>
    
      <category term="Sass" scheme="https://SunnySunhwa.github.io/categories/dev-others/TIL/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171031 Express, npm</title>
    <link href="https://SunnySunhwa.github.io/2017/10/31/TIL-171031/"/>
    <id>https://SunnySunhwa.github.io/2017/10/31/TIL-171031/</id>
    <published>2017-10-30T21:47:41.000Z</published>
    <updated>2018-07-10T11:04:05.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>Node.js환경에서 동작하는 web application frame work</p><p><strong>왜 등장했나?</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 여러 종류의 요청을 구별하기 위해</div><div class="line">- Node.js의 기본 API만으로는 부족하여 더 쉬운 방법(framework)탄생  -&gt; Express</div></pre></td></tr></table></figure></p><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><ul><li>클라이언트의 다양한 요청에 따라 해당 요청에 맞는 response를 위해 응답하는 방식 (경로를 지정)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 모듈 로드</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="comment">// 모듈 호출, 및 할당</span></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="comment">// 라우팅: "클라이언트가 get 메소드 요청을 루트에 날린다면 -&gt; Hello World 를 보내라"</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello World!'</span>));</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>));</div></pre></td></tr></table></figure><hr><h1 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h1><ul><li>클라이언트의 요청을 구성하는 페이로드는 리퀘스트 바디에 담겨서 온다</li><li>express 내장 메서드 <code>use()</code>와 함께 사용해서 미들웨어 파이프라인을 만든다.</li><li>next() 메서드를 통해 다음 파이프라인 또는 라우팅으로 넘긴다.</li></ul><h4 id="참고-URI-에서-lt-path-gt-는"><a href="#참고-URI-에서-lt-path-gt-는" class="headerlink" title="[참고] URI 에서 .../:&lt;path&gt;/ 는?"></a>[참고] URI 에서 <code>.../:&lt;path&gt;/</code> 는?</h4><ul><li>path의 일부를 파라메터화</li></ul><p><strong>다양한 응답을 위해 여러가지 메소드 제공</strong></p><ul><li>필요한 메소드를 체이닝하고, 마지막에 .send()</li><li>render() 는 템플릿 엔진과 함께 사용</li></ul><h3 id="정적-파일-응답"><a href="#정적-파일-응답" class="headerlink" title="정적 파일 응답"></a>정적 파일 응답</h3><ul><li>클라이언트에게 HTML, CSS, Javascript, img 등의 정적파일로 응답</li><li>express 내장 미들웨어인 <code>static</code> 사용</li><li><code>app.use(express.static(&lt;dir&gt;))</code></li><li>dir: 요청한 정적 파일이 저장된 위치</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> bp = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// 3. static file middleware</span></div><div class="line">app.use(express.static(<span class="string">'statics'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 1. routing: localhost:3000/</span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'hello world'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 2. routing: localhost:3000/json</span></div><div class="line">app.get(<span class="string">'/json'</span>, (req, res) =&gt; res.send(&#123; <span class="attr">msg</span>: <span class="string">'json test'</span> &#125;));</div><div class="line"></div><div class="line"><span class="comment">// 0. port: 3000</span></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure><h3 id="템플릿-엔진"><a href="#템플릿-엔진" class="headerlink" title="템플릿 엔진"></a>템플릿 엔진</h3><ul><li>서버 코드에 html 텍스트를 혼합하여 사용하는 일이 없도록 하기 위해 탄생</li><li>html 파일에서 인터폴레이션 제공</li><li>종류: jade, ejs, <strong>handlebars</strong> 등</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* handlebars 예제 */</span></div><div class="line"></div><div class="line">app.get(<span class="string">'/temp/:name'</span>, (req, res) =&gt; &#123; <span class="comment">// URL 마지막 문자를 파라메터화한다</span></div><div class="line">  <span class="keyword">const</span> &#123; name &#125; = req.params; <span class="comment">// 파라메터를 받아서 변수로 저장하고</span></div><div class="line">  res.render(<span class="string">'temp.handlebars'</span>, &#123; name &#125;); <span class="comment">// 템플릿에 넘겨서 렌더링한 html로 응답.</span></div></pre></td></tr></table></figure><hr><h1 id="todos-실습"><a href="#todos-실습" class="headerlink" title="todos 실습"></a>todos 실습</h1><h4 id="server-코드"><a href="#server-코드" class="headerlink" title="server 코드"></a>server 코드</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config() <span class="comment">// dotenv 패키지를 사용, .env 파일(환경변수)에서 설정 로드</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">4500</span>; <span class="comment">// 환경변수 포트 OR 4500</span></div><div class="line"></div><div class="line"><span class="comment">// 라우터는 바깥에 빼놓음</span></div></pre></td></tr></table></figure><hr><h4 id="개발환경-구축-server-side"><a href="#개발환경-구축-server-side" class="headerlink" title="개발환경 구축: server-side"></a>개발환경 구축: server-side</h4><p>[설치할 패키지]</p><ul><li>express, body-parser, dotenv, mongoose</li></ul><p><strong>폴더 트리와 각각의 역할</strong></p><ul><li>models/todo.js - db컨트롤</li><li>routes/todos.js - 라우터</li><li>/.env - dotenv 환경변수(로컬서버의 포트, mLab mongoDB 접)</li><li>/server.js - 서버모듈</li><li>package.json - npm 설정파일(<code>&quot;start&quot;: &quot;nodemon server.js&quot;</code>)</li></ul><p>**[참고]</p><ul><li><p>npm script 키워드 ‘start’는 예약어로 <code>run</code> 생략 가능</p></li><li><p><strong>[dotenv]</strong><br>‘.env’파일에는 기밀정보(개인정보)접근 방법을 담아놓고<br>깃허브나 서버에 올라가 오픈되지 않도록 보관. dotenv로<br>.env파일을 읽어올 수 있음 </p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// .env</div><div class="line"><span class="meta">#</span><span class="bash"> port number</span></div><div class="line">PORT=4500</div><div class="line"><span class="meta">#</span><span class="bash"> MongoDB URI &amp; User/Password</span></div><div class="line">MONGO_URI=mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds241395.mlab.com:41395/mydb</div></pre></td></tr></table></figure><hr><h2 id="개발환경-구축-client-side"><a href="#개발환경-구축-client-side" class="headerlink" title="개발환경 구축: client-side"></a>개발환경 구축: client-side</h2><p>서버가 있는 곳에 클라이언트에 필요한 파일을 작성(로컬 서버니까)</p><p><strong>파일 시스템</strong><br>왼쪽(src): 개발자<br>오른쪽(public): webpack이 변환 &amp; 생성</p><ul><li>ES6 –babel–&gt; ES5</li><li>Sass –node-sass–&gt; CSS</li><li>html —-&gt; html</li><li>babel + node-sass =&gt; webpack</li></ul><h4 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">  "axios": "^0.17.0", // Promise를 지원하는 Ajax 라이브러리</div><div class="line">  "babel-polyfill": "^6.26.0",</div><div class="line">  "body-parser": "^1.18.2",</div><div class="line">  "dotenv": "^4.0.0",</div><div class="line">  "express": "^4.16.2",</div><div class="line">  "mongoose": "^4.12.5"</div><div class="line">&#125;,</div><div class="line">"devDependencies": &#123;</div><div class="line">  "babel-cli": "^6.26.0",</div><div class="line">  "babel-loader": "^7.1.2",</div><div class="line">  "babel-preset-env": "^1.6.1",</div><div class="line">  "css-loader": "^0.28.7",</div><div class="line">  "extract-text-webpack-plugin": "^3.0.2",</div><div class="line">  "file-loader": "^1.1.5",</div><div class="line">  "node-sass": "^4.5.3",</div><div class="line">  "sass-loader": "^6.0.6",</div><div class="line">  "style-loader": "^0.19.0",</div><div class="line">  "webpack": "^3.8.1"</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>webpack.config.js 파일 수정</li><li>npm script 수정 <code>&quot;build&quot;: &quot;webpack -w&quot;</code></li></ul><h4 id="폴더-트리와-각각의-역할"><a href="#폴더-트리와-각각의-역할" class="headerlink" title="폴더 트리와 각각의 역할"></a>폴더 트리와 각각의 역할</h4><p>webpack.config.js 에서 모듈 엔트리로 지정되어 있으므로, 경로와 파일명이 일치해야함</p><ul><li>src/<ul><li>js/<ul><li>app.js</li></ul></li><li>sass/<ul><li>partial/</li><li>style.scss</li></ul></li></ul></li></ul><h4 id="axios-라이브러리-사용법"><a href="#axios-라이브러리-사용법" class="headerlink" title="axios 라이브러리 사용법"></a>axios 라이브러리 사용법</h4><ul><li>`axios.httpMethod.(‘uri’)<br>  .then()<br>  .catch()</li><li>payload 전송시 객체를 바로 전달해도 된다. JSON.stringify 불필요(!)</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>서버운영까지해야 요즘엔 풀스택으로 인정받을 수 있다??? –&gt;  AWS, Docker를 공부하라</li><li>그런날은 너무 아득한 이야기같다 :( Todo나 잘하고나서 이야기..</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h1&gt;&lt;p&gt;Node.js환경에서 동작하는 web application frame work&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171030 Promise, Node.js</title>
    <link href="https://SunnySunhwa.github.io/2017/10/30/TIL-171030/"/>
    <id>https://SunnySunhwa.github.io/2017/10/30/TIL-171030/</id>
    <published>2017-10-29T21:54:01.000Z</published>
    <updated>2018-07-10T11:03:57.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><ul><li>비동기식함수의 리턴을 할 수 없어서 생기는 <strong>콜백헬, 에러처리 불가능 문제를 해결</strong>하기 위한 하나의 방법</li><li>Promise를 사용하면 요청을 취소할수 없다는 단점이 있음</li><li>promise기능의 최신 -&gt; RxJs (Angular)</li><li>promise 자체도 ‘값’을 반환할 순 없지만, ‘약속’을 반환</li><li>후속코드에 서버가 ‘약속’을 지켰을 경우(fulfilled)의 실행, 못 지켰을 경우(rejected)의 실행을 지정</li><li>promise는 내부 계산을 한 후  ‘상태’를  return</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Promise는 Promise 생성자를 통해 인스턴스화</span></div><div class="line"><span class="comment">//비동기 작업을 수행할 콜백함수를 인자로 전달받음 -&gt; 이 콜백함수는 resolve, reject콜백함수를 인수로 갖음</span></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 비동기 작업을 수행한다.</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 비동기 작업 수행 성공 */</span>) &#123;</div><div class="line">    resolve(<span class="string">'resolved!'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123; <span class="comment">/* 비동기 작업 수행 실패 */</span></div><div class="line">    reject(<span class="built_in">Error</span>(<span class="string">'rejected!'</span>));</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="promise-후속-처리함수-then-catch"><a href="#promise-후속-처리함수-then-catch" class="headerlink" title="promise 후속 처리함수 then / catch"></a>promise 후속 처리함수 then / catch</h2><h3 id="1-then"><a href="#1-then" class="headerlink" title="1. then"></a>1. then</h3><ul><li>then 메소드는 두 개의 콜백 함수를 인자로 전달 받음</li><li>첫번째 함수는 성공(fulfilled) 시 호출되는 함수</li><li>두번째 함수는 실패(rejected) 시 호출 (일반적으로 throw로 에러처리를 catch문에 위임)</li></ul><h3 id="2-catch"><a href="#2-catch" class="headerlink" title="2. catch"></a>2. catch</h3><p>fulfilled, rejected 외, 예외 발생 시 호출<br>또는, 두번째 함수에서 던진 throw구문 잡음</p><hr><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><ul><li>단일 thread, 모든 API는 비동기처리</li><li>실무환경에서는 서버에 LTS버전을 설치하도록 (안정)</li><li>서버 페이지가 변경되고, 이를 적용하려면 재실행 시켜서 확인</li><li>require 문은 동기식이기 떄문에 최상단에 연이어 작성을 추천</li></ul><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li>자바스크립트 패키지 매니저</li><li>Node.js에서 사용할 수 있는 모듈들을 패키지화하여 모아둔 저장소 역할 &amp; 패키지 설치 및 관리를 위한 CLI(Command line interface)를 제공</li><li><a href="http://npmjs.com" target="_blank" rel="external">npm</a>에서 모듈 검색 가능 (단, status에 다운로드 기록이 작은 것은 되도록 비추)</li><li>기본 install은 지역 (전역설치 npm install -g ####)</li><li>package.json에 dependencies or devDependencies 유의 (의존성. 배포 or 개발–save-dev)</li><li>npm install 패키지명 –save-dev 하면 -&gt; devDependencies로</li><li><strong>한사람이 package.json을 만들어두면 그 파일을 가지고 npm install만하면 모든 팀원이 동일한 개발환경을 갖게됨</strong> </li></ul><h3 id="버전정보"><a href="#버전정보" class="headerlink" title="버전정보"></a>버전정보</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">^1.7.3</div><div class="line"></div><div class="line">([caret] mojor, minor, patch)</div></pre></td></tr></table></figure><ol><li><p>&#94;caret or ~tilt  </p><ul><li>caret] 추후 호환성을 고려해, minor버전 내 최신버전을 다운</li><li>tilt] 패치 버전 내 최신버전을 다운</li></ul></li><li><p>major - 호환성이 변경했을때</p></li><li>minor - 기능을 추가</li><li>patch - 버그를 수정</li></ol><h4 id="1-exports"><a href="#1-exports" class="headerlink" title="1. exports"></a>1. exports</h4><ul><li>exports 객체에는 값을 할당할 수 X</li><li>공개할 대상을 exports 객체에 프로퍼티 또는 메소드로 추가</li><li>추가한 프로퍼티와 메소드가 담긴 객체가 전달된다.</li></ul><h4 id="2-module-exports"><a href="#2-module-exports" class="headerlink" title="2. module.exports"></a>2. module.exports</h4><ul><li>module.exports를 많이 씀</li><li>module.exports 객체에 하나의 값(기본자료형, 함수, 객체)만을 할당</li><li>하나의 값만 들어갈 수 있으나 폴더를 지정할 수도 있음 (이때 해당 index.js파일을 찾게됨)</li><li><p>module.exports 객체에 할당한 값이 전달</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//폴더 경로</span></div><div class="line"><span class="comment">/* project/</span></div><div class="line"><span class="comment">├── app.js</span></div><div class="line"><span class="comment">└── module/</span></div><div class="line"><span class="comment">    ├── index.js</span></div><div class="line"><span class="comment">    ├── calc.js</span></div><div class="line"><span class="comment">    └── print.js */</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">'./module'</span>);</div><div class="line"><span class="comment">// -&gt; require('./module/index.js')와 같음</span></div><div class="line"></div><div class="line"><span class="comment">// module/index.js 내부에는 부르고싶은 모듈들을 작성</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  calc: <span class="built_in">require</span>(<span class="string">'./calc'</span>),</div><div class="line">  print: <span class="built_in">require</span>(<span class="string">'./print'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>코어모듈은 경로를 써주지 않아도 됨 (이미 node.js가 암 [eg] http )</p></li><li>파일모듈은 경로를 써줘야 함</li></ul><hr><h3 id="npm-package"><a href="#npm-package" class="headerlink" title="[npm package]"></a>[npm package]</h3><h4 id="1-nodemon"><a href="#1-nodemon" class="headerlink" title="1. nodemon"></a>1. nodemon</h4><ul><li>npm install nodemon -g</li><li>전역으로 설치한것은 package json 으로 안들어옴<br>-&gt; package.json의 script영역에 “start(임의의명)”: “nodemon app(가동할 js파일)” 기입<br>-&gt; 이후 nodemon app으로 실행 시, 수정할때마다 서버를 재가동 해야하는 불편함 없이 사용가능</li></ul><h4 id="2-body-parser"><a href="#2-body-parser" class="headerlink" title="2. body-parser"></a>2. body-parser</h4><ul><li>npm install body-parser</li><li>클라이언트가 보낸 페이로드를 리퀘스트 객체에 바디 프로퍼티에 set해줌</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">//Static File Service</span></div><div class="line"><span class="comment">/* app.use(express.static('public')); */</span></div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</div><div class="line">app.use(bodyParser.json());</div><div class="line"></div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello World!'</span>));</div><div class="line">app.get(<span class="string">'/books/:id'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> bookId = req.params.id;</div><div class="line">  res.status(<span class="number">200</span>).send(bookId);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> payload = req.body;</div><div class="line">  <span class="built_in">console</span>.log(payload);</div><div class="line"></div><div class="line">  res.status(<span class="number">200</span>).send(payload);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, () =&gt;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>));</div></pre></td></tr></table></figure><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li><a href="http://d2.naver.com/helloworld/12864" target="_blank" rel="external">자바스크립트 표준을 위한 움직임 Common js, AMD</a> 을 읽고 모듈에 관한 전반적인 개요흐름을 이해하자</li><li>서버로 넘어가면서 실습방식으로 진행되다보니 실습하는데에 빠져있다가 끝나고나면 무엇을 했는지 휙휙 지나가버림! 꼭 다시한번 흐름을 보면서 이걸 왜 썼는지, 이 부분에서 어떤 것을 썼는지 확인해 봐야곘다</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;비동기식함수의 리턴을 할 수 없어서 생기는 &lt;strong&gt;콜백헬, 에러처리 불가
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="node.js" scheme="https://SunnySunhwa.github.io/categories/javascript/node-js/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/javascript/node-js/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/node-js/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171026 ES6 Destructuring</title>
    <link href="https://SunnySunhwa.github.io/2017/10/26/TIL-171026/"/>
    <id>https://SunnySunhwa.github.io/2017/10/26/TIL-171026/</id>
    <published>2017-10-25T21:35:38.000Z</published>
    <updated>2018-07-10T11:03:43.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h1><ul><li>객체디스트럭처링의 경우 가독성뿐만 아니라 편리함까지 (추천)</li><li>중첩해야할 일이 있다면 축약표현 말고, {키:밸류} 구조를 가져가야함</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">margin</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> left = <span class="number">1</span>, right = <span class="number">2</span>, top = <span class="number">3</span>, bottom = <span class="number">4</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 축약이 가능함</span></div><div class="line"><span class="comment">//&#123; left: 1, right: 2, top: 3, bottom: 4&#125; 의미와 같음</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; left, bottom &#125; = margin();</div><div class="line"><span class="built_in">console</span>.log(left, bottom); <span class="comment">// 1 4</span></div></pre></td></tr></table></figure><hr><h1 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h1><ul><li>문법적 설탕: 클래스는 ‘함수’ (생성자일떄 의미가 있음)</li><li>let, const와 같이 호이스팅 되지 않는 것처럼 동작</li><li>-&gt; 선언문 이전에 호출하면 Temporal Dead Zone에 걸려 에러 발생</li><li>클래스 바디 내부에는 메소드들만 옴 ( 컨스트럭터 (생성자함수 자신)역시 메소드)</li><li>-&gt; 따라서 프로퍼티는 반드시 컨스트럭터 내부에 선언</li><li><p>생성자함수로 쓸 경우 반드시 new연산자 붙임 (에러 발생)</p></li><li><p>클래스 내부 constructor는 생략가능 -&gt; 암묵적으로 빈객체 생성 -&gt; 클래스를 쓰는 의미가 없어짐</p></li><li>클래스 내부에 선언한 멤버변수는 public (정보은닉 최대약점 -&gt; typescript(접근제한자))</li><li>멤버변수명에 &#95;을 붙인 것은 public으로 취급하지 않도록 하라는 암묵적 개발자합의</li><li>-&gt; 이때는 getter, setter로 변수에 접근하기</li></ul><h2 id="멤버변수"><a href="#멤버변수" class="headerlink" title="멤버변수"></a>멤버변수</h2><ul><li>메소드를 제외한 데이터</li><li>객체리터럴 프로퍼티와 의미하는바가 같음</li><li>클래스에선 프로퍼티란 명칭대신 멤버변수라 사용</li><li>클래스바디에 멤버변수 선언X (오직 메소드만)</li><li>멤버변수는 constructor 내부에만 사용!<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name; <span class="comment">// OK</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(<span class="string">'Lee'</span>);</div><div class="line"><span class="built_in">console</span>.log(foo.name); <span class="comment">// Lee</span></div></pre></td></tr></table></figure></li></ul><h2 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter, setter"></a>getter, setter</h2><ul><li>get은 멤버변수의 값을 가져옴</li><li>get: 반환 값이 있으므로 리턴해줘야</li><li>set은 멤버변수의 값을 설정</li><li>set: 인자가 있어야 설정가능 -&gt; 파라미터가 있어야함</li><li>프로퍼티처럼 참조 (호출문에 () 사용X)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(arr = []) &#123;</div><div class="line">    <span class="keyword">this</span>._arr = arr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// getter: firstElem은 멤버 변수 이름과 같이 사용된다.</span></div><div class="line">  <span class="comment">// getter는 반드시 무언가를 반환하여야 한다.</span></div><div class="line">  get firstElem() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._arr.length ? <span class="keyword">this</span>._arr[<span class="number">0</span>] : <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// setter: firstElem은 멤버 변수 이름과 같이 사용된다.</span></div><div class="line">  <span class="comment">//설정 -&gt; 즉, 인자가 있어야 (파라미터)</span></div><div class="line">  set firstElem(elem) &#123;</div><div class="line">    <span class="keyword">this</span>._arr = [elem, ...this._arr];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo([<span class="number">1</span>, <span class="number">2</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 멤버 변수 firstElem에 값을 할당하면 setter가 호출된다.</span></div><div class="line">foo.firstElem = <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo.firstElem); <span class="comment">// 100</span></div></pre></td></tr></table></figure><h2 id="정적-메소드"><a href="#정적-메소드" class="headerlink" title="정적 메소드"></a>정적 메소드</h2><ul><li>정적메소드가 없다면 무조건 객체를 생성(new)해야만 메소드를 사용할 수 있게됨 (생성자함수명.prototype.method)</li><li>-&gt; 내부데이터를 변경하지 않는 이상 정적 메소드 사용하는 것이 편리</li></ul><h2 id="클래스-상속"><a href="#클래스-상속" class="headerlink" title="클래스 상속"></a>클래스 상속</h2><h3 id="1-Extends"><a href="#1-Extends" class="headerlink" title="1. Extends"></a>1. Extends</h3><ul><li>사용: class 자식 extends 부모</li><li>부모클래스를 확장하여 자식클래스를 만듦</li><li>즉, 자식클래스의 prototype은 부모클래스</li></ul><p>![클래스 프로토타입 체이닝] (<a href="http://poiemaweb.com/img/class-prototype-relation.png" target="_blank" rel="external">http://poiemaweb.com/img/class-prototype-relation.png</a>)</p><ul><li>class 상속 선언만 했다고 인스턴스가 생기진 않음</li><li>-&gt; 자식 class로 만들어진 인스턴스는 상속관계를 유지하려면 부모class로 만들어진 인스턴스가 있어야 함 (<strong>super</strong>)</li></ul><h5 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h5><ol><li>자식클래스 컨스트럭터 선언시 사용</li></ol><ul><li>부모클래스의 컨스트럭터(멤버변수)를 호출 -&gt; 생성될 인스턴스 상속관계 유지(this)</li><li>super를 컨스트럭터 내 최상단 위에 써줘야, 하단의 this가 바인딩됨</li><li>this가 먼저나오면 부모 인스턴스가 생성되지 않은 상태이기 때문에 바인딩 안됨</li><li>this를 사용하고싶다면, 컨스트럭터 선언시 상단에 사용해야함</li></ul><ol><li>자식클래스 메소드에 사용</li></ol><ul><li>부모클래스를 가리킴</li></ul><hr><p><strong>[배경]</strong><br>자바스크립트는 파일을 쪼개서 html파일에 넣었다해도, alert 1, 2, 3 등 실행되는데 순서가 있을 순 있으나, 스코프는 쪼개지지 않는다. 즉, 3개의 파일일지라도 1개의 스코프를 갖게됨   -&gt; 자바스크립트는 순서가 중요하며, 전역스코프를 피해야 함. <em>그렇다면 파일별 스코프를 갖게 할 순 없을까?</em></p><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><ul><li>파일단위 스코프를 가짐</li><li>ES6에서 import / export키워드로 모듈 지원 -&gt; 모든 브라우저가 지원X -&gt; Webpack &amp; Barbel 사용</li><li>Barbel : ES5로 트랜스파일링</li><li>Webpack : 바벨 구동 및 모듈파일 번들링</li></ul><hr><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><ul><li>비동기식함수의 리턴을 할 수 없어서 생기는 <strong>콜백헬, 에러처리 불가능 문제를 해결</strong>하기 위한 하나의 방법</li><li>Promise를 사용하면 요청을 취소할수 없다는 단점이 있음</li><li>promise기능의 최신 -&gt; RxJs (Angular)</li><li>promise 자체도 ‘값’을 반환할 순 없지만, ‘약속’을 반환</li><li>후속코드에 서버가 ‘약속’을 지켰을 경우(fulfilled)의 실행, 못 지켰을 경우(rejected)의 실행을 지정</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><p>백지상태에서의 todo list 연습을 해봐야겠다. 부분별로 ES6로 변환 해 나가기 시작하면서 혼란스러워지는 느낌. 바닐라로 주말동안 연습해봐야될듯. 그래야 스무스하게 ES6를 흡수할 수 있을 듯.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Destructuring&quot;&gt;&lt;a href=&quot;#Destructuring&quot; class=&quot;headerlink&quot; title=&quot;Destructuring&quot;&gt;&lt;/a&gt;Destructuring&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;객체디스트럭처링의 경우 가독성뿐만 아
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171024 ECMAScript6 - let, const</title>
    <link href="https://SunnySunhwa.github.io/2017/10/24/TIL-171024/"/>
    <id>https://SunnySunhwa.github.io/2017/10/24/TIL-171024/</id>
    <published>2017-10-23T22:18:54.000Z</published>
    <updated>2018-07-10T11:03:34.673Z</updated>
    
    <content type="html"><![CDATA[<p>ES6의 경우, ie 11기준 11%만 지원하기 때문에 ES6 -&gt; ES5로 트랜스파일링 하는 툴이 필요 (바벨)</p><h1 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h1><ul><li>코드 블럭 (block level scope)</li><li>중복선언 불가</li><li>전역변수 let으로 사용해도 전역객체의 프로퍼티가 아님</li><li>호이스팅이 되지만, 호스팅이 안되는것처럼 보임 (일시적 사각지대)</li><li>var는 선언/초기화단계 -&gt; 할당단계가 이루어지지만, let은 변수선언문에 도달했을때 초기화가 되기 때문</li><li>즉, let은 선언 이전에 호출하면 레퍼런스에러 발생</li><li>클로저: var는 함수 내에서만 사용했지만, let은 블럭단위기 때문에 for문 내에서도 클로저 사용 가능</li><li>즉, 클로저를 위함 함수사용 없이 클로저로서 사용 가능<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"></div><div class="line"><span class="comment">// 함수의 배열을 생성한다</span></div><div class="line"><span class="comment">// i는 for loop에서만 유효한 지역변수이면서 자유변수이다</span></div><div class="line"><span class="comment">// var의 경우에는 function으로 한번 감싸주는 동작이 필요했었음.</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 배열에서 함수를 꺼내어 호출한다</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</div><div class="line">  funcs[j]();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><h1 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h1><ul><li>const는 상수(변하지 않는 값)를 위해 사용 (eg. 에러메세지)</li><li>반드시 선언과 동시에 초기화가 이뤄져야함</li><li>따라서, 초기화 이후 재할당 X (let은 초기화 이후 다른값으로 재할당 가능)</li><li>단, 프로퍼티의 값은 재할당 가능</li><li>객체 타입 변수 선언에는 const를 사용하는 것이 좋음<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 객체에 대한 참조는 변경될 필요가 없음(즉, 재할당 필요X)</div><div class="line">- const를 사용한다 하더라도 객체의 프로퍼티를 변경할 수 있음</div><div class="line">- 자바스크립트의 값은 대부분 객체(primitive형 변수를 제외한 모든 값은 객체) -&gt; 대부분의 경우 const를 사용하게 됨</div></pre></td></tr></table></figure></li></ul><h2 id="var-vs-let-vs-const"><a href="#var-vs-let-vs-const" class="headerlink" title="var vs let vs const"></a>var vs let vs const</h2><ul><li>ES6를 사용한다면 var 키워드는 사용 X</li><li>변경이 발생하지 않는(재할당이 필요없는) primitive형 변수와 객체형 변수에는 const</li><li>재할당이 필요한 primitive형 변수에는 let</li></ul><hr><h1 id="템플릿-리터럴"><a href="#템플릿-리터럴" class="headerlink" title="템플릿 리터럴"></a>템플릿 리터럴</h1><ul><li>백틱(backtick)     &#96;문자 사용</li><li>줄바꿈, white space 그대로 적용</li><li>템플릿 대입문 <strong>${}</strong>: 문자열, javascript표현식 사용 가능</li></ul><hr><h1 id="Arrow-function"><a href="#Arrow-function" class="headerlink" title="Arrow function"></a>Arrow function</h1><ul><li>익명함수로만 사용할 수 있음 (호출 시 함수표현식 사용)</li><li>함수몸체가 한줄의 표현식이라면 중괄호 생략 가능 (자동으로 리턴)</li><li><p>객체를 반환할 때에는 소괄호 사용</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> pow = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</div><div class="line"><span class="built_in">console</span>.log(pow(<span class="number">10</span>)); <span class="comment">// 100</span></div></pre></td></tr></table></figure></li><li><p>Arrow function은 언제나 자신을 포함하는 외부 scope에서 this를 계승</p></li><li>즉, -&gt; 메소드 내에선 일반 함수를 쓰도록</li><li>생성자함수엔 사용 X (프로토타입 프로퍼티가 없으므로)</li><li>보통 콜백함수에 사용하는 것을 추천 (addEventLister제외)</li><li>addEventListener의 콜백 함수는 function 키워드 사용 추천 (arrow function 사용 시, this가 상위 컨텍스트를 가리키게 되므로)</li><li>Rest Parameter의 사용성으로 argument 프로퍼티가 X</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  name: <span class="string">'Lee'</span>,</div><div class="line">  sayHi: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.sayHi(); <span class="comment">// Hi undefined</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  name: <span class="string">'Lee'</span>,</div><div class="line">  sayHi() &#123; <span class="comment">// === sayHi: function() &#123;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.sayHi(); <span class="comment">// Hi Lee</span></div></pre></td></tr></table></figure><hr><h1 id="Extended-Parameter-Handling"><a href="#Extended-Parameter-Handling" class="headerlink" title="Extended Parameter Handling"></a>Extended Parameter Handling</h1><h3 id="1-기본-파라미터-초기값"><a href="#1-기본-파라미터-초기값" class="headerlink" title="1. 기본 파라미터 초기값"></a>1. 기본 파라미터 초기값</h3><p>파라미터에 초기값을 설정하여 방어코드가 필요X<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  x = x || <span class="number">0</span>;</div><div class="line">  y = y || <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// x, y에 인수가 할당되지 않으면 초기값 0이 할당된다.</span></div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(plus());     <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(plus(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p><h3 id="2-Rest-parameter"><a href="#2-Rest-parameter" class="headerlink" title="2. Rest parameter"></a>2. Rest parameter</h3><ul><li>스프레드 연산자를 사용하여 매개변수를 선언한 것</li><li>인수를 함수 내부에서 배열로 전달받을 수 있음</li><li>argument(유사배열 반환)없이도 인자에 리스트를 전달, 배열로 반환</li><li>Rest 파라미터는 반드시 마지막 파라미터여야 함</li></ul><h3 id="3-Spread-연산자"><a href="#3-Spread-연산자" class="headerlink" title="3. Spread 연산자"></a>3. Spread 연산자</h3><ul><li>연산자의 대상 이터러블을 개별 요소로 분리.</li><li>eg) 배열의 요소를 개별적인 인자로서 매개변수에 전달하고싶을때 (ES5에선 apply를 써야했지만 spread로 가능)<h5 id="참고-이터러블"><a href="#참고-이터러블" class="headerlink" title="[참고] 이터러블"></a>[참고] 이터러블</h5>map, set, node-list, string, array과 같이 key가 있고, 순서를 가진 채 순회할 수 있는 객체</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// -&gt; 1, 2, 3</span></div><div class="line"></div><div class="line"><span class="comment">// 문자열은 이터러블이다.</span></div><div class="line"><span class="comment">// String객체 -&gt; 유사배열 -&gt; 순회 가능</span></div><div class="line"><span class="built_in">console</span>.log(...<span class="string">'Helllo'</span>);  <span class="comment">// H e l l l o</span></div></pre></td></tr></table></figure><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><p>지난 주 Todolist 만들기 2가지 버전 다들 어렵다는 말이 많았나보다 :( 처음으로 html에 적용하기도 했고, 단편적인 알고리즘 문제만 풀다보니 복합적인 연계관계가 무척 어렵게 느껴졌다. 오늘 단락 단락 풀어본 문제로 ES6도 적용해보면서 리마인드하자 (ES5배운지 얼마되지 않은것 같은데 벌써 5만 눈에 익어서 6적용하기가 은근 힘듬 ㅠㅠㅠ)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6의 경우, ie 11기준 11%만 지원하기 때문에 ES6 -&amp;gt; ES5로 트랜스파일링 하는 툴이 필요 (바벨)&lt;/p&gt;
&lt;h1 id=&quot;Let&quot;&gt;&lt;a href=&quot;#Let&quot; class=&quot;headerlink&quot; title=&quot;Let&quot;&gt;&lt;/a&gt;Let
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171023 SASS, Javascript test</title>
    <link href="https://SunnySunhwa.github.io/2017/10/23/TIL-171023/"/>
    <id>https://SunnySunhwa.github.io/2017/10/23/TIL-171023/</id>
    <published>2017-10-22T23:06:15.000Z</published>
    <updated>2018-07-10T11:03:23.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SASS-문법-특징"><a href="#SASS-문법-특징" class="headerlink" title="SASS 문법 특징"></a>SASS 문법 특징</h2><ul><li>숫자 연산을 위해선 변수에 담아야만 숫자 연산이 가능</li><li>기본적인 연산자는 문자열로 취급함 (e + -resize —&gt; e-resize)</li></ul><h3 id="import-partial"><a href="#import-partial" class="headerlink" title="import partial"></a>import partial</h3><ul><li>선 compile 후 merge (x)</li><li>선 merge 후 compile위해 &#95;를 사용</li><li>partial 파일은  &#95;header.scss, &#95;sidebar.scss, &#95;footer.scss 형식으로해서 merge파일(style.css)에는 일반적 형식 (@import “header”)로 임포트함</li></ul><h3 id="default"><a href="#default" class="headerlink" title="!default;"></a>!default;</h3><ul><li>css의 important와 달리, 초기화 값을 설정한 것</li><li>즉, 해당 문구 이전에 설정해준 값이 없다면 해당 문구를 초기화 값으로 쓰라는 의미</li></ul><h2 id="SASS-적용하기"><a href="#SASS-적용하기" class="headerlink" title="SASS 적용하기"></a>SASS 적용하기</h2><p>아래 3가지 사항부터 먼저 시작해서 차츰 늘려나가는 방식으로 공부하기</p><ol><li>변수 (if/for)</li><li>Partial</li><li>Nesting  </li></ol><h4 id="참고"><a href="#참고" class="headerlink" title="[참고]*"></a>[참고]*</h4><ul><li>개발할때는 src파일에 분류하여 넣어놓고 이를 컴파일해서 배포할 파일은 dist와 같은 폴더에 분류하여 정리</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><p>이번 시험에서도 느껴지는 코딩연습!! 특히 19번의 경우에는, todolist 실습 선생님 답안을 해석해보고 익혀야될듯. 나는 내가 생각할 수 있는 범위 안에서 코드를 작성했지만, 이후의<br>문제와 가독성있는 코딩을 위해 어떤 방식으로 작성되어있는지 확인하면서 따라해봐야겠다.</p><hr><h1 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h1><h4 id="1-실행-컨텍스트란-무엇인가-5점"><a href="#1-실행-컨텍스트란-무엇인가-5점" class="headerlink" title="1. 실행 컨텍스트란 무엇인가? 5점"></a>1. 실행 컨텍스트란 무엇인가? 5점</h4><p>ECMAScript 스펙에 따르면 실행 컨텍스트를 실행 가능한 코드를 형상화하고 구분하는 추상적인 개념이라고 정의한다. 좀 더 쉽게 말하자면 실행 컨텍스트는 실행 가능한 코드가 실행되는 환경 이라고 말할수 있다.</p><h4 id="2-Variable-Object-VO-변수객체-는-무엇인가-5점"><a href="#2-Variable-Object-VO-변수객체-는-무엇인가-5점" class="headerlink" title="2. Variable Object (VO / 변수객체)는 무엇인가? 5점"></a>2. Variable Object (VO / 변수객체)는 무엇인가? 5점</h4><p>실행 컨텍스트가 생성되면 자바스크립트 엔진은 실행에 필요한 여러 정보들을 담을 객체를 생성한다. 이를 Variable Object(VO / 변수 객체)라고 한다. Variable Object는 코드가 실행될 때 엔진에 의해 참조되며 코드에서는 접근할 수 없다.</p><p>Variable Object는 아래의 정보를 담는 객체이다.</p><ul><li>변수</li><li>매개변수(parameter)와 인수 정보(arguments)</li><li>함수 선언(함수 표현식은 제외)</li></ul><h4 id="3-클로저-closure-의-개념에-대해-설명하라-5점"><a href="#3-클로저-closure-의-개념에-대해-설명하라-5점" class="headerlink" title="3. 클로저(closure)의 개념에 대해 설명하라 5점"></a>3. 클로저(closure)의 개념에 대해 설명하라 5점</h4><p>클로저는 내부함수가 참조하는 외부함수의 지역변수가 외부함수에 의해 내부함수가 반환된 이후에도 life-cycle이 유지되는 것을 의미한다.</p><h4 id="4-다음-중-전역-객체의-프로퍼티-Global-property-가-아닌-것은-5점"><a href="#4-다음-중-전역-객체의-프로퍼티-Global-property-가-아닌-것은-5점" class="headerlink" title="4. 다음 중 전역 객체의 프로퍼티(Global property)가 아닌 것은? 5점"></a>4. 다음 중 전역 객체의 프로퍼티(Global property)가 아닌 것은? 5점</h4><p>① Infinity<br>② NaN<br>③ undefined<br><strong>④ length</strong></p><h4 id="5-var-numObj-12345-6789-일-때-numObj-toFixed-의-결과는-5점"><a href="#5-var-numObj-12345-6789-일-때-numObj-toFixed-의-결과는-5점" class="headerlink" title="5. var numObj = 12345.6789;일 때, numObj.toFixed()의 결과는? 5점"></a>5. var numObj = 12345.6789;일 때, numObj.toFixed()의 결과는? 5점</h4><p>12346</p><h4 id="6-var-arr-1-2-3-일때-Math-max를-사용하여-가장-큰-요소를-구하라-5점"><a href="#6-var-arr-1-2-3-일때-Math-max를-사용하여-가장-큰-요소를-구하라-5점" class="headerlink" title="6. var arr = [1, 2, 3];일때, Math.max를 사용하여 가장 큰 요소를 구하라 5점"></a>6. var arr = [1, 2, 3];일때, Math.max를 사용하여 가장 큰 요소를 구하라 5점</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr); <span class="comment">// 3</span></div></pre></td></tr></table></figure><h4 id="7-var-str-‘How-are-you-doing-’-일-때-console-log-str-split-‘-‘-의-출력-결과는-5점"><a href="#7-var-str-‘How-are-you-doing-’-일-때-console-log-str-split-‘-‘-의-출력-결과는-5점" class="headerlink" title="7. var str = ‘How are you doing?’;일 때, console.log(str.split(‘ ‘));의 출력 결과는? 5점"></a>7. var str = ‘How are you doing?’;일 때, console.log(str.split(‘ ‘));의 출력 결과는? 5점</h4><p>[ ‘How’, ‘are’, ‘you’, ‘doing?’ ]</p><h4 id="8-정규표현식의-플래그-i는-무엇을-의미하는가-5점"><a href="#8-정규표현식의-플래그-i는-무엇을-의미하는가-5점" class="headerlink" title="8. 정규표현식의 플래그 i는 무엇을 의미하는가? 5점"></a>8. 정규표현식의 플래그 i는 무엇을 의미하는가? 5점</h4><p>대소문자를 구별하지 않고 검색한다.</p><h4 id="9-아래의-실행-결과는-5점"><a href="#9-아래의-실행-결과는-5점" class="headerlink" title="9. 아래의 실행 결과는? 5점"></a>9. 아래의 실행 결과는? 5점</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>];</div><div class="line"><span class="keyword">var</span> b = [<span class="string">'x'</span>, <span class="string">'y'</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = a.concat(b);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(c);</div></pre></td></tr></table></figure><p>[ ‘a’, ‘b’, ‘x’, ‘y’ ]</p><p>####10. 아래의 실행 결과는? 5점<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</div><div class="line"><span class="built_in">console</span>.log(numbers.map(<span class="built_in">Math</span>.sqrt));</div></pre></td></tr></table></figure></p><p>[ 1, 2, 3 ]</p><p>####11. 배열 [1, 2, 3, 4, 5]에서 홀수만을 필터링하여 그 결과를 배열로 반환하는 코드를 작성하라. 5점<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'['</span> + index + <span class="string">'] = '</span> + item);</div><div class="line"><span class="keyword">return</span> item % <span class="number">2</span>; <span class="comment">// 홀수만을 필터링한다 (1은 true로 평가된다)</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 1, 3, 5 ]</span></div></pre></td></tr></table></figure></p><p>####12. DOM이란 무엇인가? 5점<br>브라우저의 렌더링 엔진은 웹 문서를 로드한 후, 파싱하여 웹 문서를 브라우저가 이해할 수 있는 구조로 구성하여 메모리에 적재하는데 이를 DOM이라 한다. 즉 모든 요소와 요소의 어트리뷰트, 텍스트를 각각의 객체로 만들고 이들 객체를 부자 관계를 표현할 수 있는 트리 구조로 구성한 것이 DOM이다. 이 DOM은 자바스크립트를 통해 동적으로 변경할 수 있으며 변경된 DOM은 렌더링에 반영된다.</p><p>####13. 동기식 처리와 비동기식 처리는 무엇이 다른가? 5점<br>동기식 처리 모델(Synchronous processing model)은 직렬적으로 작업을 수행한다. 즉 작업은 순차적으로 실행되며 어떤 작업이 수행 중이면 다음 작업은 대기하게 된다.</p><p>비동기식 처리 모델(Asynchronous processing model or Non-Blocking processing model)은 병렬적으로 작업을 수행한다. 즉 작업이 종료되지 않은 상태라도 대기하지 않고 다음 작업을 실행한다는 의미이다. 예를 들어 서버에서 데이터를 가져와 화면에 표시하는 작업을 수행할 경우 서버에 데이터를 요청한 이후 서버로부터 데이터가 응답될 때까지 대기하지 않고(Non-Blocking) 즉시 다음 작업을 수행한다. 이후 서버로부터 데이터가 응답되면 이벤트가 발생되고 이벤트 핸들러가 데이터를 가지고 수행할 작업을 계속하여 수행한다.</p><p>자바스크립트의 대부분의 DOM 이벤트와 Timer 함수(setTimeout, setInterval), Ajax 요청은 비동기적으로 동작한다.</p><p>####14. DOM Level 2 Event Listener의 경우, 이벤트 핸들러 내부의 this는 무엇을 가리키는가? 5점<br>this는 이벤트 리스너에 바인딩된 요소(currentTarget)를 가리킨다. 이것은 이벤트 객체의 currentTarget 프로퍼티와 같다.</p><p>####15. 계층적 구조에 포함되어 있는 HTML 요소에 이벤트가 발생할 경우 연쇄적 반응이 일어난다. 즉 이벤트가 전파(Event Propagation)되는데 전파 방향에 따라 (1)과 (2)으로 구분할 수 있다. (1)과 (2)는 무엇인가? 5점<br>버블링, 캡처링</p><p>####16. Event 객체의 프로퍼티 중, 이벤트를 발생시킨 요소를 가리키는 것은 무엇인가? 5점<br>① Event.key<br>② Event.currentTarget<br>③ Event.value<br><strong>④ Event.target</strong></p><p>####17. Ajax는 무엇인가? 5점<br>Ajax(Asynchronous JavaScript and XML)는 자바스크립트를 이용해서 비동기적(Asynchronous)으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식을 의미한다.</p><p>####18. HTTP Method 중 대표적인 4가지를 열거하라. 5점<br>GET, POST, PUT, DELETE</p><p>####19. 아래의 todos에 새로운 todo를 추가하려 한다. 이때 todo의 id로 사용할 현재 todos의 id 중 최대값보다 1 큰 값을 반환하는 코드를 작성하라. 10점</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> todos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">'HTML'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">'CSS'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">'Javascript'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">//답</span></div><div class="line"><span class="keyword">var</span> nextId = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, todos.map(<span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> todo.id;</div><div class="line">&#125;)) + <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(nextId);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SASS-문법-특징&quot;&gt;&lt;a href=&quot;#SASS-문법-특징&quot; class=&quot;headerlink&quot; title=&quot;SASS 문법 특징&quot;&gt;&lt;/a&gt;SASS 문법 특징&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;숫자 연산을 위해선 변수에 담아야만 숫자 연산이 가능&lt;/l
      
    
    </summary>
    
      <category term="SASS" scheme="https://SunnySunhwa.github.io/categories/SASS/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/SASS/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/SASS/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171018 git, fork한 repo에서 특정 폴더만 갱신 &#39;sparse checkout&#39;</title>
    <link href="https://SunnySunhwa.github.io/2017/10/18/TIL-171018/"/>
    <id>https://SunnySunhwa.github.io/2017/10/18/TIL-171018/</id>
    <published>2017-10-17T22:32:06.000Z</published>
    <updated>2018-07-10T11:03:11.757Z</updated>
    
    <content type="html"><![CDATA[<h4 id="fork를-떠온-repo-원본-중-내가-컨트리뷰트한-폴더-외-특정-폴더도-pull할때마다-갱신되게-하기"><a href="#fork를-떠온-repo-원본-중-내가-컨트리뷰트한-폴더-외-특정-폴더도-pull할때마다-갱신되게-하기" class="headerlink" title="fork를 떠온 repo(원본)중, 내가 컨트리뷰트한 폴더 외, 특정 폴더도 pull할때마다 갱신되게 하기"></a>fork를 떠온 repo(원본)중, 내가 컨트리뷰트한 폴더 외, 특정 폴더도 pull할때마다 갱신되게 하기</h4><p><strong>sparce checkout</strong><br>기본적으로 내가 포크를 뜬 레포 (포크레포)에는 remote가 origin master 하나만 설정되어 있고,<br>포크 떠온 레포(원본레포)에는 내가 컨트리뷰트한 폴더(내가 포크 레포에 생성한 폴더)외, 다른 폴더들이 많이 있다고 할 시,<br>포크 레포를 pull할때마다 원본레포의 특정 폴더만 포크레포의 폴더들과 함께 계속해서 내 로컬에 갱신되게 하는 방법이다.</p><ol><li><p>‘sparse checkout’기능은 깃의 기본 기능이지만 비활성화 되어 있어 활성화 시켜주어야 함</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//포크 레포의 로컬에서 진행</div><div class="line">$ git config core.sparseCheckout true</div></pre></td></tr></table></figure></li><li><p>원본 레포의 리모트 설정</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//origin 외, 주소가 있는지 확인</div><div class="line">$ git remote -v </div><div class="line">//없다면, 원본 레포 리모트 &apos;upstream&apos;이라는 별칭으로 추가</div><div class="line">$ git remote upstream http://원본레포-경로주소</div></pre></td></tr></table></figure></li><li><p>‘sparse checkout’은 포컬 레포의 로컬에서 .git/info/ 에 위치해야함. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//.git은 숨김파일 -&gt; echo명령어로</div><div class="line">$ echo &quot;컨트리뷰트-폴더명&quot; &gt;&gt; .git/info/sparse-checkout</div><div class="line">$ echo &quot;원본레포-특정폴더명&quot; &gt;&gt; .git/info/sparse-checkout</div><div class="line"></div><div class="line"></div><div class="line">// 해당 파일에 폴더명이 들어가있는지 들어가서 확인해보기</div><div class="line">//sparce-checkout에는 내가 입력한 폴더명이 입력되어 있어야함</div><div class="line">$ code .</div></pre></td></tr></table></figure></li><li><p>pull - 원본 레포의 폴더들이 내 로컬에 당겨짐<br><strong>주의</strong><br>원본레포에 있는 사항이 로컬에 저장되므로, 내가 컨트리뷰트한 폴더의 최신본이<br>아직 원본레포에 반영이 되어 있지 않는 경우를 조심해야함.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull upstream master</div></pre></td></tr></table></figure></li></ol><h5 id="참고-echo"><a href="#참고-echo" class="headerlink" title="[참고] echo"></a>[참고] echo</h5><ul><li>쉘 명령어 ‘echo’는 “<em>*</em>“ 따옴표 안의 문자열을 터미널에 찍어줌.</li><li>‘&gt;&gt;’를 통해 이후에 들어오는 경로주소의 파일에 문자열을 입력할 수 있음.</li><li>경로주소에 해당 파일이 없을 시, 파일을 샏성 후 문자열을 입력</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;fork를-떠온-repo-원본-중-내가-컨트리뷰트한-폴더-외-특정-폴더도-pull할때마다-갱신되게-하기&quot;&gt;&lt;a href=&quot;#fork를-떠온-repo-원본-중-내가-컨트리뷰트한-폴더-외-특정-폴더도-pull할때마다-갱신되게-하기&quot; clas
      
    
    </summary>
    
      <category term="git" scheme="https://SunnySunhwa.github.io/categories/git/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/git/dev-others/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/git/dev-others/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171017 Ajax</title>
    <link href="https://SunnySunhwa.github.io/2017/10/17/TIL-171017/"/>
    <id>https://SunnySunhwa.github.io/2017/10/17/TIL-171017/</id>
    <published>2017-10-16T22:55:32.000Z</published>
    <updated>2018-07-10T11:02:58.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>자바스크립트를 이용해서 <strong>비동기적</strong> 으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식</p><h2 id="Jason"><a href="#Jason" class="headerlink" title="Jason"></a>Jason</h2><ul><li>Ajax를 위한 데이터형식으로 많이 사용</li><li>객체리터럴과 비슷하나, 큰따옴표로 둘러쌓여야함</li><li>주석처리가 안됨 (에러발생)</li><li>객체같아보이지만, ‘문자열’로 데이터를 전달 (추후 객체화 필요)</li><li>JSON.stringify(대상객체): 서버에 보낼때, 대상객체를 문자열로 변환</li><li>JSON.parse(배열객체): 서버에서 온 문자열 데이터를 객체화할때</li></ul><h4 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h4><ul><li>개발자 편의상, 보낼JSON 데이터가 제대로 됐는지 확인하고플때 가독성 좋게<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strFilteredObject = <span class="built_in">JSON</span>.stringify(o, filter, <span class="number">2</span>);</div><div class="line"><span class="comment">// 2번쨰 인자: 필터를 진행할 함수</span></div><div class="line"><span class="comment">// 3번째 인자: 2칸만큼 인덴트 해서 찍기</span></div></pre></td></tr></table></figure></li></ul><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><ul><li>Ajax 요청을 생성하고 전송할때 브라우저가 사용하는 객체</li><li>XMLHttpRequest.open(method, url, async)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// XMLHttpRequest 객체의 생성</span></div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"><span class="comment">// 비동기 방식으로 Request를 오픈한다</span></div><div class="line"><span class="comment">// 같은 서버에 있기때문에 URL 생략후 path만 기입 -&gt; 보낼 준비.</span></div><div class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/users'</span>);</div><div class="line"><span class="comment">// Request를 전송.</span></div><div class="line">xhr.send();</div></pre></td></tr></table></figure><h3 id="CRUD-HTTP-method-status"><a href="#CRUD-HTTP-method-status" class="headerlink" title="CRUD : HTTP method, status"></a>CRUD : HTTP method, status</h3><ol><li>R(etrieve) : GET - Query string으로 넘어옴 (보안취약), 200</li><li>C(reate) : POST - 생성 (페이로드 있어야 (send메세지에 인자), 201</li><li>U(pdate) : PUT/PATCH - 갱신 (페이로드 있어야 (send메세지 인자), 200</li><li>D(delete) : DELETE, 200</li></ol><h4 id="참고-1"><a href="#참고-1" class="headerlink" title="[참고]*"></a>[참고]*</h4><p>REST API 프로그램: <a href="https://www.getpostman.com/" target="_blank" rel="external">https://www.getpostman.com/</a></p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><ul><li>웹API를 사용할때 (다른 웹서버에 접근)</li><li>두개의 스크립트로 이뤄짐: 상) API지정 함수명을 가진 함수, 하) src=”jsonp.js”</li><li>즉, 함수를 지정하고 호출(이미 데이터를 담아)하는 형식처럼</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>이전까진 포스팅만 보면서 예습 복습을 진행했는데, 어제 잘 이해 안되는 부분을 검색해서 다른 강좌도 몇개 듣고 하니 오늘 수업에서 훨씬 이해가 빨랐음! 시간이 없다는 생각에 너무 얽매여 포스팅만 보는 선에서 예습을 끝냈는데, 많은 양을 포기하더라도 이해안되는 부분을 파고들어 더 찾아보고 여러 표현으로 서술된 것을 읽는게 빠른 이해에 더 도움이 되는듯!</li><li>오늘 정리한 부분은 실습하며 더욱 체감됐기에, 정리된 부분만을 읽고 더듬기엔 부족함이 분명. 다른 예제들도 따라해봐야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;p&gt;자바스크립트를 이용해서 &lt;strong&gt;비동기적&lt;/strong&gt; 으로 서버와 브라우저가 데이터를 교환할 수 있는 
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/dev-others/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_DOM의 접근과 수정, Event</title>
    <link href="https://SunnySunhwa.github.io/2017/10/16/TIL_171016/"/>
    <id>https://SunnySunhwa.github.io/2017/10/16/TIL_171016/</id>
    <published>2017-10-16T04:22:01.000Z</published>
    <updated>2018-07-10T11:00:17.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="1-Dom-tree"><a href="#1-Dom-tree" class="headerlink" title="1. Dom tree"></a>1. Dom tree</h2><ol><li>문서노드 (Document Node)</li><li>요소노드 (Element Node)</li><li>속성노드 (Attribute Node)</li><li>텍스트노드 (Text Node)</li></ol><h2 id="2-DOM-Query-접근"><a href="#2-DOM-Query-접근" class="headerlink" title="2. DOM Query (접근)"></a>2. DOM Query (접근)</h2><ul><li>실무에서는 잘 사용X -&gt; but, 제이쿼리/앵귤러등을 활용하는 기본원리는 같음 (기본 이론)</li><li>여러개를 가지고 올때는 ‘유사배열 객체’로 반환</li><li>따라서 여러개 중, 특정 하나를 가지고 오고 싶다면 [0] 인덱스값  설정해주어야</li><li>선택하여 어트리뷰트를 변경할 수는 있으나, 아예 마크업되지 않은 어트리뷰트를 추가할순 X –&gt; setAttribute로 가능<h3 id="1-하나-선택"><a href="#1-하나-선택" class="headerlink" title="1) 하나 선택"></a>1) 하나 선택</h3></li><li>document.getElementById(id)</li><li>document.querySelector(cssSelector)</li></ul><h3 id="2-여러개-선택"><a href="#2-여러개-선택" class="headerlink" title="2) 여러개 선택"></a>2) 여러개 선택</h3><ul><li>document.getElementsByClassName(class)</li><li>document.getElementsByTagName(tagName)</li><li>document.querySelectorAll(selector) : <strong>Non-live*</strong></li></ul><h2 id="3-DOM-Traversing-탐색"><a href="#3-DOM-Traversing-탐색" class="headerlink" title="3. DOM Traversing (탐색)"></a>3. DOM Traversing (탐색)</h2><ul><li>parentNode: 부모 노드 탐색 (자식까지 포함)</li><li>firstChild / lastChild: 자식 노드 탐색</li><li>previousSibling / nextSibling: 형제 노드 탐색</li></ul><p><strong>주의</strong></p><ul><li>단, 코드가독성을 위한 줄바꿈, 인덴트까지 자식으로 여김</li><li>1) jQuery: .prev()와 jQuery: .next()를 사용</li><li>2) 자식 노드가 있는지 (hasChildNodes)확인 후 적용</li></ul><h4 id="참고-JQeury를-사용하는-이유"><a href="#참고-JQeury를-사용하는-이유" class="headerlink" title="[참고] JQeury를 사용하는 이유*"></a>[참고] JQeury를 사용하는 이유*</h4><ul><li>Cross browsing</li><li>Live 객체에 대한 고민 필요X -&gt; 사용 편의성</li><li>서로가 긴밀하게 연결되어 있어 Html,CSS가 바뀌는순간 다 로직을 변경해줘야한다는 불편함</li></ul><h2 id="4-DOM-Manipulation-조작"><a href="#4-DOM-Manipulation-조작" class="headerlink" title="4. DOM Manipulation (조작)"></a>4. DOM Manipulation (조작)</h2><h3 id="1-텍스트-노드-조작"><a href="#1-텍스트-노드-조작" class="headerlink" title="1) 텍스트 노드 조작"></a>1) 텍스트 노드 조작</h3><ul><li>nodeValue : 텍스트노드의 유일한 프로퍼티</li></ul><h3 id="2-어트리뷰트-노드-조작"><a href="#2-어트리뷰트-노드-조작" class="headerlink" title="2) 어트리뷰트 노드 조작"></a>2) 어트리뷰트 노드 조작</h3><ol><li><p>className<br>-어트리뷰트가 존재하지 않을 시, 생성하고 지정된 값 설정.<br>-여러개일 경우, 공백으로 구분된 문자열 반환 (split(‘’)사용 배열 변경하여 사용)</p></li><li><p>hasAttribute(attribute)</p></li><li>getAttribute(attribute) -&gt; 문자열 반환</li><li>setAttribute(attribute, value) -&gt; 어트리뷰트와 값을 설정</li></ol><h4 id="참고"><a href="#참고" class="headerlink" title="[참고]*"></a>[참고]*</h4><p>HTML의 attribute가 객체화 됐을 떄 property로 모두 1:1 매핑되는 것은 아님.<br>이런 때에는 getAttribute(attribute)하면 attribute의 ‘값’을 반환</p><h3 id="3-HTML-콘텐츠-조작"><a href="#3-HTML-콘텐츠-조작" class="headerlink" title="3) HTML 콘텐츠 조작"></a>3) HTML 콘텐츠 조작</h3><p><strong>콘텐츠</strong><br>:&lt;오픈&gt;&lt;/클로징&gt;태그 안에 있는 모든 것 (태그, 텍스트)</p><ol><li>textContent<br>-마크업을 포함시켜도 텍스트로 인식</li><li>innerText<br>-CSS순종적(느림, visibility:hidden반환X),비표준 -&gt; 잘 사용X (비추)</li><li>innerHTML<br>-textContent와 달리 태그의 기능을 가진 콘텐츠로 변경 가능<br>-XSS위험: 사용자의 입력을 innerHTML로 받으면 X (입력문구에 스크립트가 있는지 걸러줘야함)</li></ol><hr><h1 id="동기식-vs-비동기식-처리모델-Synchronous-vs-Asynchronous-processing-model"><a href="#동기식-vs-비동기식-처리모델-Synchronous-vs-Asynchronous-processing-model" class="headerlink" title="동기식 vs 비동기식 처리모델 (Synchronous vs Asynchronous processing model)"></a>동기식 vs 비동기식 처리모델 (Synchronous vs Asynchronous processing model)</h1><ol><li>동기식: 코딩하기 편하고, 직관적이나 순차적으로 실행되므로 대기시간이 소요</li><li>비동기식: 대기시간이 없어 빠르나 순차적X (코딩 어렵고 직관적X)</li></ol><h2 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h2><ol><li>Event(대부분)</li><li>Timer함수 (eg: setTimeout, interval…)</li><li>Ajax</li></ol><hr><h1 id="Event-Binding-3가지"><a href="#Event-Binding-3가지" class="headerlink" title="Event Binding (3가지)"></a>Event Binding (3가지)</h1><h3 id="1-이벤트-핸들러"><a href="#1-이벤트-핸들러" class="headerlink" title="1) 이벤트 핸들러"></a>1) 이벤트 핸들러</h3><ul><li>이벤트 프로퍼티에 함수를 할당하는 방식</li><li>자바스크립트를 html Attribute로 할당 (섞여있어서 비추)<h3 id="2-전통적-이벤트-핸들러"><a href="#2-전통적-이벤트-핸들러" class="headerlink" title="2) 전통적 이벤트 핸들러"></a>2) 전통적 이벤트 핸들러</h3></li><li>자바스크립트와 html을 분리엔 성공</li><li>but, 하나의 이벤트 당, 하나의 함수만 할당할 수 있음</li><li>btn.onclick이 호출문이되므로 인자를 전달할 수 X(엄청난 단점)<h3 id="3-Dom-Level-2-Event-Listener"><a href="#3-Dom-Level-2-Event-Listener" class="headerlink" title="3) Dom Level 2 Event Listener"></a>3) Dom Level 2 Event Listener</h3></li><li>addEventListener(‘click’, 함수명): 대상 요소에 이벤트 바인딩, 해당 이벤트가 발생할때 실행될 콜백함수를 지정</li><li>콜백함수는 정의만 (함수명()를 써서 호출문 X, 따라서 인자 전달X)</li><li>인자전달 하고싶다면: 함수를 하나 더 만들어 콜백함수 내부에 그 함수를 호출하는 식으로 가능</li><li>콜백함수의 인자엔 기본으로 브라우저가 이벤트객체 (이벤트 정보)가 암묵적으로 전달</li><li>하나의 이벤트에 하나 이상의 핸들러 추가 가능</li><li>ie9 이상 (ie8이하는 attachEvent함수 사용)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//인자전달을 하기위한 콜백함수 내부에서 그 함수를 호출하는 방식 예</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> MIN_USER_NAME_LENGTH = <span class="number">2</span>; <span class="comment">// 이름 최소 길이</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</div><div class="line"><span class="keyword">var</span> msg  = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUserNameLength</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(elem.value.length &lt; n) &#123;</div><div class="line">    msg.innerHTML = <span class="string">'이름은 '</span> + n + <span class="string">'자 이상이어야 합니다'</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    msg.innerHTML = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">elem.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  checkUserNameLength(MIN_USER_NAME_LENGTH);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ul><h2 id="핸들러-함수-내부의-this"><a href="#핸들러-함수-내부의-this" class="headerlink" title="핸들러 함수 내부의 this"></a>핸들러 함수 내부의 this</h2><p>기본적으로 콜백함수 내의 this는 전역객체(window)이나, addEventListener함수에서 지정한 이벤트 핸들러 내부의 this는 <strong>바인딩된 요소</strong> 임 즉, 호출한 객체</p><h2 id="Event-프로퍼티"><a href="#Event-프로퍼티" class="headerlink" title="Event 프로퍼티"></a>Event 프로퍼티</h2><h3 id="1-Event-target-Event-currentTarget"><a href="#1-Event-target-Event-currentTarget" class="headerlink" title="1) Event.target, Event.currentTarget"></a>1) Event.target, Event.currentTarget</h3><ul><li>이벤트를 발생시킨 요소</li><li>이벤트 핸들러 함수 내의 this - addEventListener를 호출한 요소가 바인딩</li><li>이벤트 핸들러 함수 내에서 currentTarget과 this는 언제나 일치한다.</li></ul><h3 id="2-Event-cancelable"><a href="#2-Event-cancelable" class="headerlink" title="2) Event.cancelable"></a>2) Event.cancelable</h3><ul><li>태그가 가진 기본 동작을 중단할 수 있는가?</li><li>할수있다고 판단되면, <strong>event.preventDafault</strong> 메소드 사용</li><li>Ajax사용할때 a태그 기능 삭제할때 자주 사용</li></ul><h2 id="Event-Delegation-위임"><a href="#Event-Delegation-위임" class="headerlink" title="Event Delegation(위임)"></a>Event Delegation(위임)</h2><ul><li>동적으로 li요소가 추가될 때, 아직 추가되지 않은 요소는 이벤트 핸들러 못씀 (DOM에 없으므로)</li><li>이런 때 버블링 사용, 상위요소에 핸들러를 달아줌<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"parent-list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-1"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-2"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-3"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-4"</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-5"</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"post-6"</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">'msg'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'parent-list'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'[target]: '</span> + e.target);</span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'[target.nodeName]: '</span> + e.target.nodeName);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">      <span class="comment">// list item이면 그중에서 LI인것만 이라고 필터링 해줌</span></span></div><div class="line"><span class="javascript">      <span class="keyword">if</span> (e.target &amp;&amp; e.target.nodeName == <span class="string">'LI'</span>) &#123;</span></div><div class="line"><span class="javascript">        msg.innerHTML = <span class="string">'li#'</span> + e.target.id + <span class="string">' was clicked!'</span>;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>이제 javascript만을 다루던 이론을 벗어나, html과 연계된 이론으로 진입. 고로, 아직 정확하게 자리잡히지 않은 개념들 때문에 더욱 혼동이 올수 있음.</li><li>그때 그때 검색해보자! 일단은 검색을 할 수 있는 단계(~가 있었던것같은데?)라고 머리에 잔상을 남기는 게 중요할 듯</li><li>포스팅만 계속해서 보다보니 아무래도 읽었던 부분이라고 그냥 넘어가는 일이 생기고 하는 것같다. 좀더 꼼꼼하게 읽도록 한뒤 이제는 다른 책으로도 익혀봐야겠다 (인사이드 자바스크립트 주문!)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h1&gt;&lt;h2 id=&quot;1-Dom-tree&quot;&gt;&lt;a href=&quot;#1-Dom-tree&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171012 실행컨텍스트 및 퀴즈</title>
    <link href="https://SunnySunhwa.github.io/2017/10/12/TIL-171012/"/>
    <id>https://SunnySunhwa.github.io/2017/10/12/TIL-171012/</id>
    <published>2017-10-12T04:03:32.000Z</published>
    <updated>2018-07-10T11:02:29.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Execution-Context"><a href="#Execution-Context" class="headerlink" title="Execution Context"></a>Execution Context</h1><ul><li>실행 컨텍스트는 전역 / Eval / 함수 3가지로</li><li>전역과 함수는 각자 다른 실행컨텍스트로 다르게 작동<ul><li>전역 컨텍스트의 경우 VO -&gt; Global Object(DOM,BOM, Built-in)</li><li>함수 컨텍스트의 경우 VO -&gt; Activation Object를 가리킴</li></ul></li></ul><h2 id="실행컨텍스트의-3가지-프로퍼티"><a href="#실행컨텍스트의-3가지-프로퍼티" class="headerlink" title="실행컨텍스트의 3가지 프로퍼티"></a>실행컨텍스트의 3가지 프로퍼티</h2><ul><li>추상적인 개념이지만, 물리적으로는 객체의 형태, 3가지 프로퍼티를 가짐</li></ul><h3 id="1-Variable-Object-VO-변수객체"><a href="#1-Variable-Object-VO-변수객체" class="headerlink" title="1) Variable Object (VO / 변수객체)"></a>1) Variable Object (VO / 변수객체)</h3><ul><li>전역 컨텍스트의 경우 VO -&gt; Global Object</li><li>함수 컨텍스트의 경우 VO -&gt; Activation Object 를 가리킴</li><li>함수의 경우, 실행컨텍스트마다 각각의 AO를 가짐</li><li>VO가 가지고 있는 정보: 변수 / 매개변수와 인수정보 / 함수 선언 (표현식 제외: 함수표현식은 ‘변수’)</li></ul><h3 id="2-Scope-Chain"><a href="#2-Scope-Chain" class="headerlink" title="2) Scope Chain"></a>2) Scope Chain</h3><ul><li>스코프가 중첩될때마다 부모함수의 스코프가 자식함수의 스코프 체인에 포함 (갯수가 많아짐)</li><li>즉, 함수 실행 중 변수를 만나면 현재 스코프에 해당하는 AO에서 검색</li><li>-&gt; 실패하면 스코프 체인에 담긴 순서대로 다음 AO에서</li></ul><h3 id="3-This-Value"><a href="#3-This-Value" class="headerlink" title="3) This Value"></a>3) This Value</h3><h2 id="실행-컨텍스트의-작동원리"><a href="#실행-컨텍스트의-작동원리" class="headerlink" title="실행 컨텍스트의 작동원리"></a>실행 컨텍스트의 작동원리</h2><h4 id="1-전역코드에-컨트롤이-들어가면-실행컨텍스트-스택에-실행-컨텍스트를-생성-GO는-이미-있는-상태"><a href="#1-전역코드에-컨트롤이-들어가면-실행컨텍스트-스택에-실행-컨텍스트를-생성-GO는-이미-있는-상태" class="headerlink" title="1. 전역코드에 컨트롤이 들어가면, 실행컨텍스트 스택에 실행 컨텍스트를 생성 (GO는 이미 있는 상태)"></a>1. 전역코드에 컨트롤이 들어가면, 실행컨텍스트 스택에 실행 컨텍스트를 생성 (GO는 이미 있는 상태)</h4><h4 id="2-실행컨텍스트의-SC를-생성-초기화"><a href="#2-실행컨텍스트의-SC를-생성-초기화" class="headerlink" title="2. 실행컨텍스트의 SC를 생성 초기화"></a>2. 실행컨텍스트의 SC를 생성 초기화</h4><h4 id="3-VI-VO에-프로퍼티와-값을-단계에-따라-세팅"><a href="#3-VI-VO에-프로퍼티와-값을-단계에-따라-세팅" class="headerlink" title="3. VI : VO에 프로퍼티와 값을 단계에 따라 세팅"></a>3. VI : VO에 프로퍼티와 값을 단계에 따라 세팅</h4><ol><li>함수 먼저 설정; [프로퍼티]매개변수 : [값]인수</li><li>함수 선언식; [프로퍼티]함수명 : [값]함수실체(생성된 객체)<ul><li>이때, 이미 한번 읽어서 등록되어 있으므로 함수선언식 이전에 함수를 호출할 수 있는 함수 호이스팅 발생</li><li>이때, [[scopes]]로 자신의 SC의 리스트를 가리킴</li></ul></li><li>변수; [프로퍼티]변수명 :[값]undefined –&gt; 변수 호이스팅<h4 id="4-this-값-결정"><a href="#4-this-값-결정" class="headerlink" title="4. this 값 결정"></a>4. this 값 결정</h4></li></ol><hr><h1 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h1><ol><li>내부함수가 외부함수보다 더 오래살아 남을 때,</li><li>외부함수의 지역변수를 내부함수가 참조할때,</li><li>외부함수가 return하며 종료하며 외부함수의 실행컨텍스트가 사라졌을지언정</li><li>내부함수가 실행될시, 외부함수의 변수를 계속 참조할수 있음 -&gt; 자유변수<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//전역변수 사용안</span></div><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> ++counter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).innerHTML = add();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//클로저 사용안</span></div><div class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> ++counter;</div><div class="line">     &#125;;</div><div class="line">   &#125;());</div><div class="line"></div><div class="line"><span class="comment">/* var add = (function () &#123;</span></div><div class="line"><span class="comment">        var counter = 0;</span></div><div class="line"><span class="comment">        var poo = function () &#123;</span></div><div class="line"><span class="comment">          return ++counter;</span></div><div class="line"><span class="comment">        &#125;;</span></div><div class="line"><span class="comment">        return poo;</span></div><div class="line"><span class="comment">      &#125;());   </span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).innerHTML = add();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li></ol><hr><h1 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* #6. 핸드폰번호 가리기</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">핸드폰 요금 고지서에 표시할 전화번호는 개인정보 보호를 위해 맨 뒷자리 4자리를 제외한 나머지를 ''으로 바꿔야 한다.</span></div><div class="line"><span class="comment">전화번호를 나타내는 문자열 str을 입력받는 hideNumbers 함수를 완성하라</span></div><div class="line"><span class="comment">예를들어 s가 '01033334444'면 '**4444'를 리턴하고, '027778888'인 경우는 '*****8888'을 리턴한다.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="comment">//substring사용 방법으로 해보기!</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideNumbers</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = str.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length - <span class="number">4</span>; i++) &#123;</div><div class="line">    result[i] = <span class="string">"*"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(hideNumbers(<span class="string">'01033334444'</span>)); <span class="comment">// *******4444</span></div><div class="line"><span class="built_in">console</span>.log(hideNumbers(<span class="string">'027778888'</span>)); <span class="comment">// *****8888</span></div><div class="line"></div><div class="line"><span class="comment">/*#7. 문자열을 숫자로 바꾸기</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">strToInt 메소드는 문자열 str을 매개변수로 받는다. str을 숫자로 변환한 결과를 반환하도록 strToInt를 작성하라.</span></div><div class="line"><span class="comment">예를들어 str이 '1234'이면 1234를 반환하고, '-1234'이면 -1234를 반환한다.</span></div><div class="line"><span class="comment">str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없다.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strToInt</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str * <span class="number">1</span>;</div><div class="line">  <span class="comment">//2 - return +str;</span></div><div class="line">  <span class="comment">//3 - return parseInt(str);</span></div><div class="line">  <span class="comment">//4 - return Number(str); (비추)</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(strToInt(<span class="string">'1234'</span>)); <span class="comment">// 1234</span></div><div class="line"><span class="built_in">console</span>.log(strToInt(<span class="string">'-1234'</span>)); <span class="comment">// -1234</span></div><div class="line"></div><div class="line"><span class="comment">/* #10. Check Palindrom</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">palindrome(팰린드롬/회문)은 왼쪽에서 오른쪽으로 읽은 다음, 오른쪽부터 왼쪽으로 다시 읽어도 똑같은 형태와 의미를 유지하는 문장이나 단어를 지칭한다.</span></div><div class="line"><span class="comment">인자로 전달한 문자열이 palindrome인지 검사하여 Boolean값을 반환하는 함수를 완성하라. 단, 반드시 1자 이상의 문자열을 인자로 전달한다. */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPalindrom</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str === str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(checkPalindrom(<span class="string">'dad'</span>));</div><div class="line"><span class="built_in">console</span>.log(checkPalindrom(<span class="string">'mom'</span>));</div><div class="line"><span class="built_in">console</span>.log(checkPalindrom(<span class="string">'palindrim'</span>));</div><div class="line"><span class="built_in">console</span>.log(checkPalindrom(<span class="string">'s'</span>));</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">Quiz.11</span></div><div class="line"><span class="comment">배열의 최대 / 최소값 구하기</span></div><div class="line"><span class="comment">배열의 요소 중 최대값 / 최소값을 반환하는 함수를 완성하라.*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxValueFromArray</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="comment">//es5 return Math.max.apply(null, array);</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...array);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getMaxValueFromArray([<span class="number">3</span>, <span class="number">6</span>, <span class="number">-2</span>, <span class="number">-5</span>, <span class="number">7</span>, <span class="number">3</span>])); <span class="comment">// 7</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinValueFromArray</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, array);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getMinValueFromArray([<span class="number">3</span>, <span class="number">6</span>, <span class="number">-2</span>, <span class="number">-5</span>, <span class="number">7</span>, <span class="number">3</span>])); <span class="comment">// -5</span></div></pre></td></tr></table></figure><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>개념적인 부분을 이해하는 것에 비해 알고리즘 문제 풀이가 좀 더 어려움</li><li>예습 복습의 방법을 글만 여러번 읽는 것보다 예제 코드를 눈으로 컴파일링하고 여기에 익숙해지는 방식으로 바꿔봐야될듯.</li><li>다양한 메소드를 배울수록 사람들의 알고리즘 풀이식이 점점 더 달라지는걸 몸소 느낌</li><li>하나의 문제여도 여러풀이방법을 적용해보려 노력한다면 더 공부가 될거 같다 :)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Execution-Context&quot;&gt;&lt;a href=&quot;#Execution-Context&quot; class=&quot;headerlink&quot; title=&quot;Execution Context&quot;&gt;&lt;/a&gt;Execution Context&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;실행 컨
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_171010 javascript기초 테스트</title>
    <link href="https://SunnySunhwa.github.io/2017/10/11/TIL-171010-test/"/>
    <id>https://SunnySunhwa.github.io/2017/10/11/TIL-171010-test/</id>
    <published>2017-10-11T07:50:10.000Z</published>
    <updated>2018-07-10T11:02:08.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-index-html에서-main-js를-로드하기-위한-코드를-완성하라-단-index-html은-프로젝트-루트에-위치하고-main-js는-src-js-디렉터리에-위치한다-6점"><a href="#1-index-html에서-main-js를-로드하기-위한-코드를-완성하라-단-index-html은-프로젝트-루트에-위치하고-main-js는-src-js-디렉터리에-위치한다-6점" class="headerlink" title="1. index.html에서 main.js를 로드하기 위한 코드를 완성하라. 단 index.html은 프로젝트 루트에 위치하고 main.js는 src/js 디렉터리에 위치한다.(6점)"></a>1. index.html에서 main.js를 로드하기 위한 코드를 완성하라. 단 index.html은 프로젝트 루트에 위치하고 main.js는 src/js 디렉터리에 위치한다.(6점)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=”src/js/main.js”&gt;&lt;/script&gt;</div><div class="line">또는</div><div class="line">&lt;script src=”./src/js/main.js”&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;script src=”/src/js/main.js”&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="2-변수란-무엇인가-6점"><a href="#2-변수란-무엇인가-6점" class="headerlink" title="2. 변수란 무엇인가?(6점)"></a>2. 변수란 무엇인가?(6점)</h3><p>변수는 위치(주소)를 기억하는 저장소이다번문제 위치란 메모리 상의 주소(address)를 의미한다. 즉 변수란 메모리 주소(Memory address)에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자(identifier)이다.</p><h3 id="3-JavaScript의-자료형을-모두-나열하라-6점"><a href="#3-JavaScript의-자료형을-모두-나열하라-6점" class="headerlink" title="3. JavaScript의 자료형을 모두 나열하라.(6점)"></a>3. JavaScript의 자료형을 모두 나열하라.(6점)</h3><ul><li>기본 자료형 (primitive data type)<br>Boolean, null, undefined, Number, String, Symbol (ECMAScript 6에서 추가)</li><li>객체형 (Object type)<br>Object</li></ul><h3 id="4-var-foo-42-0-console-log-foo-의-결과를-기술하라-6점"><a href="#4-var-foo-42-0-console-log-foo-의-결과를-기술하라-6점" class="headerlink" title="4. var foo = 42 / -0; console.log(foo); 의 결과를 기술하라.(6점)"></a>4. var foo = 42 / -0; console.log(foo); 의 결과를 기술하라.(6점)</h3><p>-Infinity</p><h3 id="5-변수-선언-시-var-키워드를-생략할-수-있다-이때-변수는-전역-변수가-되는데-그-이유는-무엇인가-6점"><a href="#5-변수-선언-시-var-키워드를-생략할-수-있다-이때-변수는-전역-변수가-되는데-그-이유는-무엇인가-6점" class="headerlink" title="5. 변수 선언 시 var 키워드를 생략할 수 있다. 이때 변수는 전역 변수가 되는데 그 이유는 무엇인가?(6점)"></a>5. 변수 선언 시 var 키워드를 생략할 수 있다. 이때 변수는 전역 변수가 되는데 그 이유는 무엇인가?(6점)</h3><p>자바스크립트 엔진은 변수 할당문을 만나면 해당 스코프 내에서 해당 변수의 선언을 검색한다. 이때 검색에 실패하면 상위 스코프에서 해당 변수의 선언을 검색한다. 최상위 스코프인 전역에서도 해당 변수 선언의 검색에 실패한 경우, 자바스크립트 엔진은 해당 변수를 전역 변수로 간주하고 선언하기 때문이다.</p><h3 id="6-변수-호이스팅이-발생하는-이유를-설명하라-8점"><a href="#6-변수-호이스팅이-발생하는-이유를-설명하라-8점" class="headerlink" title="6. 변수 호이스팅이 발생하는 이유를 설명하라.(8점)"></a>6. 변수 호이스팅이 발생하는 이유를 설명하라.(8점)</h3><p>var 키워드로 선언된 변수는 선언 단계와 초기화 단계가 한번에 이루어진다. 즉, 스코프에 변수가 등록되고 변수는 메모리에 공간을 확보한 후 undefined로 초기화된다. 따라서 변수 선언문 이전에 변수에 접근하여도 Variable Object에 변수가 존재하기 때문에 에러가 발생하지 않는다. 다만 undefined를 반환한다.</p><h3 id="7-var-x-5-일-때-console-log-x-‘5’-의-결과는-무엇인가-6점"><a href="#7-var-x-5-일-때-console-log-x-‘5’-의-결과는-무엇인가-6점" class="headerlink" title="7. var x = 5; 일 때, console.log(x != ‘5’);의 결과는 무엇인가?(6점)"></a>7. var x = 5; 일 때, console.log(x != ‘5’);의 결과는 무엇인가?(6점)</h3><p>false</p><h3 id="8-var-foo-false-amp-amp-‘Cat’-일-때-foo의-값은-무엇인가-6점"><a href="#8-var-foo-false-amp-amp-‘Cat’-일-때-foo의-값은-무엇인가-6점" class="headerlink" title="8. var foo = false &amp;&amp; ‘Cat’; 일 때, foo의 값은 무엇인가?(6점)"></a>8. var foo = false &amp;&amp; ‘Cat’; 일 때, foo의 값은 무엇인가?(6점)</h3><p>false</p><h3 id="9-console-log-null-의-결과는-무엇인가-6점"><a href="#9-console-log-null-의-결과는-무엇인가-6점" class="headerlink" title="9. console.log(!!null); 의 결과는 무엇인가?(6점)"></a>9. console.log(!!null); 의 결과는 무엇인가?(6점)</h3><p>false</p><h3 id="10-0에서-10미만까지-홀수만을-큰수부터-출력하는-코드를-for문을-사용하여-작성하라-8점"><a href="#10-0에서-10미만까지-홀수만을-큰수부터-출력하는-코드를-for문을-사용하여-작성하라-8점" class="headerlink" title="10. 0에서 10미만까지 홀수만을 큰수부터 출력하는 코드를 for문을 사용하여 작성하라.(8점)"></a>10. 0에서 10미만까지 홀수만을 큰수부터 출력하는 코드를 for문을 사용하여 작성하라.(8점)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line"><span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="11-0에서-10미만까지-3의-배수를-큰수부터-출력하는-코드를-while문을-사용하여-작성하라-단-0은-출력하지-않는다-6점"><a href="#11-0에서-10미만까지-3의-배수를-큰수부터-출력하는-코드를-while문을-사용하여-작성하라-단-0은-출력하지-않는다-6점" class="headerlink" title="11. 0에서 10미만까지 3의 배수를 큰수부터 출력하는 코드를 while문을 사용하여 작성하라. 단 0은 출력하지 않는다.(6점)"></a>11. 0에서 10미만까지 3의 배수를 큰수부터 출력하는 코드를 while문을 사용하여 작성하라. 단 0은 출력하지 않는다.(6점)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">9</span>;</div><div class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">if</span>(i % <span class="number">3</span> === <span class="number">0</span>) <span class="built_in">console</span>.log(i);</div><div class="line">i--;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="12-문자열을-값으로-갖는-name-프로퍼티와-name-프로퍼티를-출력하는-sayName-메소드를-갖는-객체-obj를-생성하라-단-객체-리터럴-방식을-사용한다-8점"><a href="#12-문자열을-값으로-갖는-name-프로퍼티와-name-프로퍼티를-출력하는-sayName-메소드를-갖는-객체-obj를-생성하라-단-객체-리터럴-방식을-사용한다-8점" class="headerlink" title="12. 문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단 객체 리터럴 방식을 사용한다.(8점)"></a>12. 문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단 객체 리터럴 방식을 사용한다.(8점)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">name: <span class="string">'Lee'</span>,</div><div class="line">sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">obj.sayName();</div></pre></td></tr></table></figure><h3 id="13-문자열을-값으로-갖는-name-프로퍼티와-name-프로퍼티를-출력하는-sayName-메소드를-갖는-객체-obj를-생성하라-단-생성자-함수-방식-함수명-Person-을-사용한다-8점"><a href="#13-문자열을-값으로-갖는-name-프로퍼티와-name-프로퍼티를-출력하는-sayName-메소드를-갖는-객체-obj를-생성하라-단-생성자-함수-방식-함수명-Person-을-사용한다-8점" class="headerlink" title="13. 문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단, 생성자 함수 방식(함수명 Person)을 사용한다.(8점)"></a>13. 문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단, 생성자 함수 방식(함수명 Person)을 사용한다.(8점)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'Lee'</span>;</div><div class="line"><span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person();</div><div class="line">obj.sayName();</div></pre></td></tr></table></figure><h3 id="14-var-person-‘my-name’-‘Lee’-일-때-my-name-프로퍼티의-값을-‘Kim’으로-변경하고-console-log-를-사용하여-출력하는-코드를-작성하라-6점"><a href="#14-var-person-‘my-name’-‘Lee’-일-때-my-name-프로퍼티의-값을-‘Kim’으로-변경하고-console-log-를-사용하여-출력하는-코드를-작성하라-6점" class="headerlink" title="14. var person = { ‘my-name’: ‘Lee’ }; 일 때, my-name 프로퍼티의 값을 ‘Kim’으로 변경하고 console.log()를 사용하여 출력하는 코드를 작성하라.(6점)"></a>14. var person = { ‘my-name’: ‘Lee’ }; 일 때, my-name 프로퍼티의 값을 ‘Kim’으로 변경하고 console.log()를 사용하여 출력하는 코드를 작성하라.(6점)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123; <span class="string">'my-name'</span>: <span class="string">'Lee'</span> &#125;;</div><div class="line">person[<span class="string">'my-name'</span>] = <span class="string">'Kim'</span>;</div><div class="line"><span class="built_in">console</span>.log(person[<span class="string">'my-name'</span>]);</div></pre></td></tr></table></figure><h3 id="15-pass-by-reference와-pass-by-value의-차이점에-대하여-설명하라-8점"><a href="#15-pass-by-reference와-pass-by-value의-차이점에-대하여-설명하라-8점" class="headerlink" title="15. pass-by-reference와 pass-by-value의 차이점에 대하여 설명하라.(8점)"></a>15. pass-by-reference와 pass-by-value의 차이점에 대하여 설명하라.(8점)</h3><ul><li>pass-by-value<br>기본자료형의 값은 값(value)으로 전달된다. 즉, 복사되어 전달된다. 기본자료형은 값이 한번 정해지면 변경할 수 없다.(immutable)</li><li>pass-by-reference<br>참조형(object type)의 값은 실제 객체가 아닌 객체에 대한 참조값이다. 즉, 참조형을 할당하면 객체가 복사되어 전달되는 것이 아니라 참조값(reference)가 전달된다. 객체는 변경 가능한 프로퍼티들의 집합이다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-index-html에서-main-js를-로드하기-위한-코드를-완성하라-단-index-html은-프로젝트-루트에-위치하고-main-js는-src-js-디렉터리에-위치한다-6점&quot;&gt;&lt;a href=&quot;#1-index-html에서-main-js
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_1701010 Built in Object / Quiz</title>
    <link href="https://SunnySunhwa.github.io/2017/10/10/TIL-171010/"/>
    <id>https://SunnySunhwa.github.io/2017/10/10/TIL-171010/</id>
    <published>2017-10-10T08:14:32.000Z</published>
    <updated>2018-07-10T11:02:22.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wrapper-Object"><a href="#Wrapper-Object" class="headerlink" title="Wrapper Object"></a>Wrapper Object</h1><ul><li>기본자료형을 객체처럼 사용하기 위한 래퍼객체</li><li>기본자료형은 각 이름과 동일한 생성자함수로 객체화 함</li><li>eg) ‘str’.length -&gt; 기본자료형에 점을 찍는다는 행위는 이를 객체처럼 취급하여 프로퍼티를 주겠단 이야기</li><li><strong>객체화 한 그 시점에만 객체처럼 취급하고 이후에는 다시 기본자료형으로 취급함</strong></li></ul><h1 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h1><h3 id="1-1-10-000의-숫자-중-8이-등장하는-횟수-구하기-Google"><a href="#1-1-10-000의-숫자-중-8이-등장하는-횟수-구하기-Google" class="headerlink" title="1. 1 ~ 10,000의 숫자 중 8이 등장하는 횟수 구하기 (Google)"></a>1. 1 ~ 10,000의 숫자 중 8이 등장하는 횟수 구하기 (Google)</h3><p>1부터 10000까지 8이라는 숫자가 총 몇번 나오는가? 이를 구하는 함수를 완성하라.<br>단, 8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다.<br>예를 들어 8808은 3, 8888은 4로 카운팅 해야 한다.<br>(hint) 문자열 중 n번째에 있는 문자 : str.charAt(n) or str[n]<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount8</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10001</span>; i++) &#123;</div><div class="line">    str += i;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(str);</div><div class="line">  <span class="keyword">var</span> len = str.length;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">    <span class="keyword">if</span> (str[j] === <span class="string">'8'</span>) &#123;</div><div class="line">      res++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getCount8());</div><div class="line"><span class="comment">///4000</span></div></pre></td></tr></table></figure></p><h3 id="2-짝수와-홀수"><a href="#2-짝수와-홀수" class="headerlink" title="2. 짝수와 홀수"></a>2. 짝수와 홀수</h3><p>evenOrOdd 함수는 정수 num을 매개변수로 받는다. num은 1이상의 정수이며, num이 음수인 경우는 없다.<br>num이 짝수일 경우 ‘Even’을 반환하고 홀수인 경우 ‘Odd’를 반환하도록 evenOrOdd에 코드를 작성하라.  </p><p>단, if문을 사용한 답과 3항 연산자를 사용하는 답 두가지를 제시하여야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">evenOrOdd1</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'even'</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'odd'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(evenOrOdd1(<span class="number">15</span>));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">evenOrOdd2</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (num % <span class="number">2</span> == <span class="number">0</span>) ? <span class="string">'even'</span> : <span class="string">'odd'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(evenOrOdd2(<span class="number">32</span>));</div></pre></td></tr></table></figure><h3 id="3-문자열-다루기"><a href="#3-문자열-다루기" class="headerlink" title="3. 문자열 다루기"></a>3. 문자열 다루기</h3><p>alphaString46 함수는 문자열 s를 매개변수로 입력받는다. s의 길이가 4 ~ 6이고, 숫자로만 구성되어 있는지 확인하는 함수를 완성하라.<br>예를들어 s가 ‘a234’이면 false를 리턴하고 ‘1234’라면 true를 리턴한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alphaString46</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> alpha = <span class="regexp">/^[0-9]&#123;4,6&#125;$/</span>;</div><div class="line">  <span class="keyword">return</span> alpha.test(s);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(alphaString46(<span class="string">'1234'</span>));</div><div class="line"><span class="built_in">console</span>.log(alphaString46(<span class="string">'a234'</span>));</div></pre></td></tr></table></figure></p><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>수많은 API 다 외우려하지말고, 하는 기능을 각인 -&gt; 존재를 알고있다면 실제 사용시 구체적인 내용을 학습하자</li><li>오늘 배운 Built in Object (=API)를 정리해보려했으나, 너무 방대한 양에 ‘이것은 이러한 기능이다’식으로 진행되어 스스로 공부하며 익히지 않는 이상 진짜 정리가 아닌듯! :(</li><li>‘정리하는 것’에 집착해서 효과 없는 시간을 투자하지말고, 선생님이 내주신 퀴즈를 풀어보며 해당 기능의 이용법을 몸으로 익히는게 더 효율적인 방법일 듯. 오늘은 그걸로 복습을 진행해야지</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Wrapper-Object&quot;&gt;&lt;a href=&quot;#Wrapper-Object&quot; class=&quot;headerlink&quot; title=&quot;Wrapper Object&quot;&gt;&lt;/a&gt;Wrapper Object&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;기본자료형을 객체처럼 사용하기
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170929 함수 프로토타입, 스코프</title>
    <link href="https://SunnySunhwa.github.io/2017/09/29/TIL-170929/"/>
    <id>https://SunnySunhwa.github.io/2017/09/29/TIL-170929/</id>
    <published>2017-09-29T05:07:45.000Z</published>
    <updated>2018-07-10T11:01:59.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="함수-프로토타입"><a href="#함수-프로토타입" class="headerlink" title="함수 프로토타입"></a>함수 프로토타입</h1><ul><li>자바스크립트의 객체지향을 충족하기 위한 방식론</li><li>ES6에서는 클래스의 개념이 생겼음 (자바처럼 객체와 객체간의 상속관계를 개발자가 만들어줌)</li><li>그 외에 꼼수처럼 프로토타입객체의 변경을 통해서도 객체끼리의 상속관계 만듬이 가능 (권장방식X, constructor프로퍼티 연결이 깨짐)  </li></ul><ol><li>function Person</li></ol><ul><li>객체를 생산하는 생성자함수 person<ul><li>(그러나 자바스크립트 엔진은 뭘 생산할지 몰라서 객체를 생산하는 함수가 아닐지언정, 생성자함수로 취급하여 prototype을 가지고 있음)</li><li>개발자들 사이에선 암묵적으로 생성자함수명은 대문자로 시작</li></ul></li><li>prototype 프로퍼티를 갖고있음</li><li>person.prototype.constructor와 같은 실상=</li><li>프로토타입 체이닝에 의해, me.constructor와도 같음  </li></ul><ol><li>var me = new person() __proto__</li></ol><ul><li>Person이라는 함수를 생성자함수로 삼아 생성된 일반객체의 부모의 역할을 함.  </li></ul><ol><li>person.prototype</li></ol><ul><li>객체를 생산하는 person이라는 함수가 생성됨으로써 생성되는 프로토타입</li><li>즉, 생성자함수 Person의 프로토타입</li><li>constructor 프로퍼티를 갖고잇음</li><li>me<strong>proto</strong>와 같은 실상</li></ul><h2 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h2><ul><li>프로토타입 체인의 종점은 object.prototype</li><li>객체 리터럴로 객체를 생성했을때는 상속관계의 단이 종점인 objec.prototype밖에 없어 여기에 메소드를 추가할 시 빌트인이 변경됨 (비추)</li><li>즉, 객체 리터럴 본인외에 공통부분이 있어 효율상 상속관계가 필요하다면, 객체리터럴로 객체를 생성X -&gt; 생성자함수로 생성</li><li>그래야만 생성자함수.prototype으로 전체 빌트인을 변경하지 않고도 상속관계를 사용하여 메소드 사용이 가능  </li></ul><h2 id="기본자료형의-확장"><a href="#기본자료형의-확장" class="headerlink" title="기본자료형의 확장"></a>기본자료형의 확장</h2><ul><li>기본자료형일지라도, 메소드를 호출 시 자바스크립트 엔진이 순간적으로 객체형으로 취급하여 결과값 반환이 가능</li><li>엔진은 String생성자 함수로 문자열(객체)로 탄생했다고 생각함 (wrapper성격의 생성자함수 String, Number)</li><li>따라서 String.prototype에 자신의 메소드를 추가할 수 있음</li><li>그러나 빌트인을 건들이게 되므로 비추</li></ul><h1 id="스코프"><a href="#스코프" class="headerlink" title="스코프"></a>스코프</h1><ul><li>자바스크립트는 <strong>함수 중괄호</strong> 만을 지역으로 갖음 (Function-Level Scope)</li><li>자바스크립트는 중복변수, 중복함수를 허용 -&gt; 에러나지 않고 작동(의도하지 않은 값으로)</li><li>따라서 전역스코프는 되도록 사용x</li></ul><h2 id="전역스코프-탈피-방법"><a href="#전역스코프-탈피-방법" class="headerlink" title="전역스코프 탈피 방법"></a>전역스코프 탈피 방법</h2><ol><li>IIFE, 즉시호출함수 사용</li><li>ES6에서 let, const 사용</li></ol><h2 id="전역변수"><a href="#전역변수" class="headerlink" title="전역변수"></a>전역변수</h2><ul><li>웹 브라우저 내 전역변수는 전역객체 window의 프로퍼티</li><li>노드 환경 내 전역변수는 전역객체 global의 프로퍼티</li><li>암묵적전역<ul><li>함수 내에 var를 선언하지 않고 변수A를 선언했을때 함수 내에도 A가 없고, 전역에서도 변수A가 없을때, 엔진은 함수 내의 변수A를 전역변수화 시킴</li><li>use strict모드일때는 전역변수화X -&gt; 에러</li></ul></li></ul><h1 id="This"><a href="#This" class="headerlink" title="This"></a>This</h1><ol><li>함수에서만 사용 가능</li><li>함수가 어떻게 호출되느냐에 따라 this가 지칭하는것이 달라짐 (자바스크립트 특징)</li><li>this의 지칭객체 기본값은 window.<ul><li>예) 메소드 내부에 있는 함수는 일반함수 -&gt; 여기서의 this는 window</li></ul></li><li>메소드와 생성자함수에 있을때만 this가 지칭하는 것이 다름</li></ol><h2 id="메소드-호출-패턴"><a href="#메소드-호출-패턴" class="headerlink" title="메소드 호출 패턴"></a>메소드 호출 패턴</h2><ul><li>메소드에 있는 this는 해당 메소드를 <strong>소유한 객체</strong></li><li>this를 사용함으로써 A/B/C객체 중 A객체에만 메소드를 할당하고, A = B = C 해줌으로써 해당 메소드를 같이 사용 가능 (pass by reference)</li><li>같은 메소드를 사용하지만, 메소드가 가리키는 객체의 프로퍼티는 다 다름</li><li>즉, this를 통해 메소드는 한번 사용하면서 각 객체의 다른 값을 불러올 수 있음</li></ul><h2 id="생성자함수-호출-패턴"><a href="#생성자함수-호출-패턴" class="headerlink" title="생성자함수 호출 패턴"></a>생성자함수 호출 패턴</h2><ul><li>생성자함수가 생성되는 동시에 빈객체가 생성됨</li><li>this의 지칭객체가 기본값(window)에서 생성된 빈객체로 변경(바인딩)</li><li>여기에 생성자함수 내, this.prop = 값을 할당할 경우, 생성자함수와 new연산자를 통해 생성될 인스턴스에 prop이라는 프로퍼티를 추가하는 기능을 수행</li><li>즉, 생성자함수에 있는 this는 생성자함수가 new연산자를 통해 <strong>생성될 인스턴스를 지칭</strong><br>가 될지 모름 (인스턴스가 생성되기 전이므로)</li></ul><h4 id="주의사항"><a href="#주의사항" class="headerlink" title="[주의사항]"></a>[주의사항]</h4><p><strong>일반함수와 생성자함수 형식적차이X, new 연산자를 붙여서 호출할 시, 해당함수는 생성자함수로 동작</strong></p><ul><li>new연산자 없이 함수를 호출 -&gt; 생성자함수가 아니고 일반함수로 취급됨으로 this는 전역객체(window)</li><li>이에 오해발생을 줄이기위해 <strong>생성자함수명은 대문자</strong> 로 시작하는것을 관행으로 함</li></ul><h2 id="apply메소드-호출패턴"><a href="#apply메소드-호출패턴" class="headerlink" title="apply메소드 호출패턴"></a>apply메소드 호출패턴</h2><ul><li>this가 지칭하는 객체를 내가 원하는 특정 객체로 바꾸고 싶을때 사용</li><li>객체B는 생성자함수A를 통해 생성된 인스턴스가 아닌데도 불구, 그 생성자함수프로토타입이 가진 메소드를 쓰고 싶을때.</li><li>A프로토타입.메소드.apply(유사배열객체)로 선언함으로써 this의 지칭값을 소유한객체가 아닌 지정한 객체B로 바꿀수 있음 -&gt; 해당 메소드 사용가능</li><li>아무 객체로나 바꿀숭수 있는 것은 아님. 유사배열객체로만 (배열로 변할수있는 객체)</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>프로토타입 체이닝은 처음에 들었을때는 헷갈릴 수 있는 개념! 도식화된 그림을 머리에 그려두자</li><li>10일에 달하는 추석연휴를 맞이한 과제는 1주일 분량의 리뷰. 5일밖에 안되는 기간이지만 너무 많은 정보가 한번에 들어왔다. 키워드별로 차분히 정리해두자</li><li>연휴가 끝나면 무려 “주관식” 테스트가 있을 예정 :(</li><li>‘설명할 줄 알아야 진짜 아는 것이다’ 안다고 생각이 드는 개념이라도 말로 설명해보는 듯 공부해봐야지</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;함수-프로토타입&quot;&gt;&lt;a href=&quot;#함수-프로토타입&quot; class=&quot;headerlink&quot; title=&quot;함수 프로토타입&quot;&gt;&lt;/a&gt;함수 프로토타입&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;자바스크립트의 객체지향을 충족하기 위한 방식론&lt;/li&gt;
&lt;li&gt;ES6에서
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170928 객체, 함수</title>
    <link href="https://SunnySunhwa.github.io/2017/09/28/TIL-170928/"/>
    <id>https://SunnySunhwa.github.io/2017/09/28/TIL-170928/</id>
    <published>2017-09-28T05:07:37.000Z</published>
    <updated>2018-07-10T11:01:52.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="객체-Object"><a href="#객체-Object" class="headerlink" title="객체 (Object)"></a>객체 (Object)</h1><ol><li>pass by reference<ul><li>기본 자료 형은 값을 복사해서 새로운 참조값을 주지만, 객체는 같은 값을 가리키게 됨</li><li>따라서 두개의 객체가 같은 값을 가리키고 있다면, 하나만 변경해도 연동됨</li></ul></li><li>객체는 이러한 프로퍼티를 포함하는 컨테이너</li><li>delete로 삭제 불가</li></ol><ul><li>객체는 선언 이후 메모리에 올라감, 따라서 객체를 삭제하고 싶다면 객체명 =”null”로 <em>참조값</em> 을 삭제 가능</li><li>그 이유는 values는 primitive data. 즉, immutable. 따라서 참조값을 삭제하고 기존의 value는 가비지 컬렉션을 통해 삭제됨<h2 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h2></li><li><p>프로퍼티는 name: value 로 이루어진 한쌍.</p></li><li><p>프로퍼티 값은 <em>undefined 제외</em> 모든 값을 가질 수 있음</p></li><li>동적 생성이 가능하다는 기반으로, 객체 자체에는 순서가 없음 (배열과 다름)</li><li>이름 생성 시, ‘-‘ 사용 비추 (엔진이 연산자로 착각) 필요시 언더스코어_ 사용</li><li>프로퍼티는 동적 생성, 삭제(delete)가 가능 (js특징)</li><li>삭제는 프로퍼티에만 가능, 객체 자체에는 불가</li></ul><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><ul><li>property의 value가 data가 아닌 함수일 경우 메소드라 칭함</li><li>즉, 객체 내부에 묶여있는 함수</li></ul><h2 id="객체-생성-방법"><a href="#객체-생성-방법" class="headerlink" title="객체 생성 방법"></a>객체 생성 방법</h2><ol><li>객체 리터럴 (사람의 편의성을 위해 만든 방법)</li><li>new Object(); 생성자 함수 (기계가 해석하는 방법)<ul><li>리터럴을 써도 생성자 함수 방식으로 기계는 인식</li></ul></li><li>생성자 함수<ul><li>객체를 만드는 함수 그 자체 (우리가 커스텀 가능)</li><li>new object와 달리, 내용을 채운 채 생성 가능</li><li>즉, 템플릿을 한번 만들어 내고 이후 데이터를 인자로 삽입</li><li>같은 객체를 여러번 만들 때 빠르게 생성 가능 (공장화, 생산성 상승)</li><li>this : 생성자 함수가 만들 객체를 지칭</li><li>이렇게 생성된 객체를 ‘인스턴스’라고 부르기도 함</li></ul></li></ol><h2 id="for-in문"><a href="#for-in문" class="headerlink" title="for-in문"></a>for-in문</h2><ul><li>객체에 포함된 프로퍼티에 루프 수행 (순회)가능</li><li>객체말고 배열에는 사용하지 않도록 (순서 문제 발생 -&gt; 배열은 배열의 요소를 순회하는 for-of문 사용)</li><li>person[prop]이라고 쓴 이유는 prop이 함수이기 때문에</li><li>person.prop으로 적을 시 프로퍼티 네임으로 인식  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="string">'first-name'</span>: <span class="string">'Ung-mo'</span>,</div><div class="line">  <span class="string">'last-name'</span>: <span class="string">'Lee'</span>,</div><div class="line">  gender: <span class="string">'male'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// prop에 객체의 프로퍼티 이름이 반환된다. 단, 순서는 보장되지 않는다.</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> person) &#123;</div><div class="line">  <span class="built_in">console</span>.log(prop + <span class="string">': '</span> + person[prop]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><ul><li>매개변수(인자, parameter)설정의 중요성! -&gt; 함수를 통해 재생산 하는 것의 포인트</li><li>인수(argument)는 매개변수에 할당되는 값</li><li>함수는 매개변수에 함수를 할당할 수 있음 (콜백함수)</li><li>함수 선언식과 표현식의 차이점! (하단참조)</li><li>인수에 primitive data / object 들어갈때 각 특성을 그대로 따름<ul><li>immutable관련 pass by value or reference.</li><li>즉, 원본의 값이 바뀌느냐(obj) 안바뀌느냐(primitive)</li><li>바깥에 있는 원본의 값을 바꾸는 것 : 비순수 함수(코드의 예측성이 떨어짐)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//인수의 제곱을 만드는 함수일때</span></div><div class="line"><span class="comment">//함수 선언식 방법</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">parameter</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello, i am'</span> + parameter)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//선언식 호출</span></div><div class="line"><span class="keyword">var</span> variable = funcName(<span class="string">'argument(tom)'</span>);</div><div class="line"><span class="built_in">console</span>.log(variable);</div><div class="line"><span class="comment">//-&gt; 함수명으로 부른듯 보이나, 내부적으로는 엔진이 함수명과 동일한 변수를 지정하여 읽기 때문에, 호출할때는 함수명(=변수명)으로 호출한다. 따라서 아래와 같음</span></div><div class="line"><span class="built_in">console</span>.log(funcName(<span class="string">'argument(tom)'</span>)); <span class="comment">//Hello, I am Tom</span></div><div class="line"></div><div class="line"><span class="comment">//함수 표현식방법 (무기명)</span></div><div class="line"><span class="keyword">var</span> variable = <span class="function"><span class="keyword">function</span>(<span class="params">parameter</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello, i am'</span> + parameter)</div><div class="line">&#125;;</div><div class="line"><span class="comment">//표현식 호출</span></div><div class="line"><span class="built_in">console</span>.log(variable(<span class="string">'argument(tom)'</span>)); <span class="comment">//Hello, I am Tom</span></div></pre></td></tr></table></figure><h2 id="함수-정의방법-3가지"><a href="#함수-정의방법-3가지" class="headerlink" title="함수 정의방법 3가지"></a>함수 정의방법 3가지</h2><ol><li><p>함수선언식</p><ul><li>함수명 생략 불가 (없으면, 호출자체가 불가)</li><li>실행 시, 엔진이 함수명과 동일한 변수명을 저장하여 해석(표현식으로 전환되서 해석)</li><li>실행 1,2,3(생성/초기화/할당)단계가 한번에 이뤄짐</li><li>함수가 밑에서 선언되었어도 위에서 호출이 가능 (but, 비추)</li><li>선언식으로 쓰게될경우 스택메모리에 쌓이므로, 성능/퍼포먼스에서 떨어짐 (심할경우, 스택 오버플로우 발생 가능성)</li></ul></li><li><p>함수표현식</p><ul><li>기명함수 / 익명(무명)함수</li><li>익명함수가 일반적<ul><li>어차피 함수 호출은 변수로 하기때문에 함수의 이름은 중요하지 않음</li><li>또한 함수 이름이 지역변수로 사용되기 때문에 이름으로 호출 시 reference Error발생</li><li>함수를 변수에 담는 방법이므로, 변수 호이스팅의 법칙을 따름</li><li>즉, 함수가 밑에 선언되었다면 위에서 호출할 시 함수가 정의되지 않았다는 에러 발생</li></ul></li></ul></li><li><p>function()생성자 함수</p></li></ol><ul><li>functino.prototype.constructor 프로퍼티로 접근 가능(<em>프로토타입 체이닝</em>)</li></ul><h3 id="반환값-return"><a href="#반환값-return" class="headerlink" title="반환값 (return)"></a>반환값 (return)</h3><ul><li>호출한 코드에게 수행한 결과를 반환</li><li>여러개의 값을 반환 가능</li><li>return구문 생략 시 의미: return undifined; 로 취급</li></ul><h3 id="argument-property"><a href="#argument-property" class="headerlink" title="argument property"></a>argument property</h3><ul><li>함수 호출시, 매개변수에 몇개 들어올지 모르는 상태에 <em>인수</em> 로써 의도적으로 사용</li><li>들어오는 인수를 배열로 취급함에 따라 대괄호 호출법 사용 가능<ul><li>arguments[0] : 인수로 들어온 0번째 인덱스</li></ul></li></ul><h3 id="length-property"><a href="#length-property" class="headerlink" title="length property"></a>length property</h3><ul><li>함수 정의 시, 매개변수가 몇개인지 매개변수 갯수를 의미</li></ul><h2 id="즉시호출함수표현식-IIFE"><a href="#즉시호출함수표현식-IIFE" class="headerlink" title="즉시호출함수표현식 (IIFE)"></a>즉시호출함수표현식 (IIFE)</h2><ul><li>함수를 선언하자마자 호출문(); 바로 사용</li><li>이를 표현하고자, function문 전체를 ()로 감싸줌</li><li>단 <em>한번만</em> 호출가능</li><li>지역변수만을 사용한다는 장점 (전체js를 내부에 넣어놓으면, 전체 코드를 전역변수없이 사용 가능)</li><li>익명사용이 일반적</li></ul><h2 id="내부-함수"><a href="#내부-함수" class="headerlink" title="내부 함수"></a>내부 함수</h2><ul><li>지역함수: 스코프의 조절을 위해 사용</li></ul><h2 id="콜백-함수"><a href="#콜백-함수" class="headerlink" title="콜백 함수"></a>콜백 함수</h2><ul><li>특정 이벤트가 발생했을 때, 시스템(브라우저)에 의해 호출 (이벤트 핸들러)</li><li>즉, 개발자가 명시적으로 호출X, 브라우저에게 호출하라고 시킬 뿐</li></ul><h2 id="공부하는-방법"><a href="#공부하는-방법" class="headerlink" title="공부하는 방법"></a>공부하는 방법</h2><ol><li>다른이의 코드를 읽기</li><li>눈으로만 읽기보다, 손으로 쳐가면서 읽기</li><li>헷갈린다면, 한줄 한줄 디버깅하면서 확인하기</li></ol><h2 id="채용공고"><a href="#채용공고" class="headerlink" title="채용공고"></a>채용공고</h2><p>채용공고를 보면 공부하는 답이 보임</p><p>###[우아한형제들 프론트엔드]</p><ul><li>[언어] HTML(5), CSS, Javascript(최소 ES5) 기본 지식 보유</li><li>[환경] AWS, Git &amp; Github, HTTP, RESTful API 클라이언트 개발 경험<ul><li>기본적인 용어정리, 이론을 무시하지말자 (면접에서 중요도가 점차 상승추세)</li></ul></li><li>[구조] Javascript MV*  기반 웹앱 개발 및 운영 경험 (Angular, React, Backbone 등)<ul><li>단순히 프로그램명만 적지 않은 이유: 왜? 그게 필요한지, 왜 쓰는지를 알고 쓰는가?</li></ul></li><li>[도구] Grunt, Gulp, Webpack, Browserify 등의 도구 경험자</li><li>기획/디자인/운영 등 다양한 직군과 같이 문제를 정의하고 해결책을 찾아나갈 수 있는 협업 능력</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>자바스크립트 과정에 들어오면서 강의 후 자습을 하면서도 어떤 방법으로 하는 것이 효율적인지 몰라 조금 헤맨것이 사실. 오늘 강사님의 기본적인 듯 하지만 자신의 진로방향에 맞춘 공부방법에 대한 지침(?)이 많은 도움이 될 것 같다.</li><li>자칫 헷갈릴 수 있는 용어들이 많으나, 확실히 복습 예습을 하면서 조금씩 친숙해지니 2번 볼때와 3번 볼때의 이해도가 다르다. 뭐든 꾸준히가 최고인듯!</li><li>객체와 함수에 대한 기본지식들은 앞으로 코딩을 할때 생각의 기초가 될 수있으므로 기억하고 기억하자</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;객체-Object&quot;&gt;&lt;a href=&quot;#객체-Object&quot; class=&quot;headerlink&quot; title=&quot;객체 (Object)&quot;&gt;&lt;/a&gt;객체 (Object)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pass by reference&lt;ul&gt;
&lt;li&gt;기본 자료 
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170927 Control Flow - Algorithm 제어문을 활용한 알고리즘</title>
    <link href="https://SunnySunhwa.github.io/2017/09/27/TIL-170927/"/>
    <id>https://SunnySunhwa.github.io/2017/09/27/TIL-170927/</id>
    <published>2017-09-27T05:07:12.000Z</published>
    <updated>2018-07-10T11:01:46.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="알고리즘-퀴즈"><a href="#알고리즘-퀴즈" class="headerlink" title="알고리즘 퀴즈"></a>알고리즘 퀴즈</h1><h2 id="1-for문을-사용하여-0부터-10미만의-정수-중에서-짝수만을-작은-수부터-출력하시오"><a href="#1-for문을-사용하여-0부터-10미만의-정수-중에서-짝수만을-작은-수부터-출력하시오" class="headerlink" title="1.for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오."></a>1.for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-for문을-사용하여-0부터-10미만의-정수-중에서-짝수만을-작은-수부터-문자열로-출력하시오"><a href="#2-for문을-사용하여-0부터-10미만의-정수-중에서-짝수만을-작은-수부터-문자열로-출력하시오" class="headerlink" title="2.for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 문자열로 출력하시오."></a>2.for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 문자열로 출력하시오.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i + <span class="string">''</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-for문을-사용하여-0부터-10미만의-정수-중에서-홀수만을-큰수부터-출력하시오"><a href="#3-for문을-사용하여-0부터-10미만의-정수-중에서-홀수만을-큰수부터-출력하시오" class="headerlink" title="3. for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오."></a>3. for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-while문을-사용하여-0-부터-10-까지-정수-중에서-짝수만을-작은-수부터-출력하시오"><a href="#4-while문을-사용하여-0-부터-10-까지-정수-중에서-짝수만을-작은-수부터-출력하시오" class="headerlink" title="4. while문을 사용하여 0 부터 10 까지 정수 중에서 짝수만을 작은 수부터 출력하시오."></a>4. while문을 사용하여 0 부터 10 까지 정수 중에서 짝수만을 작은 수부터 출력하시오.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">  i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-while문을-사용하여-0부터-10미만의-정수-중에서-홀수만을-큰수부터-출력하시오"><a href="#5-while문을-사용하여-0부터-10미만의-정수-중에서-홀수만을-큰수부터-출력하시오" class="headerlink" title="5. while문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오."></a>5. while문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">9</span>;</div><div class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">  i--;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="6-for-문을-사용하여-0-부터-10-미만의-정수의-합을-출력하시오"><a href="#6-for-문을-사용하여-0-부터-10-미만의-정수의-합을-출력하시오" class="headerlink" title="6. for 문을 사용하여 0 부터 10 미만의 정수의 합을 출력하시오"></a>6. for 문을 사용하여 0 부터 10 미만의 정수의 합을 출력하시오</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</div><div class="line">  sum += i;</div><div class="line">  i++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'총합은:'</span> + sum);</div></pre></td></tr></table></figure><h2 id="7-1부터-20까지의-정수-중에서-2-또는-3의-배수가-아닌-수의-총합을-구하시오"><a href="#7-1부터-20까지의-정수-중에서-2-또는-3의-배수가-아닌-수의-총합을-구하시오" class="headerlink" title="7. 1부터 20까지의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오"></a>7. 1부터 20까지의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> || i % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">continue</span>; &#123;</div><div class="line">    sum += i;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'총합은:'</span> + sum);</div></pre></td></tr></table></figure><h2 id="8-1부터-20까지의-정수-중에서-2-또는-3의-배수인-수의-총합을-구하시오"><a href="#8-1부터-20까지의-정수-중에서-2-또는-3의-배수인-수의-총합을-구하시오" class="headerlink" title="8. 1부터 20까지의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오"></a>8. 1부터 20까지의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> || i % <span class="number">3</span> == <span class="number">0</span>) &#123;</div><div class="line">    sum += i;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'총합은:'</span> + sum);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure><h2 id="9-두-개의-주사위를-던졌을-때-눈의-합이-6-이-되는-모든-경우의-수를-출력하시오"><a href="#9-두-개의-주사위를-던졌을-때-눈의-합이-6-이-되는-모든-경우의-수를-출력하시오" class="headerlink" title="9. 두 개의 주사위를 던졌을 때, 눈의 합이 6 이 되는 모든 경우의 수를 출력하시오"></a>9. 두 개의 주사위를 던졌을 때, 눈의 합이 6 이 되는 모든 경우의 수를 출력하시오</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</div><div class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) &#123;</div><div class="line">    sum == i + j;</div><div class="line">    <span class="keyword">if</span> (i + j == <span class="number">6</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'['</span> + i + <span class="string">','</span> + j + <span class="string">']'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="10-삼각형출력-문자열로-완성하라-개행문자를-사용하여-개행한다"><a href="#10-삼각형출력-문자열로-완성하라-개행문자를-사용하여-개행한다" class="headerlink" title="10. 삼각형출력,문자열로 완성하라. 개행문자를 사용하여 개행한다."></a>10. 삼각형출력,문자열로 완성하라. 개행문자를 사용하여 개행한다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// var sum = '';</span></div><div class="line">  <span class="comment">// for (i = 1; i &lt;= 5; i++) &#123;</span></div><div class="line">  <span class="comment">//   sum += '*';</span></div><div class="line">  <span class="comment">//   console.log(sum);</span></div><div class="line">  <span class="comment">// &#125;</span></div><div class="line">  <span class="comment">/* 개행으로 하는 방법*/</span></div><div class="line"><span class="keyword">var</span> star = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</div><div class="line">    star += <span class="string">'*'</span>;</div><div class="line">  &#125;</div><div class="line">  star += <span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(star);</div><div class="line"><span class="comment">/* 함수를 사용하는 방법*/</span></div><div class="line"><span class="comment">// for (i = 1; i &lt;= 5; i++) &#123;</span></div><div class="line"><span class="comment">//   console.log('*'.repeat(i));</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">////////////////////////</span></div></pre></td></tr></table></figure><h2 id="11-삼각형출력-3줄-5줄"><a href="#11-삼각형출력-3줄-5줄" class="headerlink" title="11. 삼각형출력 3줄 + 5줄"></a>11. 삼각형출력 3줄 + 5줄</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> starCount = <span class="string">''</span>;</div><div class="line"><span class="keyword">var</span> starSum = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  starCount += <span class="string">'*'</span>;</div><div class="line">  starSum += starCount + <span class="string">'\n'</span>;</div><div class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(starSum);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(starSum);</div></pre></td></tr></table></figure><h2 id="12-정삼각형-5줄"><a href="#12-정삼각형-5줄" class="headerlink" title="12. 정삼각형 (5줄)"></a>12. 정삼각형 (5줄)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++) &#123;</div><div class="line">  <span class="keyword">var</span> star = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">5</span>; i &gt; a; i--) &#123;</div><div class="line">    star += <span class="string">' '</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt; (<span class="number">2</span> * a - <span class="number">1</span>); s++) &#123;</div><div class="line">    star += <span class="string">'*'</span>;</div><div class="line">  &#125;</div><div class="line">  result += star + <span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure><h2 id="13-역정삼각형"><a href="#13-역정삼각형" class="headerlink" title="13. 역정삼각형"></a>13. 역정삼각형</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++) &#123;</div><div class="line">  <span class="keyword">var</span> star = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; a; i++) &#123;</div><div class="line">    star += <span class="string">' '</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">9</span>; s &gt;= (<span class="number">2</span> * a - <span class="number">1</span>); s--) &#123;</div><div class="line">    star += <span class="string">'*'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(star);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>‘아는 것과 설명할 수 있는 것은 다르다’ 는 말을 실감</li><li>눈으로만 익혀서 안다고 생각했는데 한차례 내 생각으로 풀어나가는 것에 대해 어려움을 느꼈다</li><li>돌아가며 자신의 풀이방법을 설명하는데, 비슷한것도 있지만 정말 다르게 생각한 사람들도 있어서 놀라울따름!</li><li>코딩은 정말 개발자가 어떤식으로 생각하느냐가 그대로 나타나는 것 같다 (11번을 문제에서 더 길어질 경우를 대비한 퍼포먼스성?을 하나도 염두에 두지 않고 나는 마냥 가볍게 풀려고 했는데 다른이는 그런걸 염두에 두더라;)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;알고리즘-퀴즈&quot;&gt;&lt;a href=&quot;#알고리즘-퀴즈&quot; class=&quot;headerlink&quot; title=&quot;알고리즘 퀴즈&quot;&gt;&lt;/a&gt;알고리즘 퀴즈&lt;/h1&gt;&lt;h2 id=&quot;1-for문을-사용하여-0부터-10미만의-정수-중에서-짝수만을-작은-수부터-출력하
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170926 Data type(자료형), Control Flow(제어문)</title>
    <link href="https://SunnySunhwa.github.io/2017/09/26/TIL-170926/"/>
    <id>https://SunnySunhwa.github.io/2017/09/26/TIL-170926/</id>
    <published>2017-09-26T05:06:41.000Z</published>
    <updated>2018-07-10T11:01:37.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data-type-자료형"><a href="#Data-type-자료형" class="headerlink" title="Data type (자료형)"></a>Data type (자료형)</h1><ul><li>기본자료형 6개 + 객체형 1개 = 총 7개</li></ul><h2 id="1-기본자료형-primitive-data-type"><a href="#1-기본자료형-primitive-data-type" class="headerlink" title="1. 기본자료형 (primitive data type)"></a>1. 기본자료형 (primitive data type)</h2><ul><li>변경 불가능한 값 (immutable value)</li><li>Pass-by-value: 값에 의한 전달 (재할당 시, 해당 값을 복사)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> x = num;</div><div class="line"><span class="comment">// 이때 x는 num의 값을 복사하여 새로운 메모리 공간에 할당</span></div></pre></td></tr></table></figure></li></ul><ol><li>Boolean: true, false</li><li>null: 의도적으로 변수값이 없음을 나타냄 (false로 취급)</li><li>undefined: 값을 할당하지 않은 변수의 값 (false로 취급)</li><li>Number: 정수, 실수, 음의 정수, infinity, NaN</li><li>String: ‘’, “” 로 사용하는 문자열</li><li>Symbel : ECMAScript 6에서 추가, 유일무이한 프로퍼티 키</li></ol><h2 id="2-객체형-Objective-data-type"><a href="#2-객체형-Objective-data-type" class="headerlink" title="2. 객체형 (Objective data type)"></a>2. 객체형 (Objective data type)</h2><ul><li>참조형이라고도 불림</li><li>기본자료형을 제외한 나머지 값들 (배열, 함수, 정규표현식 등)</li></ul><h1 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h1><ul><li>앞 문자는 영문자, underscore, $ 로 시작해야함</li><li>이후 숫자 사용도 가능</li><li>대소문자 구별</li><li>문법적으로는 중복선언이 가능하나, 사용 비추천 (의도하지 않게 변수값을 변경할 수 있음)</li><li>var키워드 생략을 허용하나, 전역변수가 됨으로 사용 비추천</li><li>동적 타이핑: undefined, object, number, String등 여러 데이터 타입을 가질 수 있음</li><li>Function-level scope</li></ul><h2 id="변수-호이스팅"><a href="#변수-호이스팅" class="headerlink" title="변수 호이스팅"></a>변수 호이스팅</h2><p><em>변수의 3단계 생성과정</em></p><ol><li>선언 단계</li><li>초기화 단계</li><li>할당 단계</li></ol><ul><li>변수는 선언단계와 초기화단계가 한번에 이루어짐</li><li>스코프에 변수를 등록 &gt; 메모리에 공간을 확보 &gt; ‘undefined’로 값을 초기화</li><li>변수를 할당해야만, 3단계 할당 단계가 진행</li><li>즉, 선언하지 않은 변수의 값을 출력하면 ‘undefined’값을 반환 (JS 특징)</li></ul><h1 id="5-연산자"><a href="#5-연산자" class="headerlink" title="5. 연산자"></a>5. 연산자</h1><h2 id="산술연산자"><a href="#산술연산자" class="headerlink" title="산술연산자"></a>산술연산자</h2><ol><li>덧셈, 뺄셈, 곱셈, 나눗셈, 나머지, 증가(++), 감소(–)</li><li>증가, 감소 연산자의 위치에 따른 연산방법<ul><li>++ : 선대입후증가 (z = x++;) / 선증가후대입 (z = ++x;)</li><li>– : 선대입후감소 (z = x–;) / 선감소후대입 (z = –x;)</li></ul></li><li>‘+’연산자는 좌항 or 우항에 문자열이 있을 시, 문자열로 더함</li></ol><h2 id="대입연산자"><a href="#대입연산자" class="headerlink" title="대입연산자"></a>대입연산자</h2><ul><li>= : 우항값을 좌항에 대입함 (수학의 ‘같다’와 다름)</li><li>단축표기법 (ex: x += y —-&gt; x = x + y)</li></ul><h2 id="비교연산자"><a href="#비교연산자" class="headerlink" title="비교연산자"></a>비교연산자</h2><ul><li>반환값의 타입이 Boolean</li><li><a href="http://poiemaweb.com/js-operator#3-비교-연산자-comparison-operators" target="_blank" rel="external">비교연산자 표</a></li></ul><ol><li><p>== 과 === 의 차이</p><ol><li><p>== (동등비교, loose equality)</p><ul><li>자료의 타입을 강제변환하여 비교함</li><li>최대한 true 값을 가지고자 함</li></ul></li><li><p>=== (일치비교, strict equality)</p><ul><li>자료의 타입까지 일치해야 true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</div><div class="line">x == <span class="number">5</span> ;  <span class="comment">//true</span></div><div class="line">x == <span class="string">'5'</span>; <span class="comment">//true</span></div><div class="line"></div><div class="line">x === <span class="number">5</span>  <span class="comment">//true</span></div><div class="line">x === <span class="string">'5'</span>; <span class="comment">//false</span></div></pre></td></tr></table></figure></li></ol></li><li><p>? (삼항연산자, ternary operator)</p><ul><li>조건문처럼, 조건이 true일때 반환할 값과 false일때 반환할 값 설정 가능<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 조건 ? 조건이 ture일때 반환할 값 : 조건이 false일때 반환할 값</span></div><div class="line"><span class="keyword">var</span> condition = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> result = condition ? <span class="string">'true'</span> : <span class="string">'false'</span>;</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 'true'</span></div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="논리연산자"><a href="#논리연산자" class="headerlink" title="논리연산자"></a>논리연산자</h2><ol><li><p>|| (or, 논리 합 연산자)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 둘 중 하나의 값이 true라면 true</span></div><div class="line"><span class="keyword">var</span> o1 =  <span class="literal">true</span> || <span class="literal">true</span>;     <span class="comment">// t || t returns true</span></div><div class="line"> <span class="keyword">var</span> o2 = <span class="literal">false</span> || <span class="literal">true</span>;     <span class="comment">// f || t returns true</span></div><div class="line"> <span class="keyword">var</span> o3 =  <span class="literal">true</span> || <span class="literal">false</span>;    <span class="comment">// t || f returns true</span></div><div class="line"> <span class="keyword">var</span> o4 = <span class="literal">false</span> || (<span class="number">3</span> == <span class="number">4</span>); <span class="comment">// f || f returns false</span></div></pre></td></tr></table></figure></li><li><p>&amp;&amp; (and, 논리 곱 연산자)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 둘 다 true여야만 true</span></div><div class="line"><span class="keyword">var</span> a1 =  <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>;     <span class="comment">// t &amp;&amp; t returns true</span></div><div class="line"><span class="keyword">var</span> a2 =  <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;    <span class="comment">// t &amp;&amp; f returns false</span></div><div class="line"><span class="keyword">var</span> a3 = <span class="literal">false</span> &amp;&amp; <span class="literal">true</span>;     <span class="comment">// f &amp;&amp; t returns false</span></div><div class="line"><span class="keyword">var</span> a4 = <span class="literal">false</span> &amp;&amp; (<span class="number">3</span> == <span class="number">4</span>); <span class="comment">// f &amp;&amp; f returns false</span></div></pre></td></tr></table></figure></li><li><p>! (not, 논리 부정 연산자)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> n1 = !<span class="literal">true</span>;  <span class="comment">// false</span></div><div class="line"> <span class="keyword">var</span> n2 = !<span class="literal">false</span>; <span class="comment">// true</span></div><div class="line"> <span class="keyword">var</span> n3 = !<span class="string">'Cat'</span>; <span class="comment">// false</span></div><div class="line"><span class="comment">// 빈문자열이 아닌 이상 true로 간주하여, 'Cat'은 true로 취급</span></div></pre></td></tr></table></figure></li></ol><h2 id="단축-평가-Short-Circuit-Evaluation"><a href="#단축-평가-Short-Circuit-Evaluation" class="headerlink" title="단축 평가(Short-Circuit Evaluation)"></a>단축 평가(Short-Circuit Evaluation)</h2><ul><li>논리연산자가 boolean값과 함꼐 사용되지 않을 경우</li><li>&amp;&amp; : 반드시 뒤의 값까지 봐야 하는 경우</li><li>|| : 앞의 값만으로도 검사에 지장이 없는 경우<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="literal">true</span> || anything) <span class="comment">// true</span></div><div class="line">(<span class="literal">false</span> || anything) <span class="comment">// anything</span></div><div class="line">(<span class="literal">true</span> &amp;&amp; anything) <span class="comment">// anything</span></div><div class="line">(<span class="literal">false</span> &amp;&amp; anything) <span class="comment">// false</span></div></pre></td></tr></table></figure></li></ul><h2 id="타입-연산자-Type-Operators"><a href="#타입-연산자-Type-Operators" class="headerlink" title="타입 연산자(Type-Operators)"></a>타입 연산자(Type-Operators)</h2><ul><li><p><code>typeof [sth]</code> 피연산자의 데이터 타입을 문자열로 반환</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'John'</span>); <span class="comment">// string</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myCar); <span class="comment">// undefined (설계적 결함)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object (설계적 결함)</span></div></pre></td></tr></table></figure></li><li><p><code>instanceof [sth]</code> 객체가 동일 객체형의 인스턴스이면 <code>true</code> 반환</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(me <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></div></pre></td></tr></table></figure></li></ul><h2 id=""><a href="#" class="headerlink" title="!!"></a>!!</h2><ul><li><p>피연산자를 Boolean값으로 변환</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(!!<span class="number">1</span>);         <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>);         <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(!!<span class="string">'string'</span>);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>);        <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>);      <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(!!&#123;&#125;);        <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(!![]);        <span class="comment">// true</span></div><div class="line"> <span class="comment">// 빈 객체라도 존재하기만 하면 true로</span></div></pre></td></tr></table></figure></li><li><p>객체의 존재를 확인할때도 유용하게 쓰임</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj;</div><div class="line"><span class="built_in">console</span>.log(!!obj); <span class="comment">// false</span></div><div class="line"></div><div class="line">obj = &#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(!!obj); <span class="comment">// true</span></div></pre></td></tr></table></figure></li></ul><h1 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h1><h2 id="블록구문"><a href="#블록구문" class="headerlink" title="블록구문"></a>블록구문</h2><ul><li>불록구문: 구문들의 집합</li><li>함수, 객체리터럴, 흐름제어구문 등에서 사용</li><li>{} 중괄호 사이를 블록구문이라고 함.<h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2></li></ul><ol><li><p>if문</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (조건식A) &#123;</div><div class="line">  <span class="comment">// 조건식A가 참이면 이 코드블록이 실행</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (조건식B) &#123;</div><div class="line">  <span class="comment">// 조건식A가 거짓이고 조건식B가 참이면 이 코드블록이 실행</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 조건식A, B가 모두 거짓이면 이 코드블록이 실행</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>switch문</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 선택형 조건일 경우 사용할 수 있음</span></div><div class="line"><span class="comment">// 그러나 현업에서 거의 쓰이지 않음</span></div><div class="line"><span class="comment">// break; 를 잊지 말되 마지막엔 생략가능</span></div><div class="line"><span class="keyword">var</span> color = <span class="string">'red'</span>;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (color) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'yellow'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'yellow color'</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">'red'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'red color'</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">'blue'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'blue color'</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'unknown color'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><ol><li>for문</li></ol><ul><li>for문은 그 실행순서가 중요</li><li>초기문에서 사용된 변수는 전역변수로 처리(ES5 특징)</li><li>모든 식은 선택사항임 (어떤식도 쓰지 않으면 무한루프)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ([초기문]; [조건문]; [증감문]) &#123;</div><div class="line">  구문;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 예시: 0부터 10미만의 모든 정수 출력</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ol><li>while문</li></ol><ul><li>조건문이 참이면 코드블럭을 계속 반복실행</li><li>(조건문이 언제나 참일경우)무한루프를 탈출하기 위해 break 사용<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(조건)&#123;</div><div class="line">  <span class="comment">// 조건이 참이면 구문을 실행</span></div><div class="line">  <span class="comment">// 조건이 거짓일 때까지 반복</span></div><div class="line">  구문;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 예시: n이 3보다 작을 때까지 계속 반복</span></div><div class="line"><span class="keyword">while</span> (n &lt; <span class="number">3</span>) &#123;</div><div class="line">  n++;</div><div class="line">  x += n;</div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ol><li>do while문</li></ol><ul><li>while과 거의 비슷하나 조건문을 확인하기 전에 무조건 1회 실행<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 현업에서 거의 쓰이지 않는다.</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">  i++;</div><div class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">3</span>);</div></pre></td></tr></table></figure></li></ul><ol><li>continue</li></ol><ul><li>break문은 반복문 하나를 탈출하는 반면, continue는 이후 구문을 스킵 후, 반복문의 조건문으로 이동<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 7</span></div><div class="line"><span class="comment">// 9</span></div></pre></td></tr></table></figure></li></ul><h2 id="평가"><a href="#평가" class="headerlink" title="평가"></a>평가</h2><ol><li>암묵적 강제 형 변화</li></ol><ul><li>JavaScript에서는 조건식을 평가할 때 여러 환경의 문맥(context)을 고려하여 최대한 참/거짓의 <code>boolean</code>값으로 해석하려 노력한다. 이때 암묵적인 강제 형 변화가 발생</li><li>이를 통해 조건식을 평가한다.</li><li>이때 의도하지 않은 값이 만들어질 수 있어 주의가 필요.</li></ul><ol><li>Type Conversion table</li></ol><ul><li><a href="http://poiemaweb.com/js-control-flow#42-type-conversion-table" target="_blank" rel="external">표 보기</a></li></ul><ol><li>Data type conversion</li></ol><ul><li><p>string -&gt; number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val = <span class="string">'123'</span>;</div><div class="line"></div><div class="line">val = +val; <span class="comment">// unary "+" operator</span></div><div class="line"><span class="comment">// val = val * 1;</span></div><div class="line"><span class="comment">// val = parseInt(val);</span></div><div class="line"><span class="comment">// (비추) val = Number(val);</span></div></pre></td></tr></table></figure></li><li><p>number -&gt; string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val = <span class="number">123</span>;</div><div class="line"></div><div class="line">val = val + <span class="string">''</span>;</div><div class="line"><span class="comment">// val = val.toString();</span></div><div class="line"><span class="comment">// (비추) val = String(val);</span></div></pre></td></tr></table></figure></li></ul><ol><li>Truthy &amp; Falsy values</li></ol><ul><li>긍정적인 느낌은 <code>true</code>, 부정적인 느낌은 <code>false</code></li><li><code>false</code>으로 간주되는 대표적인 (Falsy values)<ul><li><code>false</code></li><li><code>undefined</code></li><li><code>null</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code> (빈 문자열)</li></ul></li></ul><ol><li>Checking equality<ul><li>타입까지 비교해주는 일치연산자(===, !===) 사용 권장</li></ul></li><li>Checking Existence<ul><li>객체나 배열(배열도 객체)이 값을 갖고 있다면 true로 간주</li><li>요소의 존재 -&gt; true, 존재하지 않음 -&gt; false</li><li>하지만 간주된다는 것이지 실제 boolean값 <code>true</code>와 같지 X</li></ul></li></ol><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>어떤 것을 변수로, 어떤 제어문을, 어떤 구문으로 표현하는가에 대한 고민을 할수록 양질의 코딩을 할 수 있다</li><li>‘다들 그렇게 사용하니까’ 보다는 ‘왜’ 그렇게 짰는지가 중요하다</li><li>그러려면 자료형 별 기본적인 특성과 각 제어문의 특징을 잘 파악해두자</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Data-type-자료형&quot;&gt;&lt;a href=&quot;#Data-type-자료형&quot; class=&quot;headerlink&quot; title=&quot;Data type (자료형)&quot;&gt;&lt;/a&gt;Data type (자료형)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;기본자료형 6개 + 객체형 1
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170925 Javascript란</title>
    <link href="https://SunnySunhwa.github.io/2017/09/25/TIL-170925/"/>
    <id>https://SunnySunhwa.github.io/2017/09/25/TIL-170925/</id>
    <published>2017-09-25T05:03:44.000Z</published>
    <updated>2018-07-10T11:01:28.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h3><ul><li>문법 검사 확장 프로그램</li><li>프로젝트를 할떄마다 해당 폴더에 설치</li><li>익숙해지면 set up 기준 git clone으로 응용</li><li>eslint.org</li><li><a href="http://poiemaweb.com/eslint" target="_blank" rel="external">http://poiemaweb.com/eslint</a></li><li>해당 설치하고 vscode하단에 html파일을 로드했을 때, 하단에 ESLint 흰글씨가 나와야함</li><li>자바스크립트 파일뿐만이 아니라, html에서 불러온 js파일도 문법검사를 해줌</li><li>위 링크의 방법으로 설치했을때 ESLint!노란색으로 표기되면 오류</li><li><p>그럴경우 밑의 방법으로 진행 (글로벌이 아닌 로컬로)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$npm init --y</div><div class="line">$npm install -save-dev eslint</div><div class="line">$./node_modules/.bin/eslint --init</div></pre></td></tr></table></figure></li><li><p>이후 퀘스쳔은 상단 링크와 동일하게 진행</p></li></ul><h1 id="프로그래밍이란"><a href="#프로그래밍이란" class="headerlink" title="프로그래밍이란?"></a>프로그래밍이란?</h1><p>상식(지식, 언어 등)을 바탕으로 한 커뮤니케이션과 같다. 약속된 문법(syntax)을 맥락(semantic)에 맞게 표현해야 좋은 프로그래밍.</p><h1 id="컴퓨팅-사고-Computational-thinking"><a href="#컴퓨팅-사고-Computational-thinking" class="headerlink" title="컴퓨팅 사고(Computational thinking)"></a>컴퓨팅 사고(Computational thinking)</h1><p>문제 해결을 목적으로 프로그래밍을 할 때 컴퓨터가 이해할 수 있는 구문을 어떻게 만들지에 관한 인간의 사고. 문제를 정확히 정의하고, 여러 단계로 나눈 뒤 알맞게 배열하는 방식이 요구된다.</p><h1 id="자바스크립트의-등장"><a href="#자바스크립트의-등장" class="headerlink" title="자바스크립트의 등장"></a>자바스크립트의 등장</h1><h2 id="자바스크립트-역사"><a href="#자바스크립트-역사" class="headerlink" title="자바스크립트 역사"></a>자바스크립트 역사</h2><ul><li><ol><li>Brendan Eich</li></ol></li><li>웹브라우저 안에서, 웹페이지에 효과를 주거나 기능을 향상시키는 목적</li><li>1996년부터 표준화 작업 -&gt; ECMAScript</li></ul><h2 id="자바스크립트-특징"><a href="#자바스크립트-특징" class="headerlink" title="자바스크립트 특징"></a>자바스크립트 특징</h2><ul><li>인터프리터 언어</li><li>컴파일 언어와 달리 중간 파일을 생성하지 않고 곧바로 코드를 파싱(해석)하고 실행</li><li>단점: 실행해봐야 오류를 찾을 수 있음</li></ul><ul><li>규칙이 자유로움.</li><li>다른 언어와 달리 정해진 타입이 없어 절차형,명령형,객체지향 등 다양한 코딩 방법론 가능</li><li>다른 언어에 비해 자유로운 설계, 그만큼 사용 방식에 혼란이 가중 될 수 있음</li></ul><h1 id="자바스크립트가-활용되는-환경-1-브라우저를-이해하자"><a href="#자바스크립트가-활용되는-환경-1-브라우저를-이해하자" class="headerlink" title="자바스크립트가 활용되는 환경 1 : 브라우저를 이해하자"></a>자바스크립트가 활용되는 환경 1 : 브라우저를 이해하자</h1><pre><code>- 자바스크립트가 동작하는 환경 중 하나인 브라우저의 작동방식을 이해할 필요가 있음- 최근에는 경량화된 v8엔진을 기반으로 한 NODE.JS에서도 자바스크립트가 동작함- 우선 웹은 HTTP프로토콜에 따라 작동 (프로토콜의 종류는 1.1버전 2.0버전)- 기본 동작 원리1. Client측에서 원하는 IP/도메인을 요청(Request)2. Server에서 요청(Request)을 확인한 후, 클라이언트가 요청한 파일이 있는지 확인3. 파일(HTML,CSS,JS 등)이 있으면 해당 파일과 함께 응답(Response)메시지를 보냄 (파일이 없으면 404 not found 오류메세지)  4. Server에서 받은 파일을 렌더링 한 후, 그 결과물을 브라우저 화면에 표시</code></pre><h2 id="브라우저가-렌더링-하는-방식"><a href="#브라우저가-렌더링-하는-방식" class="headerlink" title="브라우저가 렌더링 하는 방식"></a>브라우저가 렌더링 하는 방식</h2><pre><code>- 브라우저가 HTML파일을 렌더링 할 떄 CSS/JS 구문을 만나면 HTML렌더링을 멈추고 해당 구문을 모두 해석- 이때 CSS는 렌더링의 결과물로 CSSOM이라는 트리를 남김- 이 트리는 나중에 HTML렌더링의 결과물인 돔 트리와 합쳐짐 -&gt; 렌더링 트리- 렌더링 트리는 노드들의 레이아웃(높이,너비 등)을 조정하는 데 사용- [렌더링 트리 생성, 레이아웃 및 페인트]:https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ko</code></pre><h3 id="참고-script-태그-위치"><a href="#참고-script-태그-위치" class="headerlink" title="[참고] script 태그 위치"></a>[참고] script 태그 위치</h3><pre><code>- script 태그 안에 위치한 자바스크립트 코드는 위치에 따라 HTML DOM 생성에 악영향을 미칠 수 있음 (렌더링과 실행이 동시에 이뤄지기 때문에)- --&gt; 자바스크립트 관련 코드는 body태그가 마무리된 그 다음 지점에 입력하는 것을 추천- 만약 자바스크립트 렌더링을 HTML 렌더링과 동시에 이뤄지게 하고 싶다면 HTML5 표준에 정의되어 있는 defer 속성을 입력1.&lt;head&gt;에 삽입되는 경우- defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시- IE8이하는 지원하지 않으므로 두번째 경우를 사용하도록 권장<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">...생략...</div><div class="line">&lt;title&gt;메인 페이지&lt;/title&gt;</div><div class="line">&lt;script defer src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>2.&lt;/body&gt;앞에 삽입되는 경우- 문서의 DOM 로드가 완료된 시점에 javascript 로드가 실행되게 함<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">...생략...</div><div class="line">&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></code></pre><h3 id="구문-statement"><a href="#구문-statement" class="headerlink" title="구문(statement)"></a>구문(statement)</h3><ul><li>실행시키는 각각의 명령</li><li>값, 연산자, 표현식, 키워드, 주석으로 구성되는 명령 집합.</li><li>구문은 코드블록(){구문;}으로 그룹화: 함께 실행되어야함을 정의</li></ul><h3 id="표현식"><a href="#표현식" class="headerlink" title="표현식"></a>표현식</h3><ul><li>값, 변수, 연산자의 조합</li><li>연산을 통해 하나의 값으로 평가될 수 있는 문장</li></ul><h3 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h3><ul><li>값을 할당, 참조하기 위해 사용</li><li>변수명: 메모리에 할당된 공간을 가리키는 식별자</li></ul><h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><ul><li>하나 혹은 그 이상의 값을 하나의 값으로 만들때 사용</li></ul><h3 id="키워드"><a href="#키워드" class="headerlink" title="키워드"></a>키워드</h3><ul><li>수행할 동작을 규정한 것 (var, function…)</li></ul><h3 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h3><ul><li>작성된 코드의 의미를 설명하기 위해 사용</li></ul><h1 id="오늘의-느낀점"><a href="#오늘의-느낀점" class="headerlink" title="오늘의 느낀점"></a>오늘의 느낀점</h1><ul><li>드디어 기다리던 자바스크립트 수업 시작!!! :) 기대만발</li><li>설명할 수 있을 때까진 알고있는게 아니다.</li><li>자바스크립트 기본 용어에 친숙해 질 수 있도록 노력하자</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Eslint&quot;&gt;&lt;a href=&quot;#Eslint&quot; class=&quot;headerlink&quot; title=&quot;Eslint&quot;&gt;&lt;/a&gt;Eslint&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;문법 검사 확장 프로그램&lt;/li&gt;
&lt;li&gt;프로젝트를 할떄마다 해당 폴더에 설치&lt;/li&gt;
      
    
    </summary>
    
      <category term="javascript" scheme="https://SunnySunhwa.github.io/categories/javascript/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/javascript/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170911-23 Responsive Web Design</title>
    <link href="https://SunnySunhwa.github.io/2017/09/23/TIL-170911-23-rwd/"/>
    <id>https://SunnySunhwa.github.io/2017/09/23/TIL-170911-23-rwd/</id>
    <published>2017-09-23T06:58:49.000Z</published>
    <updated>2018-07-10T11:01:11.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="반응형"><a href="#반응형" class="headerlink" title="반응형"></a>반응형</h1><h2 id="img-처리"><a href="#img-처리" class="headerlink" title="img 처리"></a>img 처리</h2><ul><li>부모, img를 따로 줌</li><li>부모사이즈가 늘어나고 줄어남에 따라 img를 맞춤</li><li>img{width: 100%, height: auto;}</li><li>height: auto; 필수 선언</li></ul><ol><li>img의 속성 srcset, sizes 활용하기<ul><li>같은 이미지 몇개를 준비해서 ratio에 따라 다른 이미지를 호출 (2x, 4x..)</li></ul></li><li>picture태그 활용<ul><li>뷰포트에 따라 다른 이미지 보여주기</li><li>지원하지 않는다면, img태그를 보여줘라를 덧붙여 접근성 주기) -ie11 지원X</li><li>picturefill??? 검색해서 script붙여주면 호환되도록 지원해줌</li></ul></li></ol><h2 id="background-처리"><a href="#background-처리" class="headerlink" title="background 처리"></a>background 처리</h2><ul><li>background: orange url(“images/logo.png”) no-repeat 0 0/contain;</li><li>포지션 뒤에 /하고 100% 100% 또는 키워드로 cover, contain 올수있음</li><li>cover:   세로 기준으로 꽉 차게</li><li>contain:  가로 기준으로 꽉 차게 (세로는 Auto값)</li><li>보통 반응형에 많이쓰이나, 배경은 처리하기가 어려워 가상의 이미지(src, alt)값을 주지 않고, ir기법으로 처리하듯 처리함</li></ul><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><ul><li><a href="http://www.vfinspections.com/ggs/goldengridsystem.com/" target="_blank" rel="external">http://www.vfinspections.com/ggs/goldengridsystem.com/</a></li><li><a href="https://960.gs/" target="_blank" rel="external">https://960.gs/</a> (사이트별 사용 컬럼수 확인 가능)</li><li>가상의 그리드가 있다고 생각하고 제작</li><li>가로칸: vertical rhythm.</li><li>세로줄: column.</li><li>column은 보통 2, 4, 8, 12, 16, 24를 많이 사용</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;반응형&quot;&gt;&lt;a href=&quot;#반응형&quot; class=&quot;headerlink&quot; title=&quot;반응형&quot;&gt;&lt;/a&gt;반응형&lt;/h1&gt;&lt;h2 id=&quot;img-처리&quot;&gt;&lt;a href=&quot;#img-처리&quot; class=&quot;headerlink&quot; title=&quot;img 처리&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="html/css" scheme="https://SunnySunhwa.github.io/categories/html-css/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/html-css/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170911-23 Html:tag / CSS:property</title>
    <link href="https://SunnySunhwa.github.io/2017/09/23/TIL-170911-23-property/"/>
    <id>https://SunnySunhwa.github.io/2017/09/23/TIL-170911-23-property/</id>
    <published>2017-09-23T04:55:44.000Z</published>
    <updated>2018-07-10T11:00:58.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="class-”heading”"><a href="#class-”heading”" class="headerlink" title="[class^=”heading”]{}"></a>[class^=”heading”]{}</h2><ul><li>속성 선택자, 헤딩이라는 속성을 가진 클래스를 다 선택하는 선택자</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><span tabindex="0"></span></h3><ul><li>span태그가 의미없는 태그(공실)여도, 키보드 포커스를 받을 수 있도록 tabindx를 씀</li></ul><h3 id="display-block"><a href="#display-block" class="headerlink" title="display:block;"></a>display:block;</h3><ul><li>인라인 요소가 블럭이 되는 순간 상위요소의 블럭만큼의 크기를 갖게됨</li><li>line-height값까지 상속받음</li></ul><h3 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display: inline-block;"></a>display: inline-block;</h3><ul><li>ie6, 7에선 구현X</li><li>인라인 요소는 엔터(포매터 자동)를 치는 형식이 공백을 의미하게됨.</li><li>이떄 부모 선택자에 font-size: 0;을 주고 원래 애한테 계획된 폰트 사이즈를 별도로 입력. 공백은 0이 되게 된다.</li></ul><h3 id="box-size-border-box"><a href="#box-size-border-box" class="headerlink" title="box-size: border-box;"></a>box-size: border-box;</h3><ul><li>패딩, 보더를 포함하여 지정한 width값을 가져라. 기본 width값 계산 알고리즘 변하기</li><li>특히 모바일에서 많이 사용됨</li></ul><h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><ul><li>border-radius: 0 0 50px 50px / 0 0 15px 15px;</li><li>뒤에 4개는 Y축임, 더욱 완만한 곡선으로</li></ul><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><ul><li>속기법을 쓸때는 폰트패밀리 명이 꼭 마지막에!</li><li>앞에 weight, style, capital, 3개는 순서 상관 없음</li><li>이후에 font/line-height, font-family순으로</li></ul><h3 id="아이콘-텍스트"><a href="#아이콘-텍스트" class="headerlink" title="아이콘 텍스트"></a>아이콘 텍스트</h3><ul><li><a href="http://fontello.com/" target="_blank" rel="external">http://fontello.com/</a></li><li>다운받아서, 폰트파일 업로드</li><li>css파일에서 @font-face 따오기</li><li>demo.html에서 모양별 이름 확인</li><li>확인한 이름으로 문자별 할당된 content 값을 적용</li><li>폰트처럼 똑같이 color, size등의 속성을 가질 수 있음.</li></ul><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><ul><li>white-space: nowrap; 일때는 해당하는 요소가 절대 열바꿈 하지 않도록 함</li><li>즉, 인라인요소인 부모선택자의 너비를 넓혀가면서까지 열바꿈 허용 안함</li></ul><h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h3><ul><li>text-shadow: 1px 1px 0 #999, 2px 2px 0 #000;</li><li>,를 이용해 다중으로 입힐 수 있음</li><li>좌표 좌표 블러링 색상 순</li></ul><h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h3><ul><li>x좌표 y좌표 블러 스프레드 색상 순</li></ul><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ol><li>@keyframes 정의</li></ol><ul><li>이름값을 설정하고 {}염</li><li>그 안에 시작점의 상태와 종료지점의 변화상태 속성을 기록</li><li>from{}/to{} 하거나, 0%{}/100%{}로 가능</li></ul><ol><li>적용<ol><li>적용할 클래스요소에 animation: 이름 시간(duration); (필수)</li><li>animation-fill-mode: forwards;를 하면 완료지점 상태를 유지</li><li>animation-iteration-count: # ~ infinite;</li><li>animation-direction: alternate; (순방향-역방향 순환)</li><li>animation-delay: #s; 지연시키기</li><li>animation-timing-function: ease-in-out; 시간조절 효과</li></ol><ul><li>cubic-bezier사이트로 내가 원하는대로 적용 가능</li></ul><ol><li>animation-play-state: paused;</li><li>속기법] animation: text-ani 1s forwards infinite alternate ease-in-out 1s;</li></ol></li></ol><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a><strong>transition</strong></h2><ul><li>hover가 아니라 트리거가 될 클래스에 지정. (animation과 다른점!)</li><li>hover에는 변했을때의 속성 상태값만 선언</li><li>변할 속성이 여러개 가능 (,로 다중 지정 가능)</li><li>즉, delay 역시 다중지정이 가능하여 순차적 동작도 가능</li><li>모든 효과를 한번에 하고싶을때는 속성 값을 property값을 all로 해서 가능</li><li>그러나 다중 지정을 각각 따로 효과를 주고 싶을때에는 세트 속기법 사용</li><li>eg] transition: height 1s 0s, background 1s 1s;</li></ul><ol><li>transition-property:  변할 속성이름 적기 (height, width등)</li><li>transition-duration: 변하는 시간</li><li>transition-delay:  지연 시간</li></ol><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><ul><li>속성] color, image, repeat, position, size, attachment</li><li>position: ## %주면 요소박스의 %와 배경이미지의 %둘다에 적용</li><li>background: orange url(“images/logo.png”) no-repeat 0 0/contain;</li><li>포지션 뒤에 /하고 100% 100% 또는 키워드로 cover, contain 올수있음</li><li>cover:   세로 기준으로 꽉 차게</li><li>contain:  가로 기준으로 꽉 차게 (세로는 Auto값)</li><li>보통 반응형에 많이쓰이나, 배경은 처리하기가 어려워 가상의 이미지(src, alt)값을 주지 않고, ir기법으로 처리하듯 처리함</li></ul><h3 id="gradient"><a href="#gradient" class="headerlink" title="gradient"></a>gradient</h3><ul><li>background-image: linear-gradient(to bottom, red 0%, blue 30%, green 100%);</li><li>백그라운드 이미지에 할당해주어야하며, 그라디언트 타입을 불러옴</li><li>속기법 background: #색상, 그라디언트(방향, 색상 %)로 하게되면 그라디언트를 지원하지 않는 브라우저에선, 색상이 나타나게됨</li><li>이미지가 있다면 이미지, 아니면 색상이 나타나기 때문</li><li>괄호 안에 방향, 색상 시작점%를 순서대로 나열</li><li><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="external">http://www.colorzilla.com/gradient-editor/</a></li></ul><h3 id="배경-다중-적용"><a href="#배경-다중-적용" class="headerlink" title="배경 다중 적용"></a>배경 다중 적용</h3><ul><li>하나의 객체에 배경을 다중으로 줄 수 있음</li><li>색상, 이미지를 함께 쓰는 속기법으로는 다중으로 줄수 없음</li><li>다중으로 적용할때는 이미지 속성 먼저 선언한 후, 색상 속성을 나중에 선언 (우선순위 문제)</li><li>다중으로 쓸때는 가장 위에 올려놓고 싶은 배경이미지를 가장 먼저 선언</li></ul><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><ul><li><a href="https://www.miketaylr.com/pres/html5/forms2.html" target="_blank" rel="external">https://www.miketaylr.com/pres/html5/forms2.html</a></li></ul><ol><li>form - fieldset(그루핑) - legend(타이틀)</li><li>각각 type 설정을 통해 형식을 부여 (text, password, tel, etc)</li><li>label의 for에 input의 id값을 부여해서 연결</li><li>input에 placeholder속성을 통해 입력란에 미리 글씨 입력가능</li><li>required: 해당 input 영역이 필수로 채워져야 함을 나타냄</li></ol><p><strong>CSS 꿀팁</strong></p><ul><li>데코레이션 하는 대상과, 여백을 지정하는 대상을 구분해놓는 것이 이후에 유지보수하기 좋음</li><li>동작하는 대상의 클래스(class-active)는 순서상 원상태의 css보다 뒤에 나와야 함</li><li>유지 보수 시, css의 순서가 바뀌면 동작하지 않기 때문에 동작 클래스에는 !important를 붙이는게 좋음</li><li>html5부터는 인라인요소 안에 블럭요소를 둘수있게됨</li><li>그러나 css에서 부모 인라인을 블럭화해줘야함</li><li>can i use에 사용할 수 없는 기능은 Resource칸에 polyfil을 활용하면 매칭이 가능해질수 있음 (확인요망) </li></ul><h3 id="calc-함수"><a href="#calc-함수" class="headerlink" title="calc(); 함수"></a>calc(); 함수</h3><ul><li>width: calc(100% - 120px)</li><li>전체에서 120px을 뺀 값을 자동 계산.</li><li>연산자 양옆에는 공란(space) 필수!</li></ul><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><ul><li>접근성으로 기계가 날짜임을 알수있도록</li><li>필수속성 datetime=”yy-mm-ddThh:mm:ss”</li></ul><h3 id="CSS-글자수-제한"><a href="#CSS-글자수-제한" class="headerlink" title="CSS 글자수 제한"></a>CSS 글자수 제한</h3><ul><li>말줄임표 사용 시, text-overflow:ellipsis;</li><li>text-overflow는 단독사용시 효과X</li><li>white-space:nowrap;</li><li>overflow:hidden;을 세트로 써야함.</li></ul><h2 id="IR-image-replacement-기법"><a href="#IR-image-replacement-기법" class="headerlink" title="IR (image replacement) 기법"></a>IR (image replacement) 기법</h2><ul><li>텍스트를 감추고, 이미지(배경)만 보여주는 방식</li></ul><ol><li>padding속성 추가<ul><li>css에 해당 마크업에 width, height, padding(top), overflow, box-sizing로 하는 방법</li><li>height만큼 패딩 값을 지정하여 안보이게</li><li>이 방법은 마크업 태그가 button일 경우, 브라우저마다 height가 달라보이게 됨</li><li>이때에는 해당태그 부모요소에 height를 지정해주고, 해당태그에 100%로 상속받게하면 해결</li></ul></li></ol><ol><li><p>마크업에 빈요소(span) + position 추가</p><ul><li>해당하는 마크업안에 빈 요소를 두어, 클래스를 지정(ir-box)</li><li>부모에 position relative, ir-box에 absolute로 두어 띄움</li><li>width:100%, height: 100%하여 부모와 크기 동일하게</li><li>키 포커스를 받으려면 tabindex=”0” 추가</li><li>여러개가 필요한 상태에 배경이미지가 반복으로 사용한다면, 잘라서 사용하도록 -&gt; sprite image형식<ul><li><strong>타스크러너..? 걸프, 그런트러너??스프라이트 스미스?? 웹팩??</strong></li></ul></li><li>서버에 배경이미지를 요청하고 응답하는 횟수를 줄여 더욱 빠르게 사용가능  </li></ul></li><li><p>가상요소 추가</p></li></ol><h3 id="ol-gt-li"><a href="#ol-gt-li" class="headerlink" title="ol &gt; li"></a>ol &gt; li</h3><ul><li>ol 의 li는 list-style: none; 하는 순간, 순서의 의미를 잃어버림</li><li>이럴때에는 counter-increment: number; 를  사용해서 보이진 않지만 순서의 의미를 더할수있음</li><li>counter-increment로 꾸미기가 가능해진 요소는 li:before {content: counter(number, decimal);}을 사용해 숫자가 나타나게 할수있음</li></ul><h3 id="blockquote-quote"><a href="#blockquote-quote" class="headerlink" title="blockquote, quote"></a>blockquote, quote</h3><ul><li>블럭 / 인라인 인용 태그</li><li>속성: cite=”인용 사이트”</li><li>css속성 {quotes: “[[“ “]]”;}</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;class-”heading”&quot;&gt;&lt;a href=&quot;#class-”heading”&quot; class=&quot;headerlink&quot; title=&quot;[class^=”heading”]{}&quot;&gt;&lt;/a&gt;[class^=”heading”]{}&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;속성
      
    
    </summary>
    
      <category term="html-css" scheme="https://SunnySunhwa.github.io/categories/html-css/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/html-css/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_170911-23 Html/CSS layout 관련</title>
    <link href="https://SunnySunhwa.github.io/2017/09/23/TIL-170911-23_layout/"/>
    <id>https://SunnySunhwa.github.io/2017/09/23/TIL-170911-23_layout/</id>
    <published>2017-09-23T04:42:08.000Z</published>
    <updated>2018-07-10T11:00:48.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex;"></a>display: flex;</h1><ul><li><a href="http://flexboxfroggy.com/" target="_blank" rel="external">http://flexboxfroggy.com/</a></li><li>ie 11이상 부터 구현 가능 (원활하지 않음)</li><li>flex아이템은 자식요소가 부모요소의  width값을 넘어도 float처럼 레이아웃이 틀어지지 않음</li><li>부모 요소에 주어야함</li><li>저절로 비율값으로 축소되서 나타남</li><li>열을 변경하고 싶다면, flex-wrap을 사용</li></ul><h3 id="A-flex-direction"><a href="#A-flex-direction" class="headerlink" title="A, flex-direction"></a>A, flex-direction</h3><ul><li>row / cloumn이냐에 따라 가로 or 세로가 메인축이 됨</li><li>메인축의 반대가 교차축이 됨</li><li>속기법] flex-flow: dircetion / wrap;</li></ul><h3 id="A-justify-content"><a href="#A-justify-content" class="headerlink" title="A, justify-content"></a>A, justify-content</h3><ul><li>‘메인축’을 기준으로 움직임</li><li>flex-direction이 reverse라면 기준축 역시 함께 반전됨</li><li>따라서  justify-content 값 역시 함께 반전</li></ul><h3 id="A-align-items"><a href="#A-align-items" class="headerlink" title="A, align-items"></a>A, align-items</h3><ul><li>‘교차축’을 기준으로 움직임</li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul><li>기본값: 0</li><li>마크업 순서를 바꾸고 싶을때</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content:"></a>align-content:</h3><ul><li>flex-wrap속성을 썼을때만 사용가능</li><li>다중정렬 간격을 조정함</li></ul><h1 id="display-grid"><a href="#display-grid" class="headerlink" title="display: grid"></a>display: grid</h1><ul><li><a href="http://cssgridgarden.com/" target="_blank" rel="external">http://cssgridgarden.com/</a></li><li>grid 칸이 아니라, 라인을 기준으로 움직임.</li><li>음수값을 줄 수 있음</li><li>span으로 연속성 가능</li><li>[속기법]grid-area: row-start / column-start / row-end / column-end;</li></ul><h1 id="display-float"><a href="#display-float" class="headerlink" title="display: float"></a>display: float</h1><ul><li>부모가 자식요소의 높이를 감지하지 못하게되는 문제가 발생</li><li>ie에서 호환되기 때문에 레이아웃을 잡는 고전적 방법</li><li>float되는 순간, block요소가 됨 (inline으로 바꾸려해도 바꿔지지 않음)</li><li>마진 병합 현상이 일어나지 않음</li></ul><h2 id="자식요소의-높이-감지못하는-float-문제-해결방안"><a href="#자식요소의-높이-감지못하는-float-문제-해결방안" class="headerlink" title="자식요소의 높이 감지못하는 float 문제 해결방안"></a>자식요소의 높이 감지못하는 float 문제 해결방안</h2><ol><li><p>부모에게 overflow: hidden</p><ul><li>넘어가는 것을 안보이게 하려는 감지를 위해 한번 더 검사하기 때문에, 확인</li></ul></li><li><p>마크업 상, 뒤에 나오는 요소에 clear: both</p><ul><li>블록요소에만 가능함</li><li>float값의  height만큼 마진값을 강제로 갖게됨</li><li><p>마진병합현상이 일어나기때문에 float값을 가진 요소가 height: 100px이라면 50px의 마진을 위해 150px을 주어야함</p></li><li><p><em>마진은 일반적 flow상황에서는 마진병합이 일어나지만,<br>float에서는 각자의 값을 가진다.</em></p></li></ul></li><li><p>부모에게 선택자::after를 주는법</p><ul><li>실제 마크업이 아닌, 가상 마크업을 추가하는 법 (드래그X)</li><li>속성값 content:””;를 가져야만 의미가 생김</li><li>인라인 요소기때문에, 전체열을 원한다면  display:block설정</li><li>clear:both를 주어 float를 가진 요소의 height만큼 강제 마진 추가로 띄울수있음</li><li><em>after는 같은 자식요소로 취급되기 때문에,  후에 flex,  space-between 으로 display 방법을 바꿔도 원하는 마지막 요소가 오른쪽 벽에 붙지 않는다. 꼭! 삭제해줄 것</em></li></ul></li></ol><h2 id="Position-속성값-특징"><a href="#Position-속성값-특징" class="headerlink" title="Position 속성값 특징"></a>Position 속성값 특징</h2><ol><li><p>static</p><ul><li>기본 값</li></ul></li><li><p>relative</p><ul><li>자기가 있었던 자리를 기준으로 움직임</li><li>허공에 살짝 뜨지만, 흐름을 깨지 않음</li><li>자기가 있었던 자리가 비어 있음</li></ul></li><li><p>fixed</p><ul><li>레이어가 생기듯 허공에 뜸</li><li>뷰 포트(화면)를 기준으로 움직임</li><li>자기가 있었던 자리를 잃어버림</li></ul></li><li><p>absolute</p><ul><li>레이어가 생기듯 허공에 뜸</li><li>자기가 있었던 자리를 잃어버림</li><li>상위요소를 기준으로 움직임</li><li>그러나 상위요소가 static일 경우 무시, 그 위 상위요소로 올라감</li><li>즉, 기준점으로 원하는 상위 요소에 position:relative를 줌<br>(다른 속성값은 전체 레이어에 영향을 미칠 수 있기 때문에)</li><li>크기값(width) 역시 기준값을 상속받는다.</li><li>인라인 요소였어도 absolute하는순간 블록화 됨</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;display-flex&quot;&gt;&lt;a href=&quot;#display-flex&quot; class=&quot;headerlink&quot; title=&quot;display: flex;&quot;&gt;&lt;/a&gt;display: flex;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://flex
      
    
    </summary>
    
      <category term="html-css" scheme="https://SunnySunhwa.github.io/categories/html-css/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/html-css/TIL/"/>
    
    
  </entry>
  
  <entry>
    <title>TIL_html/CSS 작업환경세팅</title>
    <link href="https://SunnySunhwa.github.io/2017/09/11/TIL-170911_setting/"/>
    <id>https://SunnySunhwa.github.io/2017/09/11/TIL-170911_setting/</id>
    <published>2017-09-11T05:22:01.000Z</published>
    <updated>2018-07-10T11:00:30.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="환경설정"><a href="#환경설정" class="headerlink" title="환경설정"></a>환경설정</h1><h2 id="vs-Code-환경설정"><a href="#vs-Code-환경설정" class="headerlink" title="vs Code 환경설정"></a>vs Code 환경설정</h2><h3 id="vs-code-extentions"><a href="#vs-code-extentions" class="headerlink" title="vs code extentions"></a>vs code extentions</h3><ul><li>live server</li><li>JS-CSS-HTML formatter</li><li>Path Autocomplete</li></ul><h3 id="key-map"><a href="#key-map" class="headerlink" title="key map"></a>key map</h3><ul><li>Atom</li></ul><h3 id="명령어팔레트-gt-formatter-config"><a href="#명령어팔레트-gt-formatter-config" class="headerlink" title="명령어팔레트 &gt; formatter config*"></a>명령어팔레트 &gt; formatter config*</h3><ul><li>js, css, html의 indent size : 2</li></ul><h3 id="firefox-chrome-extentions"><a href="#firefox-chrome-extentions" class="headerlink" title="firefox, chrome extentions"></a>firefox, chrome extentions</h3><ul><li>Web Developer</li><li>headings map</li><li>open wax (edited)</li></ul><h4 id="normalize-css"><a href="#normalize-css" class="headerlink" title="normalize.css"></a>normalize.css</h4><ul><li>css 기본값 세팅 (뷰어값 삭제)</li><li><a href="https://cdnjs.com/libraries/normalize" target="_blank" rel="external">https://cdnjs.com/libraries/normalize</a></li></ul><h4 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h4><ul><li>css 기본값  리셋</li></ul><h4 id="css-minified-uglyfied"><a href="#css-minified-uglyfied" class="headerlink" title="css- minified, uglyfied"></a>css- minified, uglyfied</h4><ul><li>css를 보기좋게 짜놓고 배포할때만 한줄로 줄여서 난독화, but 용량 줄임</li></ul><h3 id="www-w3-org-Style-CSS-current-work"><a href="#www-w3-org-Style-CSS-current-work" class="headerlink" title="www.w3.org/Style/CSS/current-work"></a>www.w3.org/Style/CSS/current-work</h3><ul><li>보편적으로 쓸 수 있는 CSS가 뭔지 확인하고 싶을때</li><li>단계: D &gt; WD &gt; CR &gt; PR &gt; REC</li><li>뒤로 갈수록 안정적으로 쓸수있음</li></ul><h3 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h3><ul><li>웹아이콘 클래스 모듈화 사이트</li><li><a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a></li></ul><h2 id="단축키-emmet"><a href="#단축키-emmet" class="headerlink" title="단축키 (emmet)"></a>단축키 (emmet)</h2><ul><li>Cmd + shift + k : 커서가 있는줄 삭제</li><li>cmd + shift + D : 커서 있는줄 복사</li><li>Cmd +  \  : 사이드바 보이기 안보이기</li><li>Cmd + / : 주석처리</li><li>Alt + 방향키 : 해당 커서 줄 옮기기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;환경설정&quot;&gt;&lt;a href=&quot;#환경설정&quot; class=&quot;headerlink&quot; title=&quot;환경설정&quot;&gt;&lt;/a&gt;환경설정&lt;/h1&gt;&lt;h2 id=&quot;vs-Code-환경설정&quot;&gt;&lt;a href=&quot;#vs-Code-환경설정&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="dev-others" scheme="https://SunnySunhwa.github.io/categories/dev-others/"/>
    
      <category term="html-css" scheme="https://SunnySunhwa.github.io/categories/dev-others/html-css/"/>
    
      <category term="TIL" scheme="https://SunnySunhwa.github.io/categories/dev-others/html-css/TIL/"/>
    
    
  </entry>
  
</feed>
